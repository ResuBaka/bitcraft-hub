//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::shared::timestamp;
use game_module::module_bindings::ClaimTechState;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "claim_tech_state")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    pub learned: Vec<i32>,
    pub researching: i32,
    #[sea_orm(column_type = "Json")]
    pub start_timestamp: timestamp::Timestamp,
    pub scheduled_id: Option<i64>,
    pub region: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

pub struct ModelBuilder {
    entity_id: i64,
    learned: Vec<i32>,
    researching: i32,
    start_timestamp: timestamp::Timestamp,
    scheduled_id: Option<i64>,
    region: String,
}

impl ModelBuilder {
    pub fn new(claim_tech_state: ClaimTechState) -> Self {
        Self {
            entity_id: claim_tech_state.entity_id as i64,
            learned: claim_tech_state.learned,
            researching: claim_tech_state.researching,
            start_timestamp: claim_tech_state.start_timestamp.into(),
            scheduled_id: claim_tech_state.scheduled_id.map(|s| s as i64),
            region: String::new(),
        }
    }

    pub fn with_region(mut self, region: String) -> Self {
        self.region = region;
        self
    }

    pub fn build(self) -> Model {
        Model {
            entity_id: self.entity_id,
            learned: self.learned,
            researching: self.researching,
            start_timestamp: self.start_timestamp,
            scheduled_id: self.scheduled_id,
            region: self.region,
        }
    }
}
