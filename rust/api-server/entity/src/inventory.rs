//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use crate::{cargo_desc, item_desc};
use game_module::module_bindings::InventoryState;
use sea_orm::entity::prelude::*;
use sea_orm::{FromJsonQueryResult, JsonValue};
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "inventory")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    #[sea_orm(column_type = "Json")]
    pub pockets: Vec<Pocket>,
    pub inventory_index: i32,
    pub cargo_index: i32,
    pub owner_entity_id: i64,
    pub player_owner_entity_id: i64,
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult, Deserialize, Serialize)]
pub struct Pocket {
    pub volume: i32,
    pub contents: Option<ItemStack>,
    pub locked: bool,
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult, Deserialize, Serialize)]
pub struct ItemStack {
    pub item_id: i32,
    pub quantity: i32,
    pub item_type: ItemType,
    pub durability: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize, TS)]
pub struct ResolvedInventory {
    pub entity_id: i64,
    pub pockets: Vec<ItemSlotResolved>,
    pub inventory_index: i32,
    pub cargo_index: i32,
    pub owner_entity_id: i64,
    pub player_owner_entity_id: i64,
    pub nickname: Option<String>,
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult, Deserialize, Serialize, TS)]
pub struct ItemSlotResolved {
    pub volume: i64,
    pub contents: Option<ExpendedRefrence>,
    pub locked: bool,
}

#[derive(Clone, Debug, PartialEq, Eq, FromJsonQueryResult, Deserialize, Serialize)]
pub struct ItemSlot {
    pub volume: i64,
    pub contents: (i64, Option<JsonValue>),
    pub locked: bool,
}

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ItemPocket {
    pub item_id: i32,
    pub quantity: i64,
    pub item_type: ItemType,
    pub durability: Option<i32>,
}

#[derive(Clone, Debug, PartialEq, Eq, FromJsonQueryResult, Deserialize, Serialize)]
pub struct Content {
    pub item_id: i32,
    pub quantity: i64,
    pub item_type: JsonValue,
    pub durability: JsonValue,
}

impl Content {
    pub fn get_item_type(&self) -> ItemType {
        let item_type = self
            .item_type
            .as_array()
            .unwrap()
            .first()
            .unwrap()
            .as_i64()
            .unwrap();

        match item_type {
            0 => ItemType::Item,
            1 => ItemType::Cargo,
            _ => unreachable!(),
        }
    }

    pub fn get_durability(&self) -> Option<i64> {
        let array = self.durability.as_array().unwrap();

        match array.first().unwrap().as_i64().unwrap() {
            0 => array.get(1).unwrap().as_i64(),
            1 => None,
            _ => unreachable!(),
        }
    }
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult, Eq, Hash, Deserialize, Serialize, TS)]
pub enum ItemType {
    Item,
    Cargo,
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult, Deserialize, Serialize, TS)]
#[serde(untagged)]
pub enum ItemExpended {
    Item(item_desc::Model),
    Cargo(cargo_desc::Model),
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult, Deserialize, Serialize, TS)]
pub struct ExpendedRefrence {
    pub item_id: i32,
    pub item: ItemExpended,
    pub quantity: i32,
    pub item_type: ItemType,
    pub durability: Option<i32>,
}

impl From<game_module::module_bindings::Pocket> for crate::inventory::Pocket {
    fn from(value: game_module::module_bindings::Pocket) -> Self {
        crate::inventory::Pocket {
            volume: value.volume,
            contents: value.contents.map(|value| value.clone().into()),
            locked: value.locked,
        }
    }
}

impl From<game_module::module_bindings::ItemStack> for crate::inventory::ItemStack {
    fn from(value: game_module::module_bindings::ItemStack) -> Self {
        crate::inventory::ItemStack {
            item_id: value.item_id,
            quantity: value.quantity,
            item_type: value.item_type.into(),
            durability: value.durability,
        }
    }
}

impl From<game_module::module_bindings::ItemType> for crate::inventory::ItemType {
    fn from(value: game_module::module_bindings::ItemType) -> Self {
        match &value {
            game_module::module_bindings::ItemType::Cargo => crate::inventory::ItemType::Cargo,
            game_module::module_bindings::ItemType::Item => crate::inventory::ItemType::Item,
        }
    }
}

impl From<InventoryState> for crate::inventory::Model {
    fn from(value: InventoryState) -> Self {
        let pockets: Vec<crate::inventory::Pocket> = value
            .pockets
            .iter()
            .map(|content| content.clone().into())
            .collect();

        crate::inventory::Model {
            entity_id: value.entity_id as i64,
            pockets,
            inventory_index: value.inventory_index,
            cargo_index: value.cargo_index,
            owner_entity_id: value.owner_entity_id as i64,
            player_owner_entity_id: value.player_owner_entity_id as i64,
        }
    }
}
