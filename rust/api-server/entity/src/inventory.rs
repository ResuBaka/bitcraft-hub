//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use crate::{cargo_description, item};
use sea_orm::entity::prelude::*;
use sea_orm::{FromJsonQueryResult, JsonValue};
use std::collections::HashMap;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "inventory")]
#[axum_codec::apply(encode, decode)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    #[sea_orm(column_type = "Json")]
    pub pockets: Vec<ItemSlot>,
    pub inventory_index: i32,
    pub cargo_index: i32,
    pub owner_entity_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq)]
#[axum_codec::apply(encode, decode)]
pub struct ResolvedInventory {
    pub entity_id: i64,
    pub pockets: Vec<ItemSlotResolved>,
    pub inventory_index: i32,
    pub cargo_index: i32,
    pub owner_entity_id: i64,
    pub nickname: Option<String>,
}

#[axum_codec::apply(encode, decode)]
#[derive(Clone, Debug, PartialEq, FromJsonQueryResult)]
pub struct ItemSlotResolved {
    pub volume: i64,
    pub contents: Option<ExpendedRefrence>,
    pub locked: bool,
}

#[axum_codec::apply(encode, decode)]
#[derive(Clone, Debug, PartialEq, Eq, FromJsonQueryResult)]
pub struct ItemSlot {
    pub volume: i64,
    pub contents: HashMap<i64, Option<JsonValue>>,
    pub locked: bool,
}

#[axum_codec::apply(encode, decode)]
#[derive(Clone, Debug, PartialEq)]
pub struct ItemPocket {
    pub item_id: i64,
    pub quantity: i64,
    pub item_type: ItemType,
    pub durability: Option<i64>,
}

#[axum_codec::apply(encode, decode)]
#[derive(Clone, Debug, PartialEq, Eq, FromJsonQueryResult)]
pub struct Content {
    pub item_id: i64,
    pub quantity: i64,
    pub item_type: JsonValue,
    pub durability: JsonValue,
}

#[axum_codec::apply(encode, decode)]
#[derive(Clone, Debug, PartialEq, FromJsonQueryResult)]
pub enum ItemType {
    Item,
    Cargo,
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult)]
#[axum_codec::apply(encode, decode)]
#[serde(untagged)]
pub enum ItemExpended {
    Item(item::Model),
    Cargo(cargo_description::Model),
}

#[derive(Clone, Debug, PartialEq, FromJsonQueryResult)]
#[axum_codec::apply(encode, decode)]
pub struct ExpendedRefrence {
    pub item_id: i64,
    pub item: ItemExpended,
    pub quantity: i64,
    pub item_type: ItemType,
    pub durability: Option<i64>,
}
