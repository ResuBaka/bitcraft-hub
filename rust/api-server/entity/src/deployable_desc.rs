//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use game_module::module_bindings::DeployableDesc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

use crate::shared::csv_stat_entry::CsvStatEntry;
use crate::shared::experience_stack_f32::ExperienceStackF32;
use crate::shared::movement_speed::MovementSpeed;

#[derive(
    Clone, Copy, Debug, PartialEq, Eq, Hash, EnumIter, DeriveActiveEnum, Serialize, Deserialize, TS,
)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)")]
pub enum DeployableType {
    #[sea_orm(string_value = "Cart")]
    Cart,
    #[sea_orm(string_value = "Mount")]
    Mount,
    #[sea_orm(string_value = "Stall")]
    Stall,
    #[sea_orm(string_value = "Cache")]
    Cache,
    #[sea_orm(string_value = "Boat")]
    Boat,
    #[sea_orm(string_value = "SiegeEngine")]
    SiegeEngine,
}

#[derive(
    Clone, Copy, Debug, PartialEq, Eq, Hash, EnumIter, DeriveActiveEnum, Serialize, Deserialize, TS
)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)")]
pub enum MovementType {
    #[sea_orm(string_value = "None")]
    None,
    #[sea_orm(string_value = "Ground")]
    Ground,
    #[sea_orm(string_value = "Water")]
    Water,
    #[sea_orm(string_value = "Amphibious")]
    Amphibious,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, TS)]
#[ts(rename = "DeployableDesc")]
#[sea_orm(table_name = "deployable_desc")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
    pub deploy_from_collectible_id: i32,
    pub deploy_time: f32,
    pub deployable_type: DeployableType,
    pub pathfinding_id: i32,
    pub movement_type: MovementType,
    pub can_enter_portals: bool,
    #[sea_orm(column_type = "Json")]
    pub speed: Vec<MovementSpeed>,
    pub use_player_speed_modifier: bool,
    pub placeable_on_land: bool,
    pub placeable_in_water: bool,
    pub capacity: i32,
    pub storage: i32,
    pub stockpile: i32,
    pub barter: i32,
    pub item_slot_size: i32,
    pub cargo_slot_size: i32,
    pub model_address: String,
    #[sea_orm(column_type = "Json")]
    pub stats: Vec<CsvStatEntry>,
    pub player_animations_in_deployable_slots: Vec<i32>,
    pub allow_driver_extract: bool,
    pub allow_passenger_extract: bool,
    pub show_for_secs_after_owner_logout: i32,
    pub allow_emote_while_driver: bool,
    pub allow_emote_while_passenger: bool,
    #[sea_orm(column_type = "Json")]
    pub experience_per_progress: Vec<ExperienceStackF32>,
    pub mounting_radius: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<game_module::module_bindings::DeployableType> for DeployableType {
    fn from(value: game_module::module_bindings::DeployableType) -> Self {
        match value {
            game_module::module_bindings::DeployableType::Cart => Self::Cart,
            game_module::module_bindings::DeployableType::Mount => Self::Mount,
            game_module::module_bindings::DeployableType::Stall => Self::Stall,
            game_module::module_bindings::DeployableType::Cache => Self::Cache,
            game_module::module_bindings::DeployableType::Boat => Self::Boat,
            game_module::module_bindings::DeployableType::SiegeEngine => Self::SiegeEngine,
        }
    }
}

impl From<game_module::module_bindings::MovementType> for MovementType {
    fn from(value: game_module::module_bindings::MovementType) -> Self {
        match value {
            game_module::module_bindings::MovementType::None => MovementType::None,
            game_module::module_bindings::MovementType::Ground => MovementType::Ground,
            game_module::module_bindings::MovementType::Water => MovementType::Water,
            game_module::module_bindings::MovementType::Amphibious => MovementType::Amphibious,
        }
    }
}

impl From<DeployableDesc> for Model {
    fn from(value: DeployableDesc) -> Self {
        Self {
            id: value.id,
            name: value.name,
            deploy_from_collectible_id: value.deploy_from_collectible_id,
            deploy_time: value.deploy_time,
            deployable_type: value.deployable_type.into(),
            pathfinding_id: value.pathfinding_id,
            movement_type: value.movement_type.into(),
            can_enter_portals: value.can_enter_portals,
            speed: value.speed.into_iter().map(Into::into).collect(),
            use_player_speed_modifier: value.use_player_speed_modifier,
            placeable_on_land: value.placeable_on_land,
            placeable_in_water: value.placeable_in_water,
            capacity: value.capacity,
            storage: value.storage,
            stockpile: value.stockpile,
            barter: value.barter,
            item_slot_size: value.item_slot_size,
            cargo_slot_size: value.cargo_slot_size,
            model_address: value.model_address,
            stats: value.stats.into_iter().map(Into::into).collect(),
            player_animations_in_deployable_slots: value.player_animations_in_deployable_slots,
            allow_driver_extract: value.allow_driver_extract,
            allow_passenger_extract: value.allow_passenger_extract,
            show_for_secs_after_owner_logout: value.show_for_secs_after_owner_logout,
            allow_emote_while_driver: value.allow_emote_while_driver,
            allow_emote_while_passenger: value.allow_emote_while_passenger,
            experience_per_progress: value
                .experience_per_progress
                .into_iter()
                .map(Into::into)
                .collect(),
            mounting_radius: value.mounting_radius,
        }
    }
}
