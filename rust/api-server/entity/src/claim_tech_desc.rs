//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use game_module::module_bindings::ClaimTechDesc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "claim_tech_desc")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub description: String,
    pub tier: i32,
    pub supplies_cost: i32,
    pub research_time: i32,
    #[sea_orm(column_type = "Json")]
    pub requirements: Vec<i32>,
    #[sea_orm(column_type = "Json")]
    pub input: Vec<crate::shared::item_stack::ItemStack>,
    pub members: i32,
    pub area: i32,
    pub supplies: i32,
    pub xp_to_mint_hex_coin: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<ClaimTechDesc> for Model {
    fn from(claim_tech_state: ClaimTechDesc) -> Self {
        Self {
            id: claim_tech_state.id,
            description: claim_tech_state.description,
            tier: claim_tech_state.tier,
            supplies_cost: claim_tech_state.supplies_cost,
            research_time: claim_tech_state.research_time,
            requirements: claim_tech_state.requirements,
            input: claim_tech_state.input.into_iter().map(Into::into).collect(),
            members: claim_tech_state.members,
            area: claim_tech_state.area,
            supplies: claim_tech_state.supplies,
            xp_to_mint_hex_coin: claim_tech_state.xp_to_mint_hex_coin as i32,
        }
    }
}
