//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use crate::item_desc::Rarity;
use game_module::module_bindings::cargo_desc_type;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, TS)]
#[ts(rename = "CargoDesc")]
#[sea_orm(table_name = "cargo_desc")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
    pub description: String,
    pub volume: i32,
    pub secondary_knowledge_id: i32,
    pub model_asset_name: String,
    pub icon_asset_name: String,
    pub carried_model_asset_name: String,
    pub pick_up_animation_start: String,
    pub pick_up_animation_end: String,
    pub drop_animation_start: String,
    pub drop_animation_end: String,
    #[sea_orm(column_type = "Float")]
    pub pick_up_time: f32,
    #[sea_orm(column_type = "Float")]
    pub place_time: f32,
    pub animator_state: String,
    #[sea_orm(column_type = "Float")]
    pub movement_modifier: f32,
    pub blocks_path: bool,
    #[sea_orm(column_type = "JsonBinary")]
    pub on_destroy_yield_cargos: Vec<i32>,
    #[sea_orm(column_type = "Float")]
    pub despawn_time: f32,
    pub tier: i32,
    pub tag: String,
    pub rarity: Rarity,
    pub not_pickupable: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<cargo_desc_type::CargoDesc> for Model {
    fn from(value: cargo_desc_type::CargoDesc) -> Self {
        let rarity = match &value.rarity {
            game_module::module_bindings::Rarity::Default => crate::item_desc::Rarity::Default,
            game_module::module_bindings::Rarity::Common => crate::item_desc::Rarity::Common,
            game_module::module_bindings::Rarity::Uncommon => crate::item_desc::Rarity::Uncommon,
            game_module::module_bindings::Rarity::Rare => crate::item_desc::Rarity::Rare,
            game_module::module_bindings::Rarity::Epic => crate::item_desc::Rarity::Epic,
            game_module::module_bindings::Rarity::Legendary => crate::item_desc::Rarity::Legendary,
            game_module::module_bindings::Rarity::Mythic => crate::item_desc::Rarity::Mythic,
        };
        crate::cargo_desc::Model {
            id: value.id,
            name: value.name,
            description: value.description,
            volume: value.volume,
            secondary_knowledge_id: value.secondary_knowledge_id,
            model_asset_name: value.model_asset_name,
            icon_asset_name: value.icon_asset_name,
            carried_model_asset_name: value.carried_model_asset_name,
            pick_up_animation_start: value.pick_up_animation_start,
            pick_up_animation_end: value.pick_up_animation_end,
            drop_animation_start: value.drop_animation_start,
            drop_animation_end: value.drop_animation_end,
            pick_up_time: value.pick_up_time,
            place_time: value.place_time,
            animator_state: value.animator_state,
            movement_modifier: value.movement_modifier,
            blocks_path: value.blocks_path,
            on_destroy_yield_cargos: value.on_destroy_yield_cargos,
            despawn_time: value.despawn_time,
            tier: value.tier,
            tag: value.tag,
            rarity,
            not_pickupable: value.not_pickupable,
        }
    }
}
