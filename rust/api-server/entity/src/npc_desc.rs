//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use game_module::module_bindings::NpcDesc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, TS)]
#[sea_orm(table_name = "npc_desc")]
#[ts(rename = "NpcDesc", export)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub npc_type: i32,
    pub name: String,
    pub population: f32,
    pub speed: i32,
    pub min_time_at_ruin: i32,
    pub max_time_at_ruin: i32,
    pub prefab_address: String,
    pub icon_address: String,
    pub force_market_mode: bool,
    pub task_skill_check: Vec<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<NpcDesc> for Model {
    fn from(value: NpcDesc) -> Self {
        Model {
            npc_type: value.npc_type,
            name: value.name,
            population: value.population,
            speed: value.speed,
            min_time_at_ruin: value.min_time_at_ruin,
            max_time_at_ruin: value.max_time_at_ruin,
            prefab_address: value.prefab_address,
            icon_address: value.icon_address,
            force_market_mode: value.force_market_mode,
            task_skill_check: value.task_skill_check,
        }
    }
}
