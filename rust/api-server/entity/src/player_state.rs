//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use game_module::module_bindings::PlayerState;
use sea_orm::FromJsonQueryResult;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, TS)]
#[ts(rename = "PlayerState")]
#[sea_orm(table_name = "player_state")]
pub struct Model {
    #[sea_orm(column_type = "Json")]
    pub teleport_location: TeleportLocation,
    #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    pub time_played: i32,
    pub session_start_timestamp: i32,
    pub time_signed_in: i32,
    pub sign_in_timestamp: i32,
    pub signed_in: bool,
    pub traveler_tasks_expiration: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player_username_state::Entity",
        from = "super::player_state::Column::EntityId",
        to = "super::player_username_state::Column::EntityId"
    )]
    PlayerUsernameState,
}

impl Related<super::player_username_state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerUsernameState.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, FromJsonQueryResult, TS)]
pub struct TeleportLocation {
    pub location: OffsetCoordinatesSmallMessage,
    pub location_type: TeleportLocationType,
}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, FromJsonQueryResult, TS)]
pub struct OffsetCoordinatesSmallMessage {
    pub x: i32,
    pub z: i32,
    pub dimension: u32,
}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, FromJsonQueryResult, TS)]
pub enum TeleportLocationType {
    BirthLocation,
    TradingPost,
    HomeLocation,
    CustomLocation,
    Waystone,
}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, TS)]
pub struct PlayerStateMerged {
    pub teleport_location: TeleportLocation,
    pub entity_id: u64,
    pub time_played: i32,
    pub session_start_timestamp: i32,
    pub time_signed_in: i32,
    pub sign_in_timestamp: i32,
    pub signed_in: bool,
    pub traveler_tasks_expiration: i32,
    pub username: String,
}

impl From<PlayerState> for crate::player_state::Model {
    fn from(value: PlayerState) -> Self {
        let teleport_location = crate::player_state::TeleportLocation {
            location: crate::player_state::OffsetCoordinatesSmallMessage {
                x: value.teleport_location.location.x,
                z: value.teleport_location.location.z,
                dimension: value.teleport_location.location.dimension,
            },
            location_type: match value.teleport_location.location_type {
                game_module::module_bindings::TeleportLocationType::BirthLocation => {
                    crate::player_state::TeleportLocationType::BirthLocation
                }
                game_module::module_bindings::TeleportLocationType::TradingPost => {
                    crate::player_state::TeleportLocationType::TradingPost
                }
                game_module::module_bindings::TeleportLocationType::HomeLocation => {
                    crate::player_state::TeleportLocationType::HomeLocation
                }
                game_module::module_bindings::TeleportLocationType::CustomLocation => {
                    crate::player_state::TeleportLocationType::CustomLocation
                }
                game_module::module_bindings::TeleportLocationType::Waystone => {
                    crate::player_state::TeleportLocationType::Waystone
                }
            },
        };

        crate::player_state::Model {
            teleport_location,
            entity_id: value.entity_id as i64,
            time_played: value.time_played,
            session_start_timestamp: value.session_start_timestamp,
            time_signed_in: value.time_signed_in,
            sign_in_timestamp: value.sign_in_timestamp,
            signed_in: value.signed_in,
            traveler_tasks_expiration: value.traveler_tasks_expiration,
        }
    }
}
