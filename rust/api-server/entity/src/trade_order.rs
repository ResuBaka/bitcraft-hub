//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use crate::inventory::ItemStack;
use game_module::module_bindings::TradeOrderState;
use sea_orm::entity::prelude::*;
use sea_orm::{FromJsonQueryResult, JsonValue};
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, TS)]
#[ts(rename = "TradeOrderState")]
#[sea_orm(table_name = "trade_order")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    pub remaining_stock: i32,
    #[sea_orm(column_type = "Json")]
    pub offer_items: Vec<ItemStack>,
    pub offer_cargo_id: Vec<i32>,
    #[sea_orm(column_type = "Json")]
    pub required_items: Vec<ItemStack>,
    pub required_cargo_id: Vec<i32>,
    pub region: String,
    pub shop_entity_id: i64,
    pub traveler_trade_order_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq, Eq, FromJsonQueryResult, Deserialize, Serialize)]
pub struct TradeOrderOfferItem {
    pub item_id: i64,
    pub quantity: i64,
    pub item_type: JsonValue,
    pub durability: JsonValue,
}

pub struct ModelBuilder {
    pub entity_id: i64,
    pub shop_entity_id: i64,
    pub remaining_stock: i32,
    pub offer_items: Vec<ItemStack>,
    pub offer_cargo_id: Vec<i32>,
    pub required_items: Vec<ItemStack>,
    pub required_cargo_id: Vec<i32>,
    pub traveler_trade_order_id: Option<i32>,
    pub region: String,
}

impl ModelBuilder {
    pub fn new(value: TradeOrderState) -> Self {
        Self {
            entity_id: value.entity_id as i64,
            shop_entity_id: value.shop_entity_id as i64,
            remaining_stock: value.remaining_stock,
            offer_items: value
                .offer_items
                .into_iter()
                .map(|required_item| ItemStack {
                    item_id: required_item.item_id,
                    quantity: required_item.quantity,
                    item_type: required_item.item_type.into(),
                    durability: required_item.durability,
                })
                .collect(),
            offer_cargo_id: value.offer_cargo_id,
            required_items: value
                .required_items
                .into_iter()
                .map(|required_item| ItemStack {
                    item_id: required_item.item_id,
                    quantity: required_item.quantity,
                    item_type: required_item.item_type.into(),
                    durability: required_item.durability,
                })
                .collect(),
            required_cargo_id: value.required_cargo_id,
            traveler_trade_order_id: value.traveler_trade_order_id,
            region: String::new(),
        }
    }

    pub fn with_region(mut self, region: String) -> Self {
        self.region = region;
        self
    }

    pub fn build(self) -> Model {
        Model {
            entity_id: self.entity_id,
            shop_entity_id: self.shop_entity_id,
            remaining_stock: self.remaining_stock,
            offer_items: self.offer_items,
            offer_cargo_id: self.offer_cargo_id,
            required_items: self.required_items,
            required_cargo_id: self.required_cargo_id,
            traveler_trade_order_id: self.traveler_trade_order_id,
            region: self.region,
        }
    }
}
