//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use game_module::module_bindings::MobileEntityState;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, TS)]
#[ts(rename = "MobileEntityState")]
pub struct Model {
    pub entity_id: u64,
    pub chunk_index: u64,
    pub timestamp: u64,
    pub location_x: i32,
    pub location_z: i32,
    pub destination_x: i32,
    pub destination_z: i32,
    pub dimension: u32,
    pub is_running: bool,
    pub region: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

pub struct ModelBuilder {
    entity_id: u64,
    chunk_index: u64,
    timestamp: u64,
    location_x: i32,
    location_z: i32,
    destination_x: i32,
    destination_z: i32,
    dimension: u32,
    is_running: bool,
    region: String,
}

impl ModelBuilder {
    pub fn new(value: MobileEntityState) -> Self {
        Self {
            entity_id: value.entity_id,
            chunk_index: value.chunk_index,
            timestamp: value.timestamp,
            location_x: value.location_x,
            location_z: value.location_z,
            destination_x: value.destination_x,
            destination_z: value.destination_z,
            dimension: value.dimension,
            is_running: value.is_running,
            region: String::new(),
        }
    }

    pub fn with_region(mut self, region: String) -> Self {
        self.region = region;
        self
    }

    pub fn build(self) -> Model {
        Model {
            entity_id: self.entity_id,
            chunk_index: self.chunk_index,
            timestamp: self.timestamp,
            location_x: self.location_x,
            location_z: self.location_z,
            destination_x: self.destination_x,
            destination_z: self.destination_z,
            dimension: self.dimension,
            is_running: self.is_running,
            region: self.region,
        }
    }
}
