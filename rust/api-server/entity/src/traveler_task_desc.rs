//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use game_module::module_bindings::TravelerTaskDesc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::shared::{experience_stack_f32::ExperienceStackF32, item_stack::ItemStack};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "traveler_task_desc")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(indexed)]
    pub skill_id: i32,
    #[sea_orm(indexed)]
    pub min_level: i32,
    #[sea_orm(indexed)]
    pub max_level: i32,
    #[sea_orm(column_type = "Json")]
    pub required_items: Vec<ItemStack>,
    #[sea_orm(column_type = "Json")]
    pub rewarded_items: Vec<ItemStack>,
    #[sea_orm(column_type = "Json")]
    pub rewarded_experience: ExperienceStackF32,
    pub description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}


impl From<TravelerTaskDesc> for Model {
    fn from(value: TravelerTaskDesc) -> Self {
        Model {
            id: value.id,
            skill_id: value.level_requirement.skill_id,
            min_level: value.level_requirement.min_level,
            max_level: value.level_requirement.max_level,
            required_items: value.required_items.into_iter().map(Into::into).collect(),
            rewarded_items: value.rewarded_items.into_iter().map(Into::into).collect(),
            rewarded_experience: value.rewarded_experience.into(),
            description: value.description,
        }
    }
}
