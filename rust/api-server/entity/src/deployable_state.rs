//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use game_module::module_bindings::DeployableState;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "deployable_state")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    pub owner_id: i64,
    pub claim_entity_id: i64,
    pub direction: i32,
    pub deployable_description_id: i32,
    pub nickname: String,
    pub hidden: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<DeployableState> for crate::deployable_state::Model {
    fn from(value: DeployableState) -> Self {
        crate::deployable_state::Model {
            entity_id: value.entity_id as i64,
            owner_id: value.owner_id as i64,
            claim_entity_id: value.claim_entity_id as i64,
            direction: value.direction,
            deployable_description_id: value.deployable_description_id,
            nickname: value.nickname,
            hidden: value.hidden,
        }
    }
}
