//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

// use sea_orm::entity::prelude::*;
use game_module::module_bindings::LocationState;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

// #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, TS)]
#[ts(rename = "Location")]
// #[sea_orm(table_name = "location")]
pub struct Model {
    // #[sea_orm(primary_key, auto_increment = false)]
    pub entity_id: i64,
    pub chunk_index: i64,
    pub x: i32,
    pub z: i32,
    pub dimension: i32,
    pub region: String,
}

// #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
// pub enum Relation {}

// impl ActiveModelBehavior for ActiveModel {}

pub struct ModelBuilder {
    entity_id: i64,
    chunk_index: i64,
    x: i32,
    z: i32,
    dimension: i32,
    region: String,
}

impl ModelBuilder {
    pub fn new(value: LocationState) -> Self {
        Self {
            entity_id: value.entity_id as i64,
            chunk_index: value.chunk_index as i64,
            x: value.x,
            z: value.z,
            dimension: value.dimension as i32,
            region: String::new(),
        }
    }

    pub fn with_region(mut self, region: String) -> Self {
        self.region = region;
        self
    }

    pub fn build(self) -> Model {
        Model {
            entity_id: self.entity_id,
            chunk_index: self.chunk_index,
            x: self.x,
            z: self.z,
            dimension: self.dimension,
            region: self.region,
        }
    }
}
