// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::offset_coordinates_small_message_type::OffsetCoordinatesSmallMessage;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct BlueprintPlaceArgs {
    pub center: OffsetCoordinatesSmallMessage,
    pub blueprint_json: String,
    pub settings_json: String,
    pub rotation: i32,
    pub elevation_offset: i16,
}

impl From<BlueprintPlaceArgs> for super::Reducer {
    fn from(args: BlueprintPlaceArgs) -> Self {
        Self::BlueprintPlace {
            center: args.center,
            blueprint_json: args.blueprint_json,
            settings_json: args.settings_json,
            rotation: args.rotation,
            elevation_offset: args.elevation_offset,
        }
    }
}

impl __sdk::InModule for BlueprintPlaceArgs {
    type Module = super::RemoteModule;
}

pub struct BlueprintPlaceCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `blueprint_place`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait blueprint_place {
    /// Request that the remote module invoke the reducer `blueprint_place` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_blueprint_place`] callbacks.
    fn blueprint_place(
        &self,
        center: OffsetCoordinatesSmallMessage,
        blueprint_json: String,
        settings_json: String,
        rotation: i32,
        elevation_offset: i16,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `blueprint_place`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`BlueprintPlaceCallbackId`] can be passed to [`Self::remove_on_blueprint_place`]
    /// to cancel the callback.
    fn on_blueprint_place(
        &self,
        callback: impl FnMut(
                &super::ReducerEventContext,
                &OffsetCoordinatesSmallMessage,
                &String,
                &String,
                &i32,
                &i16,
            ) + Send
            + 'static,
    ) -> BlueprintPlaceCallbackId;
    /// Cancel a callback previously registered by [`Self::on_blueprint_place`],
    /// causing it not to run in the future.
    fn remove_on_blueprint_place(&self, callback: BlueprintPlaceCallbackId);
}

impl blueprint_place for super::RemoteReducers {
    fn blueprint_place(
        &self,
        center: OffsetCoordinatesSmallMessage,
        blueprint_json: String,
        settings_json: String,
        rotation: i32,
        elevation_offset: i16,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "blueprint_place",
            BlueprintPlaceArgs {
                center,
                blueprint_json,
                settings_json,
                rotation,
                elevation_offset,
            },
        )
    }
    fn on_blueprint_place(
        &self,
        mut callback: impl FnMut(
                &super::ReducerEventContext,
                &OffsetCoordinatesSmallMessage,
                &String,
                &String,
                &i32,
                &i16,
            ) + Send
            + 'static,
    ) -> BlueprintPlaceCallbackId {
        BlueprintPlaceCallbackId(self.imp.on_reducer(
            "blueprint_place",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::BlueprintPlace {
                                    center,
                                    blueprint_json,
                                    settings_json,
                                    rotation,
                                    elevation_offset,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(
                    ctx,
                    center,
                    blueprint_json,
                    settings_json,
                    rotation,
                    elevation_offset,
                )
            }),
        ))
    }
    fn remove_on_blueprint_place(&self, callback: BlueprintPlaceCallbackId) {
        self.imp.remove_on_reducer("blueprint_place", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `blueprint_place`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_blueprint_place {
    /// Set the call-reducer flags for the reducer `blueprint_place` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn blueprint_place(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_blueprint_place for super::SetReducerFlags {
    fn blueprint_place(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("blueprint_place", flags);
    }
}
