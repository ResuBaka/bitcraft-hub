// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::world_region_state_type::WorldRegionState;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `world_region_state`.
///
/// Obtain a handle from the [`WorldRegionStateTableAccess::world_region_state`] method on [`super::RemoteTables`],
/// like `ctx.db.world_region_state()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.world_region_state().on_insert(...)`.
pub struct WorldRegionStateTableHandle<'ctx> {
    imp: __sdk::TableHandle<WorldRegionState>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `world_region_state`.
///
/// Implemented for [`super::RemoteTables`].
pub trait WorldRegionStateTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`WorldRegionStateTableHandle`], which mediates access to the table `world_region_state`.
    fn world_region_state(&self) -> WorldRegionStateTableHandle<'_>;
}

impl WorldRegionStateTableAccess for super::RemoteTables {
    fn world_region_state(&self) -> WorldRegionStateTableHandle<'_> {
        WorldRegionStateTableHandle {
            imp: self.imp.get_table::<WorldRegionState>("world_region_state"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct WorldRegionStateInsertCallbackId(__sdk::CallbackId);
pub struct WorldRegionStateDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for WorldRegionStateTableHandle<'ctx> {
    type Row = WorldRegionState;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = WorldRegionState> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = WorldRegionStateInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> WorldRegionStateInsertCallbackId {
        WorldRegionStateInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: WorldRegionStateInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = WorldRegionStateDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> WorldRegionStateDeleteCallbackId {
        WorldRegionStateDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: WorldRegionStateDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<WorldRegionState>("world_region_state");
    _table.add_unique_constraint::<u8>("id", |row| &row.id);
}
pub struct WorldRegionStateUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for WorldRegionStateTableHandle<'ctx> {
    type UpdateCallbackId = WorldRegionStateUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> WorldRegionStateUpdateCallbackId {
        WorldRegionStateUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: WorldRegionStateUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<WorldRegionState>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<WorldRegionState>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `id` unique index on the table `world_region_state`,
/// which allows point queries on the field of the same name
/// via the [`WorldRegionStateIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.world_region_state().id().find(...)`.
pub struct WorldRegionStateIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<WorldRegionState, u8>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> WorldRegionStateTableHandle<'ctx> {
    /// Get a handle on the `id` unique index on the table `world_region_state`.
    pub fn id(&self) -> WorldRegionStateIdUnique<'ctx> {
        WorldRegionStateIdUnique {
            imp: self.imp.get_unique_constraint::<u8>("id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> WorldRegionStateIdUnique<'ctx> {
    /// Find the subscribed row whose `id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u8) -> Option<WorldRegionState> {
        self.imp.find(col_val)
    }
}
