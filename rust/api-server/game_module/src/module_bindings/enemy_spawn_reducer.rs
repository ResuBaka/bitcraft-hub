// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::enemy_spawn_request_type::EnemySpawnRequest;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct EnemySpawnArgs {
    pub request: EnemySpawnRequest,
}

impl From<EnemySpawnArgs> for super::Reducer {
    fn from(args: EnemySpawnArgs) -> Self {
        Self::EnemySpawn {
            request: args.request,
        }
    }
}

impl __sdk::InModule for EnemySpawnArgs {
    type Module = super::RemoteModule;
}

pub struct EnemySpawnCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `enemy_spawn`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait enemy_spawn {
    /// Request that the remote module invoke the reducer `enemy_spawn` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_enemy_spawn`] callbacks.
    fn enemy_spawn(&self, request: EnemySpawnRequest) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `enemy_spawn`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`EnemySpawnCallbackId`] can be passed to [`Self::remove_on_enemy_spawn`]
    /// to cancel the callback.
    fn on_enemy_spawn(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &EnemySpawnRequest) + Send + 'static,
    ) -> EnemySpawnCallbackId;
    /// Cancel a callback previously registered by [`Self::on_enemy_spawn`],
    /// causing it not to run in the future.
    fn remove_on_enemy_spawn(&self, callback: EnemySpawnCallbackId);
}

impl enemy_spawn for super::RemoteReducers {
    fn enemy_spawn(&self, request: EnemySpawnRequest) -> __sdk::Result<()> {
        self.imp
            .call_reducer("enemy_spawn", EnemySpawnArgs { request })
    }
    fn on_enemy_spawn(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &EnemySpawnRequest) + Send + 'static,
    ) -> EnemySpawnCallbackId {
        EnemySpawnCallbackId(self.imp.on_reducer(
            "enemy_spawn",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer: super::Reducer::EnemySpawn { request },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, request)
            }),
        ))
    }
    fn remove_on_enemy_spawn(&self, callback: EnemySpawnCallbackId) {
        self.imp.remove_on_reducer("enemy_spawn", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `enemy_spawn`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_enemy_spawn {
    /// Set the call-reducer flags for the reducer `enemy_spawn` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn enemy_spawn(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_enemy_spawn for super::SetReducerFlags {
    fn enemy_spawn(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("enemy_spawn", flags);
    }
}
