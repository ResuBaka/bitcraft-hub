// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::user_authentication_state_type::UserAuthenticationState;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `user_authentication_state`.
///
/// Obtain a handle from the [`UserAuthenticationStateTableAccess::user_authentication_state`] method on [`super::RemoteTables`],
/// like `ctx.db.user_authentication_state()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.user_authentication_state().on_insert(...)`.
pub struct UserAuthenticationStateTableHandle<'ctx> {
    imp: __sdk::TableHandle<UserAuthenticationState>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `user_authentication_state`.
///
/// Implemented for [`super::RemoteTables`].
pub trait UserAuthenticationStateTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`UserAuthenticationStateTableHandle`], which mediates access to the table `user_authentication_state`.
    fn user_authentication_state(&self) -> UserAuthenticationStateTableHandle<'_>;
}

impl UserAuthenticationStateTableAccess for super::RemoteTables {
    fn user_authentication_state(&self) -> UserAuthenticationStateTableHandle<'_> {
        UserAuthenticationStateTableHandle {
            imp: self
                .imp
                .get_table::<UserAuthenticationState>("user_authentication_state"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct UserAuthenticationStateInsertCallbackId(__sdk::CallbackId);
pub struct UserAuthenticationStateDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for UserAuthenticationStateTableHandle<'ctx> {
    type Row = UserAuthenticationState;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = UserAuthenticationState> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = UserAuthenticationStateInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UserAuthenticationStateInsertCallbackId {
        UserAuthenticationStateInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: UserAuthenticationStateInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = UserAuthenticationStateDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UserAuthenticationStateDeleteCallbackId {
        UserAuthenticationStateDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: UserAuthenticationStateDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table =
        client_cache.get_or_make_table::<UserAuthenticationState>("user_authentication_state");
    _table.add_unique_constraint::<__sdk::Identity>("identity", |row| &row.identity);
}
pub struct UserAuthenticationStateUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for UserAuthenticationStateTableHandle<'ctx> {
    type UpdateCallbackId = UserAuthenticationStateUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> UserAuthenticationStateUpdateCallbackId {
        UserAuthenticationStateUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: UserAuthenticationStateUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<UserAuthenticationState>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<UserAuthenticationState>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `identity` unique index on the table `user_authentication_state`,
/// which allows point queries on the field of the same name
/// via the [`UserAuthenticationStateIdentityUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.user_authentication_state().identity().find(...)`.
pub struct UserAuthenticationStateIdentityUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<UserAuthenticationState, __sdk::Identity>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> UserAuthenticationStateTableHandle<'ctx> {
    /// Get a handle on the `identity` unique index on the table `user_authentication_state`.
    pub fn identity(&self) -> UserAuthenticationStateIdentityUnique<'ctx> {
        UserAuthenticationStateIdentityUnique {
            imp: self
                .imp
                .get_unique_constraint::<__sdk::Identity>("identity"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> UserAuthenticationStateIdentityUnique<'ctx> {
    /// Find the subscribed row whose `identity` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &__sdk::Identity) -> Option<UserAuthenticationState> {
        self.imp.find(col_val)
    }
}
