// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::action_state_type::ActionState;
use super::active_buff_state_type::ActiveBuffState;
use super::attack_outcome_state_type::AttackOutcomeState;
use super::character_stats_state_type::CharacterStatsState;
use super::combat_state_type::CombatState;
use super::deployable_collectible_state_type::DeployableCollectibleState;
use super::deployable_state_type::DeployableState;
use super::equipment_state_type::EquipmentState;
use super::experience_state_type::ExperienceState;
use super::exploration_chunks_state_type::ExplorationChunksState;
use super::extract_outcome_state_type::ExtractOutcomeState;
use super::float_hex_tile_message_type::FloatHexTileMessage;
use super::health_state_type::HealthState;
use super::inventory_state_type::InventoryState;
use super::knowledge_achievement_state_type::KnowledgeAchievementState;
use super::knowledge_battle_action_state_type::KnowledgeBattleActionState;
use super::knowledge_building_state_type::KnowledgeBuildingState;
use super::knowledge_cargo_state_type::KnowledgeCargoState;
use super::knowledge_claim_state_type::KnowledgeClaimState;
use super::knowledge_construction_state_type::KnowledgeConstructionState;
use super::knowledge_craft_state_type::KnowledgeCraftState;
use super::knowledge_deployable_state_type::KnowledgeDeployableState;
use super::knowledge_enemy_state_type::KnowledgeEnemyState;
use super::knowledge_extract_state_type::KnowledgeExtractState;
use super::knowledge_item_state_type::KnowledgeItemState;
use super::knowledge_lore_state_type::KnowledgeLoreState;
use super::knowledge_npc_state_type::KnowledgeNpcState;
use super::knowledge_paving_state_type::KnowledgePavingState;
use super::knowledge_pillar_shaping_state_type::KnowledgePillarShapingState;
use super::knowledge_resource_placement_state_type::KnowledgeResourcePlacementState;
use super::knowledge_resource_state_type::KnowledgeResourceState;
use super::knowledge_ruins_state_type::KnowledgeRuinsState;
use super::knowledge_secondary_state_type::KnowledgeSecondaryState;
use super::knowledge_vault_state_type::KnowledgeVaultState;
use super::move_validation_strike_counter_state_type::MoveValidationStrikeCounterState;
use super::onboarding_state_type::OnboardingState;
use super::player_action_state_type::PlayerActionState;
use super::player_housing_state_type::PlayerHousingState;
use super::player_prefs_state_type::PlayerPrefsState;
use super::player_state_type::PlayerState;
use super::player_username_state_type::PlayerUsernameState;
use super::satiation_state_type::SatiationState;
use super::stamina_state_type::StaminaState;
use super::teleportation_energy_state_type::TeleportationEnergyState;
use super::toolbar_state_type::ToolbarState;
use super::traveler_task_state_type::TravelerTaskState;
use super::unclaimed_collectibles_state_type::UnclaimedCollectiblesState;
use super::user_state_type::UserState;
use super::vault_state_type::VaultState;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct TransferPlayerMsg {
    pub original_location: FloatHexTileMessage,
    pub destination_location: FloatHexTileMessage,
    pub allow_cancel: bool,
    pub teleport_energy_cost: f32,
    pub vehicle: Option<DeployableState>,
    pub vehicle_inventory: Option<InventoryState>,
    pub player_state: PlayerState,
    pub user_state: UserState,
    pub move_validation_strike_counter_state: MoveValidationStrikeCounterState,
    pub health_state: HealthState,
    pub stamina_state: StaminaState,
    pub experience_state: ExperienceState,
    pub active_buff_state: ActiveBuffState,
    pub knowledge_achievement_state: KnowledgeAchievementState,
    pub knowledge_battle_action_state: KnowledgeBattleActionState,
    pub knowledge_building_state: KnowledgeBuildingState,
    pub knowledge_cargo_state: KnowledgeCargoState,
    pub knowledge_construction_state: KnowledgeConstructionState,
    pub knowledge_resource_placement_state: KnowledgeResourcePlacementState,
    pub knowledge_craft_state: KnowledgeCraftState,
    pub knowledge_enemy_state: KnowledgeEnemyState,
    pub knowledge_extract_state: KnowledgeExtractState,
    pub knowledge_item_state: KnowledgeItemState,
    pub knowledge_lore_state: KnowledgeLoreState,
    pub knowledge_npc_state: KnowledgeNpcState,
    pub knowledge_resource_state: KnowledgeResourceState,
    pub knowledge_ruins_state: KnowledgeRuinsState,
    pub knowledge_secondary_state: KnowledgeSecondaryState,
    pub knowledge_vault_state: KnowledgeVaultState,
    pub knowledge_deployable_state: KnowledgeDeployableState,
    pub knowledge_paving_state: KnowledgePavingState,
    pub knowledge_claim_state: KnowledgeClaimState,
    pub knowledge_pillar_shaping_state: KnowledgePillarShapingState,
    pub equipment_state: EquipmentState,
    pub inventory_state: Vec<InventoryState>,
    pub character_stats_state: CharacterStatsState,
    pub player_username_state: PlayerUsernameState,
    pub player_action_state: Vec<PlayerActionState>,
    pub deployable_collectible_state: Vec<DeployableCollectibleState>,
    pub combat_state: CombatState,
    pub action_state: Vec<ActionState>,
    pub toolbar_state: Vec<ToolbarState>,
    pub attack_outcome_state: AttackOutcomeState,
    pub vault_state: VaultState,
    pub exploration_chunks_state: ExplorationChunksState,
    pub satiation_state: SatiationState,
    pub player_prefs_state: PlayerPrefsState,
    pub onboarding_state: OnboardingState,
    pub unclaimed_collectibles_state: Option<UnclaimedCollectiblesState>,
    pub teleportation_energy_state: TeleportationEnergyState,
    pub player_housing_state: Option<PlayerHousingState>,
    pub traveler_task_states: Vec<TravelerTaskState>,
    pub extract_outcome_state: ExtractOutcomeState,
    pub undeployed_deployable_states: Vec<DeployableState>,
}

impl __sdk::InModule for TransferPlayerMsg {
    type Module = super::RemoteModule;
}
