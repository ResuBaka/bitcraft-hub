// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod a_i_debug_state_table;
pub mod achievement_desc_table;
pub mod achievement_desc_type;
pub mod action_cooldown_type;
pub mod action_state_table;
pub mod action_state_type;
pub mod active_buff_state_table;
pub mod active_buff_state_type;
pub mod active_buff_type;
pub mod admin_broadcast_message_msg_type;
pub mod admin_broadcast_msg_reducer;
pub mod admin_broadcast_table;
pub mod admin_broadcast_type;
pub mod admin_grant_shards_reducer;
pub mod admin_mark_user_report_as_actioned_reducer;
pub mod admin_notify_player_by_identity_reducer;
pub mod admin_notify_player_reducer;
pub mod admin_rename_empire_entity_reducer;
pub mod admin_rename_empire_rank_entity_reducer;
pub mod admin_rename_empire_rank_reducer;
pub mod admin_rename_empire_reducer;
pub mod admin_rename_player_entity_reducer;
pub mod admin_rename_player_reducer;
pub mod admin_sign_out_all_reducer;
pub mod admin_skip_queue_entity_reducer;
pub mod admin_skip_queue_identity_reducer;
pub mod admin_skip_queue_name_reducer;
pub mod admin_update_granted_hub_item_state_reducer;
pub mod admin_update_sign_in_parameters_reducer;
pub mod ai_debug_state_type;
pub mod alert_desc_table;
pub mod alert_desc_type;
pub mod alert_state_table;
pub mod alert_state_type;
pub mod alert_type_type;
pub mod attached_herds_state_table;
pub mod attached_herds_state_type;
pub mod attack_outcome_state_table;
pub mod attack_outcome_state_type;
pub mod auction_listing_state_type;
pub mod authenticate_reducer;
pub mod auto_claim_state_table;
pub mod auto_claim_state_type;
pub mod barter_stall_state_table;
pub mod barter_stall_state_type;
pub mod biome_desc_table;
pub mod biome_desc_type;
pub mod biome_type;
pub mod block_identity_reducer;
pub mod blocked_identity_op_type;
pub mod blocked_identity_table;
pub mod blocked_identity_type;
pub mod buff_category_type;
pub mod buff_desc_table;
pub mod buff_desc_type;
pub mod buff_effect_type;
pub mod buff_type_desc_table;
pub mod buff_type_desc_type;
pub mod building_category_type;
pub mod building_claim_desc_table;
pub mod building_claim_desc_type;
pub mod building_desc_table;
pub mod building_desc_type;
pub mod building_function_type;
pub mod building_function_type_mapping_desc_table;
pub mod building_function_type_mapping_desc_type;
pub mod building_interaction_level_type;
pub mod building_nickname_state_op_type;
pub mod building_nickname_state_table;
pub mod building_nickname_state_type;
pub mod building_portal_desc_table;
pub mod building_portal_desc_type;
pub mod building_repairs_desc_table;
pub mod building_repairs_desc_type;
pub mod building_requirement_type;
pub mod building_spawn_desc_table;
pub mod building_spawn_desc_type;
pub mod building_spawn_type_type;
pub mod building_state_op_type;
pub mod building_state_table;
pub mod building_state_type;
pub mod building_type_desc_table;
pub mod building_type_desc_type;
pub mod buy_order_state_table;
pub mod capped_level_requirement_type;
pub mod cargo_desc_table;
pub mod cargo_desc_type;
pub mod character_stat_desc_table;
pub mod character_stat_desc_type;
pub mod character_stat_type_type;
pub mod character_stats_state_table;
pub mod character_stats_state_type;
pub mod chat_channel_type;
pub mod chat_message_state_table;
pub mod chat_message_state_type;
pub mod cheat_empire_siege_add_supplies_reducer;
pub mod cheat_empire_siege_cancel_reducer;
pub mod cheat_player_set_name_reducer;
pub mod cheat_shards_grant_reducer;
pub mod cheat_shards_grant_request_type;
pub mod chest_loot_rarity_type;
pub mod chest_rarity_desc_table;
pub mod chest_rarity_desc_type;
pub mod chunk_coordinates_message_type;
pub mod claim_create_empire_settlement_msg_type;
pub mod claim_local_state_table;
pub mod claim_local_state_type;
pub mod claim_member_state_op_type;
pub mod claim_member_state_table;
pub mod claim_member_state_type;
pub mod claim_permission_type;
pub mod claim_recruitment_state_table;
pub mod claim_recruitment_state_type;
pub mod claim_state_op_type;
pub mod claim_state_table;
pub mod claim_state_type;
pub mod claim_tech_desc_table;
pub mod claim_tech_desc_type;
pub mod claim_tech_state_table;
pub mod claim_tech_state_type;
pub mod claim_tile_cost_table;
pub mod claim_tile_cost_type;
pub mod claim_tile_state_table;
pub mod claim_tile_state_type;
pub mod claim_type_type;
pub mod clear_staged_static_data_reducer;
pub mod climb_requirement_desc_table;
pub mod climb_requirement_desc_type;
pub mod closed_listing_state_table;
pub mod closed_listing_state_type;
pub mod clothing_desc_table;
pub mod clothing_desc_type;
pub mod clothing_mask_type;
pub mod clothing_visual_type;
pub mod collectible_desc_table;
pub mod collectible_desc_type;
pub mod collectible_type_type;
pub mod combat_action_desc_table;
pub mod combat_action_desc_type;
pub mod combat_state_table;
pub mod combat_state_type;
pub mod commit_staged_static_data_reducer;
pub mod config_table;
pub mod config_type;
pub mod construction_recipe_desc_table;
pub mod construction_recipe_desc_type;
pub mod crafting_recipe_desc_table;
pub mod crafting_recipe_desc_type;
pub mod csv_stat_entry_type;
pub mod current_version_reducer;
pub mod deconstruction_recipe_desc_table;
pub mod deconstruction_recipe_desc_type;
pub mod delete_empire_msg_type;
pub mod deployable_collectible_state_table;
pub mod deployable_collectible_state_type;
pub mod deployable_desc_table;
pub mod deployable_desc_type;
pub mod deployable_state_table;
pub mod deployable_state_type;
pub mod deployable_type_type;
pub mod dimension_description_state_table;
pub mod dimension_description_state_type;
pub mod dimension_network_state_table;
pub mod dimension_network_state_type;
pub mod dimension_type_type;
pub mod distant_visible_entity_desc_table;
pub mod distant_visible_entity_desc_type;
pub mod distant_visible_entity_table;
pub mod distant_visible_entity_type;
pub mod dropped_inventory_state_table;
pub mod dropped_inventory_state_type;
pub mod duel_state_table;
pub mod duel_state_type;
pub mod elevator_desc_table;
pub mod elevator_desc_type;
pub mod emote_desc_table;
pub mod emote_desc_type;
pub mod empire_change_emblem_reducer;
pub mod empire_change_emblem_request_type;
pub mod empire_chunk_state_op_type;
pub mod empire_chunk_state_table;
pub mod empire_chunk_state_type;
pub mod empire_claim_join_msg_type;
pub mod empire_collect_hexite_capsule_msg_type;
pub mod empire_color_desc_table;
pub mod empire_color_desc_type;
pub mod empire_craft_supplies_reducer;
pub mod empire_craft_supplies_scheduled_reducer;
pub mod empire_craft_supplies_timer_table;
pub mod empire_craft_supplies_timer_type;
pub mod empire_create_building_msg_type;
pub mod empire_decay_agent_loop_reducer;
pub mod empire_decay_loop_timer_table;
pub mod empire_decay_loop_timer_type;
pub mod empire_directive_state_table;
pub mod empire_directive_state_type;
pub mod empire_dismantle_reducer;
pub mod empire_dismantle_request_type;
pub mod empire_donate_shards_reducer;
pub mod empire_donate_shards_request_type;
pub mod empire_emblem_state_table;
pub mod empire_emblem_state_type;
pub mod empire_expansion_state_op_type;
pub mod empire_expansion_state_table;
pub mod empire_expansion_state_type;
pub mod empire_form_reducer;
pub mod empire_form_request_type;
pub mod empire_foundry_state_table;
pub mod empire_foundry_state_type;
pub mod empire_icon_desc_table;
pub mod empire_icon_desc_type;
pub mod empire_leave_reducer;
pub mod empire_leave_request_type;
pub mod empire_log_state_table;
pub mod empire_log_state_type;
pub mod empire_mark_for_expansion_reducer;
pub mod empire_mark_for_expansion_request_type;
pub mod empire_mark_for_siege_reducer;
pub mod empire_mark_for_siege_request_type;
pub mod empire_node_siege_state_op_type;
pub mod empire_node_siege_state_table;
pub mod empire_node_siege_state_type;
pub mod empire_node_state_op_type;
pub mod empire_node_state_table;
pub mod empire_node_state_type;
pub mod empire_notification_desc_table;
pub mod empire_notification_desc_type;
pub mod empire_notification_state_table;
pub mod empire_notification_state_type;
pub mod empire_notification_type_type;
pub mod empire_permission_type;
pub mod empire_player_data_state_op_type;
pub mod empire_player_data_state_table;
pub mod empire_player_data_state_type;
pub mod empire_player_join_reducer;
pub mod empire_player_join_request_type;
pub mod empire_player_leave_reducer;
pub mod empire_player_leave_request_type;
pub mod empire_player_log_state_table;
pub mod empire_player_log_state_type;
pub mod empire_queue_supplies_msg_type;
pub mod empire_rank_desc_table;
pub mod empire_rank_desc_type;
pub mod empire_rank_state_op_type;
pub mod empire_rank_state_table;
pub mod empire_rank_state_type;
pub mod empire_remove_crown_msg_type;
pub mod empire_resupply_node_msg_type;
pub mod empire_set_directive_message_reducer;
pub mod empire_set_directive_message_request_type;
pub mod empire_set_nobility_threshold_reducer;
pub mod empire_set_player_rank_reducer;
pub mod empire_set_player_rank_request_type;
pub mod empire_set_rank_title_reducer;
pub mod empire_set_rank_title_request_type;
pub mod empire_settlement_state_op_type;
pub mod empire_settlement_state_table;
pub mod empire_settlement_state_type;
pub mod empire_siege_add_supplies_msg_type;
pub mod empire_siege_agent_loop_reducer;
pub mod empire_siege_engine_state_table;
pub mod empire_siege_engine_state_type;
pub mod empire_siege_loop_timer_table;
pub mod empire_siege_loop_timer_type;
pub mod empire_start_siege_msg_type;
pub mod empire_state_op_type;
pub mod empire_state_table;
pub mod empire_state_type;
pub mod empire_submit_reducer;
pub mod empire_supplies_desc_table;
pub mod empire_supplies_desc_type;
pub mod empire_territory_desc_table;
pub mod empire_territory_desc_type;
pub mod empire_transfer_emperorship_reducer;
pub mod empire_update_emperor_crown_msg_type;
pub mod empire_update_permissions_reducer;
pub mod empire_update_permissions_request_type;
pub mod enemy_ai_params_desc_table;
pub mod enemy_ai_params_desc_type;
pub mod enemy_desc_table;
pub mod enemy_desc_type;
pub mod enemy_mob_monitor_state_table;
pub mod enemy_mob_monitor_state_type;
pub mod enemy_state_table;
pub mod enemy_state_type;
pub mod enemy_status_type;
pub mod enemy_type_type;
pub mod entity_type_type;
pub mod environment_debuff_desc_table;
pub mod environment_debuff_desc_type;
pub mod environment_resistance_type_type;
pub mod equipment_desc_table;
pub mod equipment_desc_type;
pub mod equipment_slot_type;
pub mod equipment_slot_type_type;
pub mod equipment_state_table;
pub mod equipment_state_type;
pub mod equipment_visual_type_type;
pub mod experience_stack_f_32_type;
pub mod experience_stack_type;
pub mod experience_state_table;
pub mod experience_state_type;
pub mod exploration_chunks_state_table;
pub mod exploration_chunks_state_type;
pub mod extract_outcome_state_table;
pub mod extract_outcome_state_type;
pub mod extraction_recipe_desc_table;
pub mod extraction_recipe_desc_type;
pub mod float_hex_tile_message_type;
pub mod food_desc_table;
pub mod food_desc_type;
pub mod footprint_tile_state_table;
pub mod footprint_tile_state_type;
pub mod footprint_tile_type;
pub mod footprint_type_type;
pub mod force_generate_types_table;
pub mod force_generate_types_type;
pub mod gate_desc_table;
pub mod gate_desc_type;
pub mod global_delete_empire_building_msg_type;
pub mod global_search_state_table;
pub mod global_search_state_type;
pub mod globals_table;
pub mod globals_type;
pub mod grant_hub_item_msg_type;
pub mod granted_hub_item_state_table;
pub mod granted_hub_item_state_type;
pub mod growth_state_table;
pub mod growth_state_type;
pub mod hand_equipment_visual_type;
pub mod health_state_table;
pub mod health_state_type;
pub mod herd_state_table;
pub mod herd_state_type;
pub mod hex_direction_type;
pub mod hexite_exchange_entry_desc_table;
pub mod hexite_exchange_entry_desc_type;
pub mod hub_item_type_type;
pub mod identity_connected_reducer;
pub mod identity_disconnected_reducer;
pub mod identity_role_op_type;
pub mod identity_role_table;
pub mod identity_role_type;
pub mod import_achievement_desc_reducer;
pub mod import_active_buff_state_reducer;
pub mod import_admin_broadcast_reducer;
pub mod import_alert_desc_reducer;
pub mod import_alert_state_reducer;
pub mod import_attack_outcome_state_reducer;
pub mod import_biome_desc_reducer;
pub mod import_buff_desc_reducer;
pub mod import_buff_type_desc_reducer;
pub mod import_building_claim_desc_reducer;
pub mod import_building_desc_reducer;
pub mod import_building_portal_desc_reducer;
pub mod import_building_repairs_desc_reducer;
pub mod import_building_spawn_desc_reducer;
pub mod import_building_state_reducer;
pub mod import_building_type_desc_reducer;
pub mod import_cargo_desc_reducer;
pub mod import_character_stat_desc_reducer;
pub mod import_character_stats_state_reducer;
pub mod import_chat_message_state_reducer;
pub mod import_chest_rarity_desc_reducer;
pub mod import_claim_local_state_reducer;
pub mod import_claim_recruitment_state_reducer;
pub mod import_claim_state_reducer;
pub mod import_claim_tech_desc_reducer;
pub mod import_claim_tech_state_reducer;
pub mod import_claim_tile_cost_reducer;
pub mod import_claim_tile_state_reducer;
pub mod import_climb_requirement_desc_reducer;
pub mod import_clothing_desc_reducer;
pub mod import_collectible_desc_reducer;
pub mod import_combat_action_desc_reducer;
pub mod import_combat_state_reducer;
pub mod import_config_reducer;
pub mod import_construction_recipe_desc_reducer;
pub mod import_crafting_recipe_desc_reducer;
pub mod import_deconstruction_recipe_desc_reducer;
pub mod import_deployable_desc_reducer;
pub mod import_deployable_state_reducer;
pub mod import_dimension_description_state_reducer;
pub mod import_dimension_network_description_state_reducer;
pub mod import_distant_visible_entity_desc_reducer;
pub mod import_dropped_inventory_state_reducer;
pub mod import_elevator_desc_reducer;
pub mod import_emote_desc_reducer;
pub mod import_empire_colors_desc_reducer;
pub mod import_empire_notification_desc_reducer;
pub mod import_empire_rank_desc_reducer;
pub mod import_empire_supplies_desc_reducer;
pub mod import_empire_territory_desc_reducer;
pub mod import_enemy_ai_params_desc_reducer;
pub mod import_enemy_desc_reducer;
pub mod import_enemy_state_reducer;
pub mod import_environment_debuff_desc_reducer;
pub mod import_equipment_desc_reducer;
pub mod import_equipment_state_reducer;
pub mod import_experience_state_reducer;
pub mod import_exploration_chunks_state_reducer;
pub mod import_extraction_recipe_desc_reducer;
pub mod import_food_desc_reducer;
pub mod import_footprint_tile_state_reducer;
pub mod import_gate_desc_reducer;
pub mod import_globals_reducer;
pub mod import_growth_state_reducer;
pub mod import_health_state_reducer;
pub mod import_herd_cache_reducer;
pub mod import_hexite_exchange_entry_desc_reducer;
pub mod import_identity_role_reducer;
pub mod import_interior_collapse_trigger_state_reducer;
pub mod import_interior_instance_desc_reducer;
pub mod import_interior_network_desc_reducer;
pub mod import_interior_portal_connections_desc_reducer;
pub mod import_interior_shape_desc_reducer;
pub mod import_interior_spawn_desc_reducer;
pub mod import_inventory_state_reducer;
pub mod import_item_conversion_recipe_desc_reducer;
pub mod import_item_desc_reducer;
pub mod import_item_list_desc_reducer;
pub mod import_knowledge_achievement_state_reducer;
pub mod import_knowledge_battle_action_state_reducer;
pub mod import_knowledge_building_state_reducer;
pub mod import_knowledge_cargo_state_reducer;
pub mod import_knowledge_construction_state_reducer;
pub mod import_knowledge_craft_state_reducer;
pub mod import_knowledge_deployable_state_reducer;
pub mod import_knowledge_enemy_state_reducer;
pub mod import_knowledge_extract_state_reducer;
pub mod import_knowledge_item_state_reducer;
pub mod import_knowledge_lore_state_reducer;
pub mod import_knowledge_npc_state_reducer;
pub mod import_knowledge_paving_state_reducer;
pub mod import_knowledge_resource_placement_state_reducer;
pub mod import_knowledge_resource_state_reducer;
pub mod import_knowledge_ruins_state_reducer;
pub mod import_knowledge_scroll_desc_reducer;
pub mod import_knowledge_scroll_type_desc_reducer;
pub mod import_knowledge_secondary_state_reducer;
pub mod import_knowledge_stat_modifier_desc_reducer;
pub mod import_knowledge_vault_state_reducer;
pub mod import_location_state_reducer;
pub mod import_loot_chest_desc_reducer;
pub mod import_loot_chest_state_reducer;
pub mod import_loot_rarity_desc_reducer;
pub mod import_loot_table_desc_reducer;
pub mod import_mobile_entity_state_reducer;
pub mod import_mounting_state_reducer;
pub mod import_npc_desc_reducer;
pub mod import_npc_state_reducer;
pub mod import_onboarding_reward_desc_reducer;
pub mod import_onboarding_state_reducer;
pub mod import_parameters_desc_reducer;
pub mod import_pathfinding_desc_reducer;
pub mod import_paved_tile_state_reducer;
pub mod import_paving_tile_desc_reducer;
pub mod import_player_action_desc_reducer;
pub mod import_player_action_state_reducer;
pub mod import_player_prefs_state_reducer;
pub mod import_player_state_reducer;
pub mod import_player_vote_state_reducer;
pub mod import_portal_state_reducer;
pub mod import_private_parameters_desc_reducer;
pub mod import_progressive_action_state_reducer;
pub mod import_project_site_state_reducer;
pub mod import_region_connection_info_reducer;
pub mod import_region_sign_in_parameters_reducer;
pub mod import_rent_state_reducer;
pub mod import_resource_clump_desc_reducer;
pub mod import_resource_count_reducer;
pub mod import_resource_desc_reducer;
pub mod import_resource_growth_recipe_desc_reducer;
pub mod import_resource_placement_recipe_desc_reducer;
pub mod import_resource_state_reducer;
pub mod import_satiation_state_reducer;
pub mod import_secondary_knowledge_desc_reducer;
pub mod import_server_identity_reducer;
pub mod import_signed_in_player_state_reducer;
pub mod import_skill_desc_reducer;
pub mod import_stamina_state_reducer;
pub mod import_target_state_reducer;
pub mod import_targetable_state_reducer;
pub mod import_targeting_matrix_desc_reducer;
pub mod import_teleport_item_desc_reducer;
pub mod import_terraform_recipe_desc_reducer;
pub mod import_terrain_chunk_state_reducer;
pub mod import_tool_desc_reducer;
pub mod import_tool_type_desc_reducer;
pub mod import_trade_order_state_reducer;
pub mod import_trade_session_state_reducer;
pub mod import_traveler_task_desc_reducer;
pub mod import_traveler_trade_order_desc_reducer;
pub mod import_user_moderation_state_reducer;
pub mod import_user_state_reducer;
pub mod import_vault_state_reducer;
pub mod import_wall_desc_reducer;
pub mod import_weapon_desc_reducer;
pub mod import_weapon_type_desc_reducer;
pub mod import_world_region_name_state_reducer;
pub mod import_world_region_state_reducer;
pub mod input_item_stack_type;
pub mod inter_module_message_counter_table;
pub mod inter_module_message_counter_type;
pub mod inter_module_message_table;
pub mod inter_module_message_type;
pub mod inter_module_response_message_counter_table;
pub mod inter_module_response_message_counter_type;
pub mod inter_module_table_updates_type;
pub mod interior_collapse_trigger_state_table;
pub mod interior_collapse_trigger_state_type;
pub mod interior_environment_desc_table;
pub mod interior_environment_desc_type;
pub mod interior_instance_desc_table;
pub mod interior_instance_desc_type;
pub mod interior_network_desc_table;
pub mod interior_network_desc_type;
pub mod interior_portal_connections_desc_table;
pub mod interior_portal_connections_desc_type;
pub mod interior_shape_desc_table;
pub mod interior_shape_desc_type;
pub mod interior_spawn_desc_table;
pub mod interior_spawn_desc_type;
pub mod interior_spawn_type_type;
pub mod inventory_state_table;
pub mod inventory_state_type;
pub mod item_conversion_location_context_type;
pub mod item_conversion_recipe_desc_table;
pub mod item_conversion_recipe_desc_type;
pub mod item_desc_table;
pub mod item_desc_type;
pub mod item_list_desc_table;
pub mod item_list_desc_type;
pub mod item_list_possibility_type;
pub mod item_stack_type;
pub mod item_type_type;
pub mod knowledge_achievement_state_table;
pub mod knowledge_achievement_state_type;
pub mod knowledge_battle_action_state_table;
pub mod knowledge_battle_action_state_type;
pub mod knowledge_building_state_table;
pub mod knowledge_building_state_type;
pub mod knowledge_cargo_state_table;
pub mod knowledge_cargo_state_type;
pub mod knowledge_claim_state_table;
pub mod knowledge_claim_state_type;
pub mod knowledge_construction_state_table;
pub mod knowledge_construction_state_type;
pub mod knowledge_craft_state_table;
pub mod knowledge_craft_state_type;
pub mod knowledge_deployable_state_table;
pub mod knowledge_deployable_state_type;
pub mod knowledge_enemy_state_table;
pub mod knowledge_enemy_state_type;
pub mod knowledge_entity_entry_type;
pub mod knowledge_entry_type;
pub mod knowledge_extract_state_table;
pub mod knowledge_extract_state_type;
pub mod knowledge_item_state_table;
pub mod knowledge_item_state_type;
pub mod knowledge_location_entry_type;
pub mod knowledge_lore_state_table;
pub mod knowledge_lore_state_type;
pub mod knowledge_npc_state_table;
pub mod knowledge_npc_state_type;
pub mod knowledge_paving_state_table;
pub mod knowledge_paving_state_type;
pub mod knowledge_pillar_shaping_state_table;
pub mod knowledge_pillar_shaping_state_type;
pub mod knowledge_resource_placement_state_table;
pub mod knowledge_resource_placement_state_type;
pub mod knowledge_resource_state_table;
pub mod knowledge_resource_state_type;
pub mod knowledge_ruins_state_table;
pub mod knowledge_ruins_state_type;
pub mod knowledge_scroll_desc_table;
pub mod knowledge_scroll_desc_type;
pub mod knowledge_scroll_type_desc_table;
pub mod knowledge_scroll_type_desc_type;
pub mod knowledge_secondary_state_table;
pub mod knowledge_secondary_state_type;
pub mod knowledge_stat_modifier_desc_table;
pub mod knowledge_stat_modifier_desc_type;
pub mod knowledge_state_type;
pub mod knowledge_vault_state_table;
pub mod knowledge_vault_state_type;
pub mod large_hex_tile_message_type;
pub mod level_requirement_type;
pub mod light_source_state_table;
pub mod light_source_state_type;
pub mod load_config_reducer;
pub mod location_state_op_type;
pub mod location_state_table;
pub mod location_state_type;
pub mod log_empire_leaderboard_reducer;
pub mod log_player_with_reducer;
pub mod loot_chest_desc_table;
pub mod loot_chest_desc_type;
pub mod loot_chest_state_table;
pub mod loot_chest_state_type;
pub mod loot_rarity_desc_table;
pub mod loot_rarity_desc_type;
pub mod loot_table_desc_table;
pub mod loot_table_desc_type;
pub mod lost_items_state_table;
pub mod lost_items_state_type;
pub mod message_contents_type;
pub mod mobile_entity_state_table;
pub mod mobile_entity_state_type;
pub mod mounting_state_table;
pub mod mounting_state_type;
pub mod move_validation_params_desc_type;
pub mod move_validation_strike_counter_state_table;
pub mod move_validation_strike_counter_state_type;
pub mod movement_speed_type;
pub mod movement_type_type;
pub mod notification_severity_type;
pub mod npc_desc_table;
pub mod npc_desc_type;
pub mod npc_state_table;
pub mod npc_state_type;
pub mod npc_type_type;
pub mod offset_coordinates_float_type;
pub mod offset_coordinates_small_message_type;
pub mod on_claim_members_changed_msg_type;
pub mod on_deployable_recovered_msg_type;
pub mod on_empire_building_deleted_msg_type;
pub mod on_inter_module_message_processed_reducer;
pub mod on_player_joined_empire_msg_type;
pub mod on_player_left_empire_msg_type;
pub mod on_player_name_set_msg_type;
pub mod on_region_player_created_msg_type;
pub mod onboarding_reward_desc_table;
pub mod onboarding_reward_desc_type;
pub mod onboarding_state_table;
pub mod onboarding_state_type;
pub mod online_timestamp_type;
pub mod parameters_desc_table;
pub mod parameters_desc_type;
pub mod parameters_player_move_desc_table;
pub mod parameters_player_move_desc_type;
pub mod passive_craft_state_table;
pub mod passive_craft_state_type;
pub mod passive_craft_status_type;
pub mod pathfinding_desc_table;
pub mod pathfinding_desc_type;
pub mod pathfinding_traversal_option_type;
pub mod paved_tile_state_table;
pub mod paved_tile_state_type;
pub mod paving_tile_desc_table;
pub mod paving_tile_desc_type;
pub mod permission_group_type;
pub mod permission_state_table;
pub mod permission_state_type;
pub mod permission_type;
pub mod pillar_shaping_desc_table;
pub mod pillar_shaping_desc_type;
pub mod pillar_shaping_state_table;
pub mod pillar_shaping_state_type;
pub mod player_action_desc_table;
pub mod player_action_desc_type;
pub mod player_action_layer_type;
pub mod player_action_result_type;
pub mod player_action_state_table;
pub mod player_action_state_type;
pub mod player_action_type_type;
pub mod player_claim_daily_shards_reducer;
pub mod player_create_msg_type;
pub mod player_create_reducer;
pub mod player_developer_notification_state_table;
pub mod player_developer_notification_state_type;
pub mod player_dismiss_notification_reducer;
pub mod player_housing_desc_table;
pub mod player_housing_desc_type;
pub mod player_housing_state_op_type;
pub mod player_housing_state_table;
pub mod player_housing_state_type;
pub mod player_lowercase_username_state_table;
pub mod player_lowercase_username_state_type;
pub mod player_note_state_table;
pub mod player_note_state_type;
pub mod player_notification_event_reducer_reducer;
pub mod player_notification_event_table;
pub mod player_notification_event_type;
pub mod player_prefs_state_table;
pub mod player_prefs_state_type;
pub mod player_queue_state_table;
pub mod player_queue_state_type;
pub mod player_report_state_op_type;
pub mod player_report_state_table;
pub mod player_report_state_timestamp_table;
pub mod player_report_state_timestamp_type;
pub mod player_report_state_type;
pub mod player_set_name_reducer;
pub mod player_set_name_request_type;
pub mod player_shard_state_table;
pub mod player_shard_state_type;
pub mod player_sign_in_request_type;
pub mod player_skip_queue_msg_type;
pub mod player_state_table;
pub mod player_state_type;
pub mod player_timestamp_state_table;
pub mod player_timestamp_state_type;
pub mod player_username_state_table;
pub mod player_username_state_type;
pub mod player_vote_answer_reducer;
pub mod player_vote_answer_request_type;
pub mod player_vote_answer_type;
pub mod player_vote_conclude_reducer;
pub mod player_vote_conclude_timer_table;
pub mod player_vote_conclude_timer_type;
pub mod player_vote_state_table;
pub mod player_vote_state_type;
pub mod player_vote_type_type;
pub mod pocket_type;
pub mod portal_state_table;
pub mod portal_state_type;
pub mod private_parameters_desc_table;
pub mod private_parameters_desc_type;
pub mod probabilistic_item_stack_type;
pub mod process_inter_module_message_reducer;
pub mod progressive_action_state_table;
pub mod progressive_action_state_type;
pub mod progressive_action_status_type;
pub mod project_site_state_table;
pub mod project_site_state_type;
pub mod rarity_type;
pub mod recover_deployable_msg_type;
pub mod region_connection_info_op_type;
pub mod region_connection_info_table;
pub mod region_connection_info_type;
pub mod region_destroy_siege_engine_msg_type;
pub mod region_population_info_op_type;
pub mod region_population_info_table;
pub mod region_population_info_type;
pub mod region_sign_in_parameters_op_type;
pub mod region_sign_in_parameters_table;
pub mod region_sign_in_parameters_type;
pub mod rent_state_table;
pub mod rent_state_type;
pub mod reserved_name_desc_table;
pub mod reserved_name_desc_type;
pub mod resource_clump_desc_table;
pub mod resource_clump_desc_type;
pub mod resource_count_table;
pub mod resource_count_type;
pub mod resource_desc_table;
pub mod resource_desc_type;
pub mod resource_growth_recipe_desc_table;
pub mod resource_growth_recipe_desc_type;
pub mod resource_health_state_table;
pub mod resource_health_state_type;
pub mod resource_placement_recipe_desc_table;
pub mod resource_placement_recipe_desc_type;
pub mod resource_state_table;
pub mod resource_state_type;
pub mod rez_sick_long_term_state_table;
pub mod rez_sick_long_term_state_type;
pub mod role_type;
pub mod satiation_state_table;
pub mod satiation_state_type;
pub mod secondary_knowledge_desc_table;
pub mod secondary_knowledge_desc_type;
pub mod sell_order_state_table;
pub mod server_identity_table;
pub mod server_identity_type;
pub mod set_role_for_identity_reducer;
pub mod sign_in_reducer;
pub mod sign_player_out_msg_type;
pub mod signed_in_player_state_table;
pub mod signed_in_player_state_type;
pub mod single_resource_to_clump_desc_table;
pub mod single_resource_to_clump_desc_type;
pub mod skill_category_type;
pub mod skill_desc_table;
pub mod skill_desc_type;
pub mod skill_type_type;
pub mod stage_achievement_desc_reducer;
pub mod stage_alert_desc_reducer;
pub mod stage_biome_desc_reducer;
pub mod stage_buff_desc_reducer;
pub mod stage_buff_type_desc_reducer;
pub mod stage_building_claim_desc_reducer;
pub mod stage_building_desc_reducer;
pub mod stage_building_portal_desc_reducer;
pub mod stage_building_repairs_desc_reducer;
pub mod stage_building_spawn_desc_reducer;
pub mod stage_building_type_desc_reducer;
pub mod stage_cargo_desc_reducer;
pub mod stage_character_stat_desc_reducer;
pub mod stage_chest_rarity_desc_reducer;
pub mod stage_claim_tech_desc_reducer;
pub mod stage_claim_tile_cost_reducer;
pub mod stage_climb_requirement_desc_reducer;
pub mod stage_clothing_desc_reducer;
pub mod stage_collectible_desc_reducer;
pub mod stage_combat_action_desc_reducer;
pub mod stage_construction_recipe_desc_reducer;
pub mod stage_crafting_recipe_desc_reducer;
pub mod stage_deconstruction_recipe_desc_reducer;
pub mod stage_deployable_desc_reducer;
pub mod stage_distant_visible_entity_desc_reducer;
pub mod stage_elevator_desc_reducer;
pub mod stage_emote_desc_reducer;
pub mod stage_empire_colors_desc_reducer;
pub mod stage_empire_icon_desc_reducer;
pub mod stage_empire_notification_desc_reducer;
pub mod stage_empire_rank_desc_reducer;
pub mod stage_empire_supplies_desc_reducer;
pub mod stage_empire_territory_desc_reducer;
pub mod stage_enemy_ai_params_desc_reducer;
pub mod stage_enemy_desc_reducer;
pub mod stage_environment_debuff_desc_reducer;
pub mod stage_equipment_desc_reducer;
pub mod stage_extraction_recipe_desc_reducer;
pub mod stage_food_desc_reducer;
pub mod stage_gate_desc_reducer;
pub mod stage_hexite_exchange_entry_desc_reducer;
pub mod stage_interior_environment_desc_reducer;
pub mod stage_interior_instance_desc_reducer;
pub mod stage_interior_network_desc_reducer;
pub mod stage_interior_portal_connections_desc_reducer;
pub mod stage_interior_shape_desc_reducer;
pub mod stage_interior_spawn_desc_reducer;
pub mod stage_item_conversion_recipe_desc_reducer;
pub mod stage_item_desc_reducer;
pub mod stage_item_list_desc_reducer;
pub mod stage_knowledge_scroll_desc_reducer;
pub mod stage_knowledge_scroll_type_desc_reducer;
pub mod stage_knowledge_stat_modifier_desc_reducer;
pub mod stage_loot_chest_desc_reducer;
pub mod stage_loot_rarity_desc_reducer;
pub mod stage_loot_table_desc_reducer;
pub mod stage_npc_desc_reducer;
pub mod stage_onboarding_reward_desc_reducer;
pub mod stage_parameters_desc_reducer;
pub mod stage_pathfinding_desc_reducer;
pub mod stage_paving_tile_desc_reducer;
pub mod stage_pillar_shaping_desc_reducer;
pub mod stage_player_action_desc_reducer;
pub mod stage_player_housing_desc_reducer;
pub mod stage_private_parameters_desc_reducer;
pub mod stage_reserved_name_desc_reducer;
pub mod stage_resource_clump_desc_reducer;
pub mod stage_resource_desc_reducer;
pub mod stage_resource_growth_recipe_desc_reducer;
pub mod stage_resource_placement_recipe_desc_reducer;
pub mod stage_secondary_knowledge_desc_reducer;
pub mod stage_skill_desc_reducer;
pub mod stage_targeting_matrix_desc_reducer;
pub mod stage_teleport_item_desc_reducer;
pub mod stage_terraform_recipe_desc_reducer;
pub mod stage_tool_desc_reducer;
pub mod stage_tool_type_desc_reducer;
pub mod stage_traveler_task_desc_reducer;
pub mod stage_traveler_trade_order_desc_reducer;
pub mod stage_wall_desc_reducer;
pub mod stage_weapon_desc_reducer;
pub mod stage_weapon_type_desc_reducer;
pub mod staged_static_data_table;
pub mod staged_static_data_type;
pub mod stamina_state_table;
pub mod stamina_state_type;
pub mod starving_player_state_table;
pub mod starving_player_state_type;
pub mod static_data_upload_type;
pub mod surface_type_type;
pub mod target_state_table;
pub mod target_state_type;
pub mod targetable_state_table;
pub mod targetable_state_type;
pub mod targeting_matrix_desc_table;
pub mod targeting_matrix_desc_type;
pub mod teleport_item_desc_table;
pub mod teleport_item_desc_type;
pub mod teleport_location_type;
pub mod teleport_location_type_type;
pub mod teleportation_energy_state_table;
pub mod teleportation_energy_state_type;
pub mod terraform_progress_state_table;
pub mod terraform_progress_state_type;
pub mod terraform_recipe_desc_table;
pub mod terraform_recipe_desc_type;
pub mod terrain_cell_type;
pub mod terrain_chunk_state_table;
pub mod terrain_chunk_state_type;
pub mod the_great_place_holder_table_type;
pub mod the_great_placeholder_table_table;
pub mod threat_state_table;
pub mod threat_state_type;
pub mod tool_desc_table;
pub mod tool_desc_type;
pub mod tool_requirement_type;
pub mod tool_type_desc_table;
pub mod tool_type_desc_type;
pub mod toolbar_state_table;
pub mod toolbar_state_type;
pub mod trade_order_state_table;
pub mod trade_order_state_type;
pub mod trade_pocket_type;
pub mod trade_session_state_table;
pub mod trade_session_state_type;
pub mod trade_session_status_type;
pub mod transfer_player_housing_msg_type;
pub mod transfer_player_msg_type;
pub mod traveler_task_desc_table;
pub mod traveler_task_desc_type;
pub mod traveler_task_state_table;
pub mod traveler_task_state_type;
pub mod traveler_trade_order_desc_table;
pub mod traveler_trade_order_desc_type;
pub mod traversal_settings_type;
pub mod unclaimed_collectibles_state_table;
pub mod unclaimed_collectibles_state_type;
pub mod unclaimed_shards_state_table;
pub mod unclaimed_shards_state_type;
pub mod update_role_for_player_reducer;
pub mod update_scheduled_timers_from_static_data_reducer;
pub mod user_authentication_state_op_type;
pub mod user_authentication_state_table;
pub mod user_authentication_state_type;
pub mod user_moderation_clear_all_reducer;
pub mod user_moderation_create_reducer;
pub mod user_moderation_create_user_policy_request_type;
pub mod user_moderation_delete_reducer;
pub mod user_moderation_list_all_reducer;
pub mod user_moderation_policy_type;
pub mod user_moderation_state_op_type;
pub mod user_moderation_state_table;
pub mod user_moderation_state_type;
pub mod user_previous_region_state_table;
pub mod user_previous_region_state_type;
pub mod user_region_state_table;
pub mod user_region_state_type;
pub mod user_state_op_type;
pub mod user_state_table;
pub mod user_state_type;
pub mod user_update_region_msg_type;
pub mod vault_collectible_type;
pub mod vault_state_table;
pub mod vault_state_type;
pub mod vfx_attachment_point_type;
pub mod wall_desc_table;
pub mod wall_desc_type;
pub mod weapon_desc_table;
pub mod weapon_desc_type;
pub mod weapon_type_desc_table;
pub mod weapon_type_desc_type;
pub mod world_region_name_state_table;
pub mod world_region_name_state_type;
pub mod world_region_state_table;
pub mod world_region_state_type;

pub use a_i_debug_state_table::*;
pub use achievement_desc_table::*;
pub use achievement_desc_type::AchievementDesc;
pub use action_cooldown_type::ActionCooldown;
pub use action_state_table::*;
pub use action_state_type::ActionState;
pub use active_buff_state_table::*;
pub use active_buff_state_type::ActiveBuffState;
pub use active_buff_type::ActiveBuff;
pub use admin_broadcast_message_msg_type::AdminBroadcastMessageMsg;
pub use admin_broadcast_msg_reducer::{
    admin_broadcast_msg, set_flags_for_admin_broadcast_msg, AdminBroadcastMsgCallbackId,
};
pub use admin_broadcast_table::*;
pub use admin_broadcast_type::AdminBroadcast;
pub use admin_grant_shards_reducer::{
    admin_grant_shards, set_flags_for_admin_grant_shards, AdminGrantShardsCallbackId,
};
pub use admin_mark_user_report_as_actioned_reducer::{
    admin_mark_user_report_as_actioned, set_flags_for_admin_mark_user_report_as_actioned,
    AdminMarkUserReportAsActionedCallbackId,
};
pub use admin_notify_player_by_identity_reducer::{
    admin_notify_player_by_identity, set_flags_for_admin_notify_player_by_identity,
    AdminNotifyPlayerByIdentityCallbackId,
};
pub use admin_notify_player_reducer::{
    admin_notify_player, set_flags_for_admin_notify_player, AdminNotifyPlayerCallbackId,
};
pub use admin_rename_empire_entity_reducer::{
    admin_rename_empire_entity, set_flags_for_admin_rename_empire_entity,
    AdminRenameEmpireEntityCallbackId,
};
pub use admin_rename_empire_rank_entity_reducer::{
    admin_rename_empire_rank_entity, set_flags_for_admin_rename_empire_rank_entity,
    AdminRenameEmpireRankEntityCallbackId,
};
pub use admin_rename_empire_rank_reducer::{
    admin_rename_empire_rank, set_flags_for_admin_rename_empire_rank,
    AdminRenameEmpireRankCallbackId,
};
pub use admin_rename_empire_reducer::{
    admin_rename_empire, set_flags_for_admin_rename_empire, AdminRenameEmpireCallbackId,
};
pub use admin_rename_player_entity_reducer::{
    admin_rename_player_entity, set_flags_for_admin_rename_player_entity,
    AdminRenamePlayerEntityCallbackId,
};
pub use admin_rename_player_reducer::{
    admin_rename_player, set_flags_for_admin_rename_player, AdminRenamePlayerCallbackId,
};
pub use admin_sign_out_all_reducer::{
    admin_sign_out_all, set_flags_for_admin_sign_out_all, AdminSignOutAllCallbackId,
};
pub use admin_skip_queue_entity_reducer::{
    admin_skip_queue_entity, set_flags_for_admin_skip_queue_entity, AdminSkipQueueEntityCallbackId,
};
pub use admin_skip_queue_identity_reducer::{
    admin_skip_queue_identity, set_flags_for_admin_skip_queue_identity,
    AdminSkipQueueIdentityCallbackId,
};
pub use admin_skip_queue_name_reducer::{
    admin_skip_queue_name, set_flags_for_admin_skip_queue_name, AdminSkipQueueNameCallbackId,
};
pub use admin_update_granted_hub_item_state_reducer::{
    admin_update_granted_hub_item_state, set_flags_for_admin_update_granted_hub_item_state,
    AdminUpdateGrantedHubItemStateCallbackId,
};
pub use admin_update_sign_in_parameters_reducer::{
    admin_update_sign_in_parameters, set_flags_for_admin_update_sign_in_parameters,
    AdminUpdateSignInParametersCallbackId,
};
pub use ai_debug_state_type::AiDebugState;
pub use alert_desc_table::*;
pub use alert_desc_type::AlertDesc;
pub use alert_state_table::*;
pub use alert_state_type::AlertState;
pub use alert_type_type::AlertType;
pub use attached_herds_state_table::*;
pub use attached_herds_state_type::AttachedHerdsState;
pub use attack_outcome_state_table::*;
pub use attack_outcome_state_type::AttackOutcomeState;
pub use auction_listing_state_type::AuctionListingState;
pub use authenticate_reducer::{authenticate, set_flags_for_authenticate, AuthenticateCallbackId};
pub use auto_claim_state_table::*;
pub use auto_claim_state_type::AutoClaimState;
pub use barter_stall_state_table::*;
pub use barter_stall_state_type::BarterStallState;
pub use biome_desc_table::*;
pub use biome_desc_type::BiomeDesc;
pub use biome_type::Biome;
pub use block_identity_reducer::{
    block_identity, set_flags_for_block_identity, BlockIdentityCallbackId,
};
pub use blocked_identity_op_type::BlockedIdentityOp;
pub use blocked_identity_table::*;
pub use blocked_identity_type::BlockedIdentity;
pub use buff_category_type::BuffCategory;
pub use buff_desc_table::*;
pub use buff_desc_type::BuffDesc;
pub use buff_effect_type::BuffEffect;
pub use buff_type_desc_table::*;
pub use buff_type_desc_type::BuffTypeDesc;
pub use building_category_type::BuildingCategory;
pub use building_claim_desc_table::*;
pub use building_claim_desc_type::BuildingClaimDesc;
pub use building_desc_table::*;
pub use building_desc_type::BuildingDesc;
pub use building_function_type::BuildingFunction;
pub use building_function_type_mapping_desc_table::*;
pub use building_function_type_mapping_desc_type::BuildingFunctionTypeMappingDesc;
pub use building_interaction_level_type::BuildingInteractionLevel;
pub use building_nickname_state_op_type::BuildingNicknameStateOp;
pub use building_nickname_state_table::*;
pub use building_nickname_state_type::BuildingNicknameState;
pub use building_portal_desc_table::*;
pub use building_portal_desc_type::BuildingPortalDesc;
pub use building_repairs_desc_table::*;
pub use building_repairs_desc_type::BuildingRepairsDesc;
pub use building_requirement_type::BuildingRequirement;
pub use building_spawn_desc_table::*;
pub use building_spawn_desc_type::BuildingSpawnDesc;
pub use building_spawn_type_type::BuildingSpawnType;
pub use building_state_op_type::BuildingStateOp;
pub use building_state_table::*;
pub use building_state_type::BuildingState;
pub use building_type_desc_table::*;
pub use building_type_desc_type::BuildingTypeDesc;
pub use buy_order_state_table::*;
pub use capped_level_requirement_type::CappedLevelRequirement;
pub use cargo_desc_table::*;
pub use cargo_desc_type::CargoDesc;
pub use character_stat_desc_table::*;
pub use character_stat_desc_type::CharacterStatDesc;
pub use character_stat_type_type::CharacterStatType;
pub use character_stats_state_table::*;
pub use character_stats_state_type::CharacterStatsState;
pub use chat_channel_type::ChatChannel;
pub use chat_message_state_table::*;
pub use chat_message_state_type::ChatMessageState;
pub use cheat_empire_siege_add_supplies_reducer::{
    cheat_empire_siege_add_supplies, set_flags_for_cheat_empire_siege_add_supplies,
    CheatEmpireSiegeAddSuppliesCallbackId,
};
pub use cheat_empire_siege_cancel_reducer::{
    cheat_empire_siege_cancel, set_flags_for_cheat_empire_siege_cancel,
    CheatEmpireSiegeCancelCallbackId,
};
pub use cheat_player_set_name_reducer::{
    cheat_player_set_name, set_flags_for_cheat_player_set_name, CheatPlayerSetNameCallbackId,
};
pub use cheat_shards_grant_reducer::{
    cheat_shards_grant, set_flags_for_cheat_shards_grant, CheatShardsGrantCallbackId,
};
pub use cheat_shards_grant_request_type::CheatShardsGrantRequest;
pub use chest_loot_rarity_type::ChestLootRarity;
pub use chest_rarity_desc_table::*;
pub use chest_rarity_desc_type::ChestRarityDesc;
pub use chunk_coordinates_message_type::ChunkCoordinatesMessage;
pub use claim_create_empire_settlement_msg_type::ClaimCreateEmpireSettlementMsg;
pub use claim_local_state_table::*;
pub use claim_local_state_type::ClaimLocalState;
pub use claim_member_state_op_type::ClaimMemberStateOp;
pub use claim_member_state_table::*;
pub use claim_member_state_type::ClaimMemberState;
pub use claim_permission_type::ClaimPermission;
pub use claim_recruitment_state_table::*;
pub use claim_recruitment_state_type::ClaimRecruitmentState;
pub use claim_state_op_type::ClaimStateOp;
pub use claim_state_table::*;
pub use claim_state_type::ClaimState;
pub use claim_tech_desc_table::*;
pub use claim_tech_desc_type::ClaimTechDesc;
pub use claim_tech_state_table::*;
pub use claim_tech_state_type::ClaimTechState;
pub use claim_tile_cost_table::*;
pub use claim_tile_cost_type::ClaimTileCost;
pub use claim_tile_state_table::*;
pub use claim_tile_state_type::ClaimTileState;
pub use claim_type_type::ClaimType;
pub use clear_staged_static_data_reducer::{
    clear_staged_static_data, set_flags_for_clear_staged_static_data,
    ClearStagedStaticDataCallbackId,
};
pub use climb_requirement_desc_table::*;
pub use climb_requirement_desc_type::ClimbRequirementDesc;
pub use closed_listing_state_table::*;
pub use closed_listing_state_type::ClosedListingState;
pub use clothing_desc_table::*;
pub use clothing_desc_type::ClothingDesc;
pub use clothing_mask_type::ClothingMask;
pub use clothing_visual_type::ClothingVisual;
pub use collectible_desc_table::*;
pub use collectible_desc_type::CollectibleDesc;
pub use collectible_type_type::CollectibleType;
pub use combat_action_desc_table::*;
pub use combat_action_desc_type::CombatActionDesc;
pub use combat_state_table::*;
pub use combat_state_type::CombatState;
pub use commit_staged_static_data_reducer::{
    commit_staged_static_data, set_flags_for_commit_staged_static_data,
    CommitStagedStaticDataCallbackId,
};
pub use config_table::*;
pub use config_type::Config;
pub use construction_recipe_desc_table::*;
pub use construction_recipe_desc_type::ConstructionRecipeDesc;
pub use crafting_recipe_desc_table::*;
pub use crafting_recipe_desc_type::CraftingRecipeDesc;
pub use csv_stat_entry_type::CsvStatEntry;
pub use current_version_reducer::{
    current_version, set_flags_for_current_version, CurrentVersionCallbackId,
};
pub use deconstruction_recipe_desc_table::*;
pub use deconstruction_recipe_desc_type::DeconstructionRecipeDesc;
pub use delete_empire_msg_type::DeleteEmpireMsg;
pub use deployable_collectible_state_table::*;
pub use deployable_collectible_state_type::DeployableCollectibleState;
pub use deployable_desc_table::*;
pub use deployable_desc_type::DeployableDesc;
pub use deployable_state_table::*;
pub use deployable_state_type::DeployableState;
pub use deployable_type_type::DeployableType;
pub use dimension_description_state_table::*;
pub use dimension_description_state_type::DimensionDescriptionState;
pub use dimension_network_state_table::*;
pub use dimension_network_state_type::DimensionNetworkState;
pub use dimension_type_type::DimensionType;
pub use distant_visible_entity_desc_table::*;
pub use distant_visible_entity_desc_type::DistantVisibleEntityDesc;
pub use distant_visible_entity_table::*;
pub use distant_visible_entity_type::DistantVisibleEntity;
pub use dropped_inventory_state_table::*;
pub use dropped_inventory_state_type::DroppedInventoryState;
pub use duel_state_table::*;
pub use duel_state_type::DuelState;
pub use elevator_desc_table::*;
pub use elevator_desc_type::ElevatorDesc;
pub use emote_desc_table::*;
pub use emote_desc_type::EmoteDesc;
pub use empire_change_emblem_reducer::{
    empire_change_emblem, set_flags_for_empire_change_emblem, EmpireChangeEmblemCallbackId,
};
pub use empire_change_emblem_request_type::EmpireChangeEmblemRequest;
pub use empire_chunk_state_op_type::EmpireChunkStateOp;
pub use empire_chunk_state_table::*;
pub use empire_chunk_state_type::EmpireChunkState;
pub use empire_claim_join_msg_type::EmpireClaimJoinMsg;
pub use empire_collect_hexite_capsule_msg_type::EmpireCollectHexiteCapsuleMsg;
pub use empire_color_desc_table::*;
pub use empire_color_desc_type::EmpireColorDesc;
pub use empire_craft_supplies_reducer::{
    empire_craft_supplies, set_flags_for_empire_craft_supplies, EmpireCraftSuppliesCallbackId,
};
pub use empire_craft_supplies_scheduled_reducer::{
    empire_craft_supplies_scheduled, set_flags_for_empire_craft_supplies_scheduled,
    EmpireCraftSuppliesScheduledCallbackId,
};
pub use empire_craft_supplies_timer_table::*;
pub use empire_craft_supplies_timer_type::EmpireCraftSuppliesTimer;
pub use empire_create_building_msg_type::EmpireCreateBuildingMsg;
pub use empire_decay_agent_loop_reducer::{
    empire_decay_agent_loop, set_flags_for_empire_decay_agent_loop, EmpireDecayAgentLoopCallbackId,
};
pub use empire_decay_loop_timer_table::*;
pub use empire_decay_loop_timer_type::EmpireDecayLoopTimer;
pub use empire_directive_state_table::*;
pub use empire_directive_state_type::EmpireDirectiveState;
pub use empire_dismantle_reducer::{
    empire_dismantle, set_flags_for_empire_dismantle, EmpireDismantleCallbackId,
};
pub use empire_dismantle_request_type::EmpireDismantleRequest;
pub use empire_donate_shards_reducer::{
    empire_donate_shards, set_flags_for_empire_donate_shards, EmpireDonateShardsCallbackId,
};
pub use empire_donate_shards_request_type::EmpireDonateShardsRequest;
pub use empire_emblem_state_table::*;
pub use empire_emblem_state_type::EmpireEmblemState;
pub use empire_expansion_state_op_type::EmpireExpansionStateOp;
pub use empire_expansion_state_table::*;
pub use empire_expansion_state_type::EmpireExpansionState;
pub use empire_form_reducer::{empire_form, set_flags_for_empire_form, EmpireFormCallbackId};
pub use empire_form_request_type::EmpireFormRequest;
pub use empire_foundry_state_table::*;
pub use empire_foundry_state_type::EmpireFoundryState;
pub use empire_icon_desc_table::*;
pub use empire_icon_desc_type::EmpireIconDesc;
pub use empire_leave_reducer::{empire_leave, set_flags_for_empire_leave, EmpireLeaveCallbackId};
pub use empire_leave_request_type::EmpireLeaveRequest;
pub use empire_log_state_table::*;
pub use empire_log_state_type::EmpireLogState;
pub use empire_mark_for_expansion_reducer::{
    empire_mark_for_expansion, set_flags_for_empire_mark_for_expansion,
    EmpireMarkForExpansionCallbackId,
};
pub use empire_mark_for_expansion_request_type::EmpireMarkForExpansionRequest;
pub use empire_mark_for_siege_reducer::{
    empire_mark_for_siege, set_flags_for_empire_mark_for_siege, EmpireMarkForSiegeCallbackId,
};
pub use empire_mark_for_siege_request_type::EmpireMarkForSiegeRequest;
pub use empire_node_siege_state_op_type::EmpireNodeSiegeStateOp;
pub use empire_node_siege_state_table::*;
pub use empire_node_siege_state_type::EmpireNodeSiegeState;
pub use empire_node_state_op_type::EmpireNodeStateOp;
pub use empire_node_state_table::*;
pub use empire_node_state_type::EmpireNodeState;
pub use empire_notification_desc_table::*;
pub use empire_notification_desc_type::EmpireNotificationDesc;
pub use empire_notification_state_table::*;
pub use empire_notification_state_type::EmpireNotificationState;
pub use empire_notification_type_type::EmpireNotificationType;
pub use empire_permission_type::EmpirePermission;
pub use empire_player_data_state_op_type::EmpirePlayerDataStateOp;
pub use empire_player_data_state_table::*;
pub use empire_player_data_state_type::EmpirePlayerDataState;
pub use empire_player_join_reducer::{
    empire_player_join, set_flags_for_empire_player_join, EmpirePlayerJoinCallbackId,
};
pub use empire_player_join_request_type::EmpirePlayerJoinRequest;
pub use empire_player_leave_reducer::{
    empire_player_leave, set_flags_for_empire_player_leave, EmpirePlayerLeaveCallbackId,
};
pub use empire_player_leave_request_type::EmpirePlayerLeaveRequest;
pub use empire_player_log_state_table::*;
pub use empire_player_log_state_type::EmpirePlayerLogState;
pub use empire_queue_supplies_msg_type::EmpireQueueSuppliesMsg;
pub use empire_rank_desc_table::*;
pub use empire_rank_desc_type::EmpireRankDesc;
pub use empire_rank_state_op_type::EmpireRankStateOp;
pub use empire_rank_state_table::*;
pub use empire_rank_state_type::EmpireRankState;
pub use empire_remove_crown_msg_type::EmpireRemoveCrownMsg;
pub use empire_resupply_node_msg_type::EmpireResupplyNodeMsg;
pub use empire_set_directive_message_reducer::{
    empire_set_directive_message, set_flags_for_empire_set_directive_message,
    EmpireSetDirectiveMessageCallbackId,
};
pub use empire_set_directive_message_request_type::EmpireSetDirectiveMessageRequest;
pub use empire_set_nobility_threshold_reducer::{
    empire_set_nobility_threshold, set_flags_for_empire_set_nobility_threshold,
    EmpireSetNobilityThresholdCallbackId,
};
pub use empire_set_player_rank_reducer::{
    empire_set_player_rank, set_flags_for_empire_set_player_rank, EmpireSetPlayerRankCallbackId,
};
pub use empire_set_player_rank_request_type::EmpireSetPlayerRankRequest;
pub use empire_set_rank_title_reducer::{
    empire_set_rank_title, set_flags_for_empire_set_rank_title, EmpireSetRankTitleCallbackId,
};
pub use empire_set_rank_title_request_type::EmpireSetRankTitleRequest;
pub use empire_settlement_state_op_type::EmpireSettlementStateOp;
pub use empire_settlement_state_table::*;
pub use empire_settlement_state_type::EmpireSettlementState;
pub use empire_siege_add_supplies_msg_type::EmpireSiegeAddSuppliesMsg;
pub use empire_siege_agent_loop_reducer::{
    empire_siege_agent_loop, set_flags_for_empire_siege_agent_loop, EmpireSiegeAgentLoopCallbackId,
};
pub use empire_siege_engine_state_table::*;
pub use empire_siege_engine_state_type::EmpireSiegeEngineState;
pub use empire_siege_loop_timer_table::*;
pub use empire_siege_loop_timer_type::EmpireSiegeLoopTimer;
pub use empire_start_siege_msg_type::EmpireStartSiegeMsg;
pub use empire_state_op_type::EmpireStateOp;
pub use empire_state_table::*;
pub use empire_state_type::EmpireState;
pub use empire_submit_reducer::{
    empire_submit, set_flags_for_empire_submit, EmpireSubmitCallbackId,
};
pub use empire_supplies_desc_table::*;
pub use empire_supplies_desc_type::EmpireSuppliesDesc;
pub use empire_territory_desc_table::*;
pub use empire_territory_desc_type::EmpireTerritoryDesc;
pub use empire_transfer_emperorship_reducer::{
    empire_transfer_emperorship, set_flags_for_empire_transfer_emperorship,
    EmpireTransferEmperorshipCallbackId,
};
pub use empire_update_emperor_crown_msg_type::EmpireUpdateEmperorCrownMsg;
pub use empire_update_permissions_reducer::{
    empire_update_permissions, set_flags_for_empire_update_permissions,
    EmpireUpdatePermissionsCallbackId,
};
pub use empire_update_permissions_request_type::EmpireUpdatePermissionsRequest;
pub use enemy_ai_params_desc_table::*;
pub use enemy_ai_params_desc_type::EnemyAiParamsDesc;
pub use enemy_desc_table::*;
pub use enemy_desc_type::EnemyDesc;
pub use enemy_mob_monitor_state_table::*;
pub use enemy_mob_monitor_state_type::EnemyMobMonitorState;
pub use enemy_state_table::*;
pub use enemy_state_type::EnemyState;
pub use enemy_status_type::EnemyStatus;
pub use enemy_type_type::EnemyType;
pub use entity_type_type::EntityType;
pub use environment_debuff_desc_table::*;
pub use environment_debuff_desc_type::EnvironmentDebuffDesc;
pub use environment_resistance_type_type::EnvironmentResistanceType;
pub use equipment_desc_table::*;
pub use equipment_desc_type::EquipmentDesc;
pub use equipment_slot_type::EquipmentSlot;
pub use equipment_slot_type_type::EquipmentSlotType;
pub use equipment_state_table::*;
pub use equipment_state_type::EquipmentState;
pub use equipment_visual_type_type::EquipmentVisualType;
pub use experience_stack_f_32_type::ExperienceStackF32;
pub use experience_stack_type::ExperienceStack;
pub use experience_state_table::*;
pub use experience_state_type::ExperienceState;
pub use exploration_chunks_state_table::*;
pub use exploration_chunks_state_type::ExplorationChunksState;
pub use extract_outcome_state_table::*;
pub use extract_outcome_state_type::ExtractOutcomeState;
pub use extraction_recipe_desc_table::*;
pub use extraction_recipe_desc_type::ExtractionRecipeDesc;
pub use float_hex_tile_message_type::FloatHexTileMessage;
pub use food_desc_table::*;
pub use food_desc_type::FoodDesc;
pub use footprint_tile_state_table::*;
pub use footprint_tile_state_type::FootprintTileState;
pub use footprint_tile_type::FootprintTile;
pub use footprint_type_type::FootprintType;
pub use force_generate_types_table::*;
pub use force_generate_types_type::ForceGenerateTypes;
pub use gate_desc_table::*;
pub use gate_desc_type::GateDesc;
pub use global_delete_empire_building_msg_type::GlobalDeleteEmpireBuildingMsg;
pub use global_search_state_table::*;
pub use global_search_state_type::GlobalSearchState;
pub use globals_table::*;
pub use globals_type::Globals;
pub use grant_hub_item_msg_type::GrantHubItemMsg;
pub use granted_hub_item_state_table::*;
pub use granted_hub_item_state_type::GrantedHubItemState;
pub use growth_state_table::*;
pub use growth_state_type::GrowthState;
pub use hand_equipment_visual_type::HandEquipmentVisual;
pub use health_state_table::*;
pub use health_state_type::HealthState;
pub use herd_state_table::*;
pub use herd_state_type::HerdState;
pub use hex_direction_type::HexDirection;
pub use hexite_exchange_entry_desc_table::*;
pub use hexite_exchange_entry_desc_type::HexiteExchangeEntryDesc;
pub use hub_item_type_type::HubItemType;
pub use identity_connected_reducer::{
    identity_connected, set_flags_for_identity_connected, IdentityConnectedCallbackId,
};
pub use identity_disconnected_reducer::{
    identity_disconnected, set_flags_for_identity_disconnected, IdentityDisconnectedCallbackId,
};
pub use identity_role_op_type::IdentityRoleOp;
pub use identity_role_table::*;
pub use identity_role_type::IdentityRole;
pub use import_achievement_desc_reducer::{
    import_achievement_desc, set_flags_for_import_achievement_desc, ImportAchievementDescCallbackId,
};
pub use import_active_buff_state_reducer::{
    import_active_buff_state, set_flags_for_import_active_buff_state,
    ImportActiveBuffStateCallbackId,
};
pub use import_admin_broadcast_reducer::{
    import_admin_broadcast, set_flags_for_import_admin_broadcast, ImportAdminBroadcastCallbackId,
};
pub use import_alert_desc_reducer::{
    import_alert_desc, set_flags_for_import_alert_desc, ImportAlertDescCallbackId,
};
pub use import_alert_state_reducer::{
    import_alert_state, set_flags_for_import_alert_state, ImportAlertStateCallbackId,
};
pub use import_attack_outcome_state_reducer::{
    import_attack_outcome_state, set_flags_for_import_attack_outcome_state,
    ImportAttackOutcomeStateCallbackId,
};
pub use import_biome_desc_reducer::{
    import_biome_desc, set_flags_for_import_biome_desc, ImportBiomeDescCallbackId,
};
pub use import_buff_desc_reducer::{
    import_buff_desc, set_flags_for_import_buff_desc, ImportBuffDescCallbackId,
};
pub use import_buff_type_desc_reducer::{
    import_buff_type_desc, set_flags_for_import_buff_type_desc, ImportBuffTypeDescCallbackId,
};
pub use import_building_claim_desc_reducer::{
    import_building_claim_desc, set_flags_for_import_building_claim_desc,
    ImportBuildingClaimDescCallbackId,
};
pub use import_building_desc_reducer::{
    import_building_desc, set_flags_for_import_building_desc, ImportBuildingDescCallbackId,
};
pub use import_building_portal_desc_reducer::{
    import_building_portal_desc, set_flags_for_import_building_portal_desc,
    ImportBuildingPortalDescCallbackId,
};
pub use import_building_repairs_desc_reducer::{
    import_building_repairs_desc, set_flags_for_import_building_repairs_desc,
    ImportBuildingRepairsDescCallbackId,
};
pub use import_building_spawn_desc_reducer::{
    import_building_spawn_desc, set_flags_for_import_building_spawn_desc,
    ImportBuildingSpawnDescCallbackId,
};
pub use import_building_state_reducer::{
    import_building_state, set_flags_for_import_building_state, ImportBuildingStateCallbackId,
};
pub use import_building_type_desc_reducer::{
    import_building_type_desc, set_flags_for_import_building_type_desc,
    ImportBuildingTypeDescCallbackId,
};
pub use import_cargo_desc_reducer::{
    import_cargo_desc, set_flags_for_import_cargo_desc, ImportCargoDescCallbackId,
};
pub use import_character_stat_desc_reducer::{
    import_character_stat_desc, set_flags_for_import_character_stat_desc,
    ImportCharacterStatDescCallbackId,
};
pub use import_character_stats_state_reducer::{
    import_character_stats_state, set_flags_for_import_character_stats_state,
    ImportCharacterStatsStateCallbackId,
};
pub use import_chat_message_state_reducer::{
    import_chat_message_state, set_flags_for_import_chat_message_state,
    ImportChatMessageStateCallbackId,
};
pub use import_chest_rarity_desc_reducer::{
    import_chest_rarity_desc, set_flags_for_import_chest_rarity_desc,
    ImportChestRarityDescCallbackId,
};
pub use import_claim_local_state_reducer::{
    import_claim_local_state, set_flags_for_import_claim_local_state,
    ImportClaimLocalStateCallbackId,
};
pub use import_claim_recruitment_state_reducer::{
    import_claim_recruitment_state, set_flags_for_import_claim_recruitment_state,
    ImportClaimRecruitmentStateCallbackId,
};
pub use import_claim_state_reducer::{
    import_claim_state, set_flags_for_import_claim_state, ImportClaimStateCallbackId,
};
pub use import_claim_tech_desc_reducer::{
    import_claim_tech_desc, set_flags_for_import_claim_tech_desc, ImportClaimTechDescCallbackId,
};
pub use import_claim_tech_state_reducer::{
    import_claim_tech_state, set_flags_for_import_claim_tech_state, ImportClaimTechStateCallbackId,
};
pub use import_claim_tile_cost_reducer::{
    import_claim_tile_cost, set_flags_for_import_claim_tile_cost, ImportClaimTileCostCallbackId,
};
pub use import_claim_tile_state_reducer::{
    import_claim_tile_state, set_flags_for_import_claim_tile_state, ImportClaimTileStateCallbackId,
};
pub use import_climb_requirement_desc_reducer::{
    import_climb_requirement_desc, set_flags_for_import_climb_requirement_desc,
    ImportClimbRequirementDescCallbackId,
};
pub use import_clothing_desc_reducer::{
    import_clothing_desc, set_flags_for_import_clothing_desc, ImportClothingDescCallbackId,
};
pub use import_collectible_desc_reducer::{
    import_collectible_desc, set_flags_for_import_collectible_desc, ImportCollectibleDescCallbackId,
};
pub use import_combat_action_desc_reducer::{
    import_combat_action_desc, set_flags_for_import_combat_action_desc,
    ImportCombatActionDescCallbackId,
};
pub use import_combat_state_reducer::{
    import_combat_state, set_flags_for_import_combat_state, ImportCombatStateCallbackId,
};
pub use import_config_reducer::{
    import_config, set_flags_for_import_config, ImportConfigCallbackId,
};
pub use import_construction_recipe_desc_reducer::{
    import_construction_recipe_desc, set_flags_for_import_construction_recipe_desc,
    ImportConstructionRecipeDescCallbackId,
};
pub use import_crafting_recipe_desc_reducer::{
    import_crafting_recipe_desc, set_flags_for_import_crafting_recipe_desc,
    ImportCraftingRecipeDescCallbackId,
};
pub use import_deconstruction_recipe_desc_reducer::{
    import_deconstruction_recipe_desc, set_flags_for_import_deconstruction_recipe_desc,
    ImportDeconstructionRecipeDescCallbackId,
};
pub use import_deployable_desc_reducer::{
    import_deployable_desc, set_flags_for_import_deployable_desc, ImportDeployableDescCallbackId,
};
pub use import_deployable_state_reducer::{
    import_deployable_state, set_flags_for_import_deployable_state, ImportDeployableStateCallbackId,
};
pub use import_dimension_description_state_reducer::{
    import_dimension_description_state, set_flags_for_import_dimension_description_state,
    ImportDimensionDescriptionStateCallbackId,
};
pub use import_dimension_network_description_state_reducer::{
    import_dimension_network_description_state,
    set_flags_for_import_dimension_network_description_state,
    ImportDimensionNetworkDescriptionStateCallbackId,
};
pub use import_distant_visible_entity_desc_reducer::{
    import_distant_visible_entity_desc, set_flags_for_import_distant_visible_entity_desc,
    ImportDistantVisibleEntityDescCallbackId,
};
pub use import_dropped_inventory_state_reducer::{
    import_dropped_inventory_state, set_flags_for_import_dropped_inventory_state,
    ImportDroppedInventoryStateCallbackId,
};
pub use import_elevator_desc_reducer::{
    import_elevator_desc, set_flags_for_import_elevator_desc, ImportElevatorDescCallbackId,
};
pub use import_emote_desc_reducer::{
    import_emote_desc, set_flags_for_import_emote_desc, ImportEmoteDescCallbackId,
};
pub use import_empire_colors_desc_reducer::{
    import_empire_colors_desc, set_flags_for_import_empire_colors_desc,
    ImportEmpireColorsDescCallbackId,
};
pub use import_empire_notification_desc_reducer::{
    import_empire_notification_desc, set_flags_for_import_empire_notification_desc,
    ImportEmpireNotificationDescCallbackId,
};
pub use import_empire_rank_desc_reducer::{
    import_empire_rank_desc, set_flags_for_import_empire_rank_desc, ImportEmpireRankDescCallbackId,
};
pub use import_empire_supplies_desc_reducer::{
    import_empire_supplies_desc, set_flags_for_import_empire_supplies_desc,
    ImportEmpireSuppliesDescCallbackId,
};
pub use import_empire_territory_desc_reducer::{
    import_empire_territory_desc, set_flags_for_import_empire_territory_desc,
    ImportEmpireTerritoryDescCallbackId,
};
pub use import_enemy_ai_params_desc_reducer::{
    import_enemy_ai_params_desc, set_flags_for_import_enemy_ai_params_desc,
    ImportEnemyAiParamsDescCallbackId,
};
pub use import_enemy_desc_reducer::{
    import_enemy_desc, set_flags_for_import_enemy_desc, ImportEnemyDescCallbackId,
};
pub use import_enemy_state_reducer::{
    import_enemy_state, set_flags_for_import_enemy_state, ImportEnemyStateCallbackId,
};
pub use import_environment_debuff_desc_reducer::{
    import_environment_debuff_desc, set_flags_for_import_environment_debuff_desc,
    ImportEnvironmentDebuffDescCallbackId,
};
pub use import_equipment_desc_reducer::{
    import_equipment_desc, set_flags_for_import_equipment_desc, ImportEquipmentDescCallbackId,
};
pub use import_equipment_state_reducer::{
    import_equipment_state, set_flags_for_import_equipment_state, ImportEquipmentStateCallbackId,
};
pub use import_experience_state_reducer::{
    import_experience_state, set_flags_for_import_experience_state, ImportExperienceStateCallbackId,
};
pub use import_exploration_chunks_state_reducer::{
    import_exploration_chunks_state, set_flags_for_import_exploration_chunks_state,
    ImportExplorationChunksStateCallbackId,
};
pub use import_extraction_recipe_desc_reducer::{
    import_extraction_recipe_desc, set_flags_for_import_extraction_recipe_desc,
    ImportExtractionRecipeDescCallbackId,
};
pub use import_food_desc_reducer::{
    import_food_desc, set_flags_for_import_food_desc, ImportFoodDescCallbackId,
};
pub use import_footprint_tile_state_reducer::{
    import_footprint_tile_state, set_flags_for_import_footprint_tile_state,
    ImportFootprintTileStateCallbackId,
};
pub use import_gate_desc_reducer::{
    import_gate_desc, set_flags_for_import_gate_desc, ImportGateDescCallbackId,
};
pub use import_globals_reducer::{
    import_globals, set_flags_for_import_globals, ImportGlobalsCallbackId,
};
pub use import_growth_state_reducer::{
    import_growth_state, set_flags_for_import_growth_state, ImportGrowthStateCallbackId,
};
pub use import_health_state_reducer::{
    import_health_state, set_flags_for_import_health_state, ImportHealthStateCallbackId,
};
pub use import_herd_cache_reducer::{
    import_herd_cache, set_flags_for_import_herd_cache, ImportHerdCacheCallbackId,
};
pub use import_hexite_exchange_entry_desc_reducer::{
    import_hexite_exchange_entry_desc, set_flags_for_import_hexite_exchange_entry_desc,
    ImportHexiteExchangeEntryDescCallbackId,
};
pub use import_identity_role_reducer::{
    import_identity_role, set_flags_for_import_identity_role, ImportIdentityRoleCallbackId,
};
pub use import_interior_collapse_trigger_state_reducer::{
    import_interior_collapse_trigger_state, set_flags_for_import_interior_collapse_trigger_state,
    ImportInteriorCollapseTriggerStateCallbackId,
};
pub use import_interior_instance_desc_reducer::{
    import_interior_instance_desc, set_flags_for_import_interior_instance_desc,
    ImportInteriorInstanceDescCallbackId,
};
pub use import_interior_network_desc_reducer::{
    import_interior_network_desc, set_flags_for_import_interior_network_desc,
    ImportInteriorNetworkDescCallbackId,
};
pub use import_interior_portal_connections_desc_reducer::{
    import_interior_portal_connections_desc, set_flags_for_import_interior_portal_connections_desc,
    ImportInteriorPortalConnectionsDescCallbackId,
};
pub use import_interior_shape_desc_reducer::{
    import_interior_shape_desc, set_flags_for_import_interior_shape_desc,
    ImportInteriorShapeDescCallbackId,
};
pub use import_interior_spawn_desc_reducer::{
    import_interior_spawn_desc, set_flags_for_import_interior_spawn_desc,
    ImportInteriorSpawnDescCallbackId,
};
pub use import_inventory_state_reducer::{
    import_inventory_state, set_flags_for_import_inventory_state, ImportInventoryStateCallbackId,
};
pub use import_item_conversion_recipe_desc_reducer::{
    import_item_conversion_recipe_desc, set_flags_for_import_item_conversion_recipe_desc,
    ImportItemConversionRecipeDescCallbackId,
};
pub use import_item_desc_reducer::{
    import_item_desc, set_flags_for_import_item_desc, ImportItemDescCallbackId,
};
pub use import_item_list_desc_reducer::{
    import_item_list_desc, set_flags_for_import_item_list_desc, ImportItemListDescCallbackId,
};
pub use import_knowledge_achievement_state_reducer::{
    import_knowledge_achievement_state, set_flags_for_import_knowledge_achievement_state,
    ImportKnowledgeAchievementStateCallbackId,
};
pub use import_knowledge_battle_action_state_reducer::{
    import_knowledge_battle_action_state, set_flags_for_import_knowledge_battle_action_state,
    ImportKnowledgeBattleActionStateCallbackId,
};
pub use import_knowledge_building_state_reducer::{
    import_knowledge_building_state, set_flags_for_import_knowledge_building_state,
    ImportKnowledgeBuildingStateCallbackId,
};
pub use import_knowledge_cargo_state_reducer::{
    import_knowledge_cargo_state, set_flags_for_import_knowledge_cargo_state,
    ImportKnowledgeCargoStateCallbackId,
};
pub use import_knowledge_construction_state_reducer::{
    import_knowledge_construction_state, set_flags_for_import_knowledge_construction_state,
    ImportKnowledgeConstructionStateCallbackId,
};
pub use import_knowledge_craft_state_reducer::{
    import_knowledge_craft_state, set_flags_for_import_knowledge_craft_state,
    ImportKnowledgeCraftStateCallbackId,
};
pub use import_knowledge_deployable_state_reducer::{
    import_knowledge_deployable_state, set_flags_for_import_knowledge_deployable_state,
    ImportKnowledgeDeployableStateCallbackId,
};
pub use import_knowledge_enemy_state_reducer::{
    import_knowledge_enemy_state, set_flags_for_import_knowledge_enemy_state,
    ImportKnowledgeEnemyStateCallbackId,
};
pub use import_knowledge_extract_state_reducer::{
    import_knowledge_extract_state, set_flags_for_import_knowledge_extract_state,
    ImportKnowledgeExtractStateCallbackId,
};
pub use import_knowledge_item_state_reducer::{
    import_knowledge_item_state, set_flags_for_import_knowledge_item_state,
    ImportKnowledgeItemStateCallbackId,
};
pub use import_knowledge_lore_state_reducer::{
    import_knowledge_lore_state, set_flags_for_import_knowledge_lore_state,
    ImportKnowledgeLoreStateCallbackId,
};
pub use import_knowledge_npc_state_reducer::{
    import_knowledge_npc_state, set_flags_for_import_knowledge_npc_state,
    ImportKnowledgeNpcStateCallbackId,
};
pub use import_knowledge_paving_state_reducer::{
    import_knowledge_paving_state, set_flags_for_import_knowledge_paving_state,
    ImportKnowledgePavingStateCallbackId,
};
pub use import_knowledge_resource_placement_state_reducer::{
    import_knowledge_resource_placement_state,
    set_flags_for_import_knowledge_resource_placement_state,
    ImportKnowledgeResourcePlacementStateCallbackId,
};
pub use import_knowledge_resource_state_reducer::{
    import_knowledge_resource_state, set_flags_for_import_knowledge_resource_state,
    ImportKnowledgeResourceStateCallbackId,
};
pub use import_knowledge_ruins_state_reducer::{
    import_knowledge_ruins_state, set_flags_for_import_knowledge_ruins_state,
    ImportKnowledgeRuinsStateCallbackId,
};
pub use import_knowledge_scroll_desc_reducer::{
    import_knowledge_scroll_desc, set_flags_for_import_knowledge_scroll_desc,
    ImportKnowledgeScrollDescCallbackId,
};
pub use import_knowledge_scroll_type_desc_reducer::{
    import_knowledge_scroll_type_desc, set_flags_for_import_knowledge_scroll_type_desc,
    ImportKnowledgeScrollTypeDescCallbackId,
};
pub use import_knowledge_secondary_state_reducer::{
    import_knowledge_secondary_state, set_flags_for_import_knowledge_secondary_state,
    ImportKnowledgeSecondaryStateCallbackId,
};
pub use import_knowledge_stat_modifier_desc_reducer::{
    import_knowledge_stat_modifier_desc, set_flags_for_import_knowledge_stat_modifier_desc,
    ImportKnowledgeStatModifierDescCallbackId,
};
pub use import_knowledge_vault_state_reducer::{
    import_knowledge_vault_state, set_flags_for_import_knowledge_vault_state,
    ImportKnowledgeVaultStateCallbackId,
};
pub use import_location_state_reducer::{
    import_location_state, set_flags_for_import_location_state, ImportLocationStateCallbackId,
};
pub use import_loot_chest_desc_reducer::{
    import_loot_chest_desc, set_flags_for_import_loot_chest_desc, ImportLootChestDescCallbackId,
};
pub use import_loot_chest_state_reducer::{
    import_loot_chest_state, set_flags_for_import_loot_chest_state, ImportLootChestStateCallbackId,
};
pub use import_loot_rarity_desc_reducer::{
    import_loot_rarity_desc, set_flags_for_import_loot_rarity_desc, ImportLootRarityDescCallbackId,
};
pub use import_loot_table_desc_reducer::{
    import_loot_table_desc, set_flags_for_import_loot_table_desc, ImportLootTableDescCallbackId,
};
pub use import_mobile_entity_state_reducer::{
    import_mobile_entity_state, set_flags_for_import_mobile_entity_state,
    ImportMobileEntityStateCallbackId,
};
pub use import_mounting_state_reducer::{
    import_mounting_state, set_flags_for_import_mounting_state, ImportMountingStateCallbackId,
};
pub use import_npc_desc_reducer::{
    import_npc_desc, set_flags_for_import_npc_desc, ImportNpcDescCallbackId,
};
pub use import_npc_state_reducer::{
    import_npc_state, set_flags_for_import_npc_state, ImportNpcStateCallbackId,
};
pub use import_onboarding_reward_desc_reducer::{
    import_onboarding_reward_desc, set_flags_for_import_onboarding_reward_desc,
    ImportOnboardingRewardDescCallbackId,
};
pub use import_onboarding_state_reducer::{
    import_onboarding_state, set_flags_for_import_onboarding_state, ImportOnboardingStateCallbackId,
};
pub use import_parameters_desc_reducer::{
    import_parameters_desc, set_flags_for_import_parameters_desc, ImportParametersDescCallbackId,
};
pub use import_pathfinding_desc_reducer::{
    import_pathfinding_desc, set_flags_for_import_pathfinding_desc, ImportPathfindingDescCallbackId,
};
pub use import_paved_tile_state_reducer::{
    import_paved_tile_state, set_flags_for_import_paved_tile_state, ImportPavedTileStateCallbackId,
};
pub use import_paving_tile_desc_reducer::{
    import_paving_tile_desc, set_flags_for_import_paving_tile_desc, ImportPavingTileDescCallbackId,
};
pub use import_player_action_desc_reducer::{
    import_player_action_desc, set_flags_for_import_player_action_desc,
    ImportPlayerActionDescCallbackId,
};
pub use import_player_action_state_reducer::{
    import_player_action_state, set_flags_for_import_player_action_state,
    ImportPlayerActionStateCallbackId,
};
pub use import_player_prefs_state_reducer::{
    import_player_prefs_state, set_flags_for_import_player_prefs_state,
    ImportPlayerPrefsStateCallbackId,
};
pub use import_player_state_reducer::{
    import_player_state, set_flags_for_import_player_state, ImportPlayerStateCallbackId,
};
pub use import_player_vote_state_reducer::{
    import_player_vote_state, set_flags_for_import_player_vote_state,
    ImportPlayerVoteStateCallbackId,
};
pub use import_portal_state_reducer::{
    import_portal_state, set_flags_for_import_portal_state, ImportPortalStateCallbackId,
};
pub use import_private_parameters_desc_reducer::{
    import_private_parameters_desc, set_flags_for_import_private_parameters_desc,
    ImportPrivateParametersDescCallbackId,
};
pub use import_progressive_action_state_reducer::{
    import_progressive_action_state, set_flags_for_import_progressive_action_state,
    ImportProgressiveActionStateCallbackId,
};
pub use import_project_site_state_reducer::{
    import_project_site_state, set_flags_for_import_project_site_state,
    ImportProjectSiteStateCallbackId,
};
pub use import_region_connection_info_reducer::{
    import_region_connection_info, set_flags_for_import_region_connection_info,
    ImportRegionConnectionInfoCallbackId,
};
pub use import_region_sign_in_parameters_reducer::{
    import_region_sign_in_parameters, set_flags_for_import_region_sign_in_parameters,
    ImportRegionSignInParametersCallbackId,
};
pub use import_rent_state_reducer::{
    import_rent_state, set_flags_for_import_rent_state, ImportRentStateCallbackId,
};
pub use import_resource_clump_desc_reducer::{
    import_resource_clump_desc, set_flags_for_import_resource_clump_desc,
    ImportResourceClumpDescCallbackId,
};
pub use import_resource_count_reducer::{
    import_resource_count, set_flags_for_import_resource_count, ImportResourceCountCallbackId,
};
pub use import_resource_desc_reducer::{
    import_resource_desc, set_flags_for_import_resource_desc, ImportResourceDescCallbackId,
};
pub use import_resource_growth_recipe_desc_reducer::{
    import_resource_growth_recipe_desc, set_flags_for_import_resource_growth_recipe_desc,
    ImportResourceGrowthRecipeDescCallbackId,
};
pub use import_resource_placement_recipe_desc_reducer::{
    import_resource_placement_recipe_desc, set_flags_for_import_resource_placement_recipe_desc,
    ImportResourcePlacementRecipeDescCallbackId,
};
pub use import_resource_state_reducer::{
    import_resource_state, set_flags_for_import_resource_state, ImportResourceStateCallbackId,
};
pub use import_satiation_state_reducer::{
    import_satiation_state, set_flags_for_import_satiation_state, ImportSatiationStateCallbackId,
};
pub use import_secondary_knowledge_desc_reducer::{
    import_secondary_knowledge_desc, set_flags_for_import_secondary_knowledge_desc,
    ImportSecondaryKnowledgeDescCallbackId,
};
pub use import_server_identity_reducer::{
    import_server_identity, set_flags_for_import_server_identity, ImportServerIdentityCallbackId,
};
pub use import_signed_in_player_state_reducer::{
    import_signed_in_player_state, set_flags_for_import_signed_in_player_state,
    ImportSignedInPlayerStateCallbackId,
};
pub use import_skill_desc_reducer::{
    import_skill_desc, set_flags_for_import_skill_desc, ImportSkillDescCallbackId,
};
pub use import_stamina_state_reducer::{
    import_stamina_state, set_flags_for_import_stamina_state, ImportStaminaStateCallbackId,
};
pub use import_target_state_reducer::{
    import_target_state, set_flags_for_import_target_state, ImportTargetStateCallbackId,
};
pub use import_targetable_state_reducer::{
    import_targetable_state, set_flags_for_import_targetable_state, ImportTargetableStateCallbackId,
};
pub use import_targeting_matrix_desc_reducer::{
    import_targeting_matrix_desc, set_flags_for_import_targeting_matrix_desc,
    ImportTargetingMatrixDescCallbackId,
};
pub use import_teleport_item_desc_reducer::{
    import_teleport_item_desc, set_flags_for_import_teleport_item_desc,
    ImportTeleportItemDescCallbackId,
};
pub use import_terraform_recipe_desc_reducer::{
    import_terraform_recipe_desc, set_flags_for_import_terraform_recipe_desc,
    ImportTerraformRecipeDescCallbackId,
};
pub use import_terrain_chunk_state_reducer::{
    import_terrain_chunk_state, set_flags_for_import_terrain_chunk_state,
    ImportTerrainChunkStateCallbackId,
};
pub use import_tool_desc_reducer::{
    import_tool_desc, set_flags_for_import_tool_desc, ImportToolDescCallbackId,
};
pub use import_tool_type_desc_reducer::{
    import_tool_type_desc, set_flags_for_import_tool_type_desc, ImportToolTypeDescCallbackId,
};
pub use import_trade_order_state_reducer::{
    import_trade_order_state, set_flags_for_import_trade_order_state,
    ImportTradeOrderStateCallbackId,
};
pub use import_trade_session_state_reducer::{
    import_trade_session_state, set_flags_for_import_trade_session_state,
    ImportTradeSessionStateCallbackId,
};
pub use import_traveler_task_desc_reducer::{
    import_traveler_task_desc, set_flags_for_import_traveler_task_desc,
    ImportTravelerTaskDescCallbackId,
};
pub use import_traveler_trade_order_desc_reducer::{
    import_traveler_trade_order_desc, set_flags_for_import_traveler_trade_order_desc,
    ImportTravelerTradeOrderDescCallbackId,
};
pub use import_user_moderation_state_reducer::{
    import_user_moderation_state, set_flags_for_import_user_moderation_state,
    ImportUserModerationStateCallbackId,
};
pub use import_user_state_reducer::{
    import_user_state, set_flags_for_import_user_state, ImportUserStateCallbackId,
};
pub use import_vault_state_reducer::{
    import_vault_state, set_flags_for_import_vault_state, ImportVaultStateCallbackId,
};
pub use import_wall_desc_reducer::{
    import_wall_desc, set_flags_for_import_wall_desc, ImportWallDescCallbackId,
};
pub use import_weapon_desc_reducer::{
    import_weapon_desc, set_flags_for_import_weapon_desc, ImportWeaponDescCallbackId,
};
pub use import_weapon_type_desc_reducer::{
    import_weapon_type_desc, set_flags_for_import_weapon_type_desc, ImportWeaponTypeDescCallbackId,
};
pub use import_world_region_name_state_reducer::{
    import_world_region_name_state, set_flags_for_import_world_region_name_state,
    ImportWorldRegionNameStateCallbackId,
};
pub use import_world_region_state_reducer::{
    import_world_region_state, set_flags_for_import_world_region_state,
    ImportWorldRegionStateCallbackId,
};
pub use input_item_stack_type::InputItemStack;
pub use inter_module_message_counter_table::*;
pub use inter_module_message_counter_type::InterModuleMessageCounter;
pub use inter_module_message_table::*;
pub use inter_module_message_type::InterModuleMessage;
pub use inter_module_response_message_counter_table::*;
pub use inter_module_response_message_counter_type::InterModuleResponseMessageCounter;
pub use inter_module_table_updates_type::InterModuleTableUpdates;
pub use interior_collapse_trigger_state_table::*;
pub use interior_collapse_trigger_state_type::InteriorCollapseTriggerState;
pub use interior_environment_desc_table::*;
pub use interior_environment_desc_type::InteriorEnvironmentDesc;
pub use interior_instance_desc_table::*;
pub use interior_instance_desc_type::InteriorInstanceDesc;
pub use interior_network_desc_table::*;
pub use interior_network_desc_type::InteriorNetworkDesc;
pub use interior_portal_connections_desc_table::*;
pub use interior_portal_connections_desc_type::InteriorPortalConnectionsDesc;
pub use interior_shape_desc_table::*;
pub use interior_shape_desc_type::InteriorShapeDesc;
pub use interior_spawn_desc_table::*;
pub use interior_spawn_desc_type::InteriorSpawnDesc;
pub use interior_spawn_type_type::InteriorSpawnType;
pub use inventory_state_table::*;
pub use inventory_state_type::InventoryState;
pub use item_conversion_location_context_type::ItemConversionLocationContext;
pub use item_conversion_recipe_desc_table::*;
pub use item_conversion_recipe_desc_type::ItemConversionRecipeDesc;
pub use item_desc_table::*;
pub use item_desc_type::ItemDesc;
pub use item_list_desc_table::*;
pub use item_list_desc_type::ItemListDesc;
pub use item_list_possibility_type::ItemListPossibility;
pub use item_stack_type::ItemStack;
pub use item_type_type::ItemType;
pub use knowledge_achievement_state_table::*;
pub use knowledge_achievement_state_type::KnowledgeAchievementState;
pub use knowledge_battle_action_state_table::*;
pub use knowledge_battle_action_state_type::KnowledgeBattleActionState;
pub use knowledge_building_state_table::*;
pub use knowledge_building_state_type::KnowledgeBuildingState;
pub use knowledge_cargo_state_table::*;
pub use knowledge_cargo_state_type::KnowledgeCargoState;
pub use knowledge_claim_state_table::*;
pub use knowledge_claim_state_type::KnowledgeClaimState;
pub use knowledge_construction_state_table::*;
pub use knowledge_construction_state_type::KnowledgeConstructionState;
pub use knowledge_craft_state_table::*;
pub use knowledge_craft_state_type::KnowledgeCraftState;
pub use knowledge_deployable_state_table::*;
pub use knowledge_deployable_state_type::KnowledgeDeployableState;
pub use knowledge_enemy_state_table::*;
pub use knowledge_enemy_state_type::KnowledgeEnemyState;
pub use knowledge_entity_entry_type::KnowledgeEntityEntry;
pub use knowledge_entry_type::KnowledgeEntry;
pub use knowledge_extract_state_table::*;
pub use knowledge_extract_state_type::KnowledgeExtractState;
pub use knowledge_item_state_table::*;
pub use knowledge_item_state_type::KnowledgeItemState;
pub use knowledge_location_entry_type::KnowledgeLocationEntry;
pub use knowledge_lore_state_table::*;
pub use knowledge_lore_state_type::KnowledgeLoreState;
pub use knowledge_npc_state_table::*;
pub use knowledge_npc_state_type::KnowledgeNpcState;
pub use knowledge_paving_state_table::*;
pub use knowledge_paving_state_type::KnowledgePavingState;
pub use knowledge_pillar_shaping_state_table::*;
pub use knowledge_pillar_shaping_state_type::KnowledgePillarShapingState;
pub use knowledge_resource_placement_state_table::*;
pub use knowledge_resource_placement_state_type::KnowledgeResourcePlacementState;
pub use knowledge_resource_state_table::*;
pub use knowledge_resource_state_type::KnowledgeResourceState;
pub use knowledge_ruins_state_table::*;
pub use knowledge_ruins_state_type::KnowledgeRuinsState;
pub use knowledge_scroll_desc_table::*;
pub use knowledge_scroll_desc_type::KnowledgeScrollDesc;
pub use knowledge_scroll_type_desc_table::*;
pub use knowledge_scroll_type_desc_type::KnowledgeScrollTypeDesc;
pub use knowledge_secondary_state_table::*;
pub use knowledge_secondary_state_type::KnowledgeSecondaryState;
pub use knowledge_stat_modifier_desc_table::*;
pub use knowledge_stat_modifier_desc_type::KnowledgeStatModifierDesc;
pub use knowledge_state_type::KnowledgeState;
pub use knowledge_vault_state_table::*;
pub use knowledge_vault_state_type::KnowledgeVaultState;
pub use large_hex_tile_message_type::LargeHexTileMessage;
pub use level_requirement_type::LevelRequirement;
pub use light_source_state_table::*;
pub use light_source_state_type::LightSourceState;
pub use load_config_reducer::{load_config, set_flags_for_load_config, LoadConfigCallbackId};
pub use location_state_op_type::LocationStateOp;
pub use location_state_table::*;
pub use location_state_type::LocationState;
pub use log_empire_leaderboard_reducer::{
    log_empire_leaderboard, set_flags_for_log_empire_leaderboard, LogEmpireLeaderboardCallbackId,
};
pub use log_player_with_reducer::{
    log_player_with, set_flags_for_log_player_with, LogPlayerWithCallbackId,
};
pub use loot_chest_desc_table::*;
pub use loot_chest_desc_type::LootChestDesc;
pub use loot_chest_state_table::*;
pub use loot_chest_state_type::LootChestState;
pub use loot_rarity_desc_table::*;
pub use loot_rarity_desc_type::LootRarityDesc;
pub use loot_table_desc_table::*;
pub use loot_table_desc_type::LootTableDesc;
pub use lost_items_state_table::*;
pub use lost_items_state_type::LostItemsState;
pub use message_contents_type::MessageContents;
pub use mobile_entity_state_table::*;
pub use mobile_entity_state_type::MobileEntityState;
pub use mounting_state_table::*;
pub use mounting_state_type::MountingState;
pub use move_validation_params_desc_type::MoveValidationParamsDesc;
pub use move_validation_strike_counter_state_table::*;
pub use move_validation_strike_counter_state_type::MoveValidationStrikeCounterState;
pub use movement_speed_type::MovementSpeed;
pub use movement_type_type::MovementType;
pub use notification_severity_type::NotificationSeverity;
pub use npc_desc_table::*;
pub use npc_desc_type::NpcDesc;
pub use npc_state_table::*;
pub use npc_state_type::NpcState;
pub use npc_type_type::NpcType;
pub use offset_coordinates_float_type::OffsetCoordinatesFloat;
pub use offset_coordinates_small_message_type::OffsetCoordinatesSmallMessage;
pub use on_claim_members_changed_msg_type::OnClaimMembersChangedMsg;
pub use on_deployable_recovered_msg_type::OnDeployableRecoveredMsg;
pub use on_empire_building_deleted_msg_type::OnEmpireBuildingDeletedMsg;
pub use on_inter_module_message_processed_reducer::{
    on_inter_module_message_processed, set_flags_for_on_inter_module_message_processed,
    OnInterModuleMessageProcessedCallbackId,
};
pub use on_player_joined_empire_msg_type::OnPlayerJoinedEmpireMsg;
pub use on_player_left_empire_msg_type::OnPlayerLeftEmpireMsg;
pub use on_player_name_set_msg_type::OnPlayerNameSetMsg;
pub use on_region_player_created_msg_type::OnRegionPlayerCreatedMsg;
pub use onboarding_reward_desc_table::*;
pub use onboarding_reward_desc_type::OnboardingRewardDesc;
pub use onboarding_state_table::*;
pub use onboarding_state_type::OnboardingState;
pub use online_timestamp_type::OnlineTimestamp;
pub use parameters_desc_table::*;
pub use parameters_desc_type::ParametersDesc;
pub use parameters_player_move_desc_table::*;
pub use parameters_player_move_desc_type::ParametersPlayerMoveDesc;
pub use passive_craft_state_table::*;
pub use passive_craft_state_type::PassiveCraftState;
pub use passive_craft_status_type::PassiveCraftStatus;
pub use pathfinding_desc_table::*;
pub use pathfinding_desc_type::PathfindingDesc;
pub use pathfinding_traversal_option_type::PathfindingTraversalOption;
pub use paved_tile_state_table::*;
pub use paved_tile_state_type::PavedTileState;
pub use paving_tile_desc_table::*;
pub use paving_tile_desc_type::PavingTileDesc;
pub use permission_group_type::PermissionGroup;
pub use permission_state_table::*;
pub use permission_state_type::PermissionState;
pub use permission_type::Permission;
pub use pillar_shaping_desc_table::*;
pub use pillar_shaping_desc_type::PillarShapingDesc;
pub use pillar_shaping_state_table::*;
pub use pillar_shaping_state_type::PillarShapingState;
pub use player_action_desc_table::*;
pub use player_action_desc_type::PlayerActionDesc;
pub use player_action_layer_type::PlayerActionLayer;
pub use player_action_result_type::PlayerActionResult;
pub use player_action_state_table::*;
pub use player_action_state_type::PlayerActionState;
pub use player_action_type_type::PlayerActionType;
pub use player_claim_daily_shards_reducer::{
    player_claim_daily_shards, set_flags_for_player_claim_daily_shards,
    PlayerClaimDailyShardsCallbackId,
};
pub use player_create_msg_type::PlayerCreateMsg;
pub use player_create_reducer::{
    player_create, set_flags_for_player_create, PlayerCreateCallbackId,
};
pub use player_developer_notification_state_table::*;
pub use player_developer_notification_state_type::PlayerDeveloperNotificationState;
pub use player_dismiss_notification_reducer::{
    player_dismiss_notification, set_flags_for_player_dismiss_notification,
    PlayerDismissNotificationCallbackId,
};
pub use player_housing_desc_table::*;
pub use player_housing_desc_type::PlayerHousingDesc;
pub use player_housing_state_op_type::PlayerHousingStateOp;
pub use player_housing_state_table::*;
pub use player_housing_state_type::PlayerHousingState;
pub use player_lowercase_username_state_table::*;
pub use player_lowercase_username_state_type::PlayerLowercaseUsernameState;
pub use player_note_state_table::*;
pub use player_note_state_type::PlayerNoteState;
pub use player_notification_event_reducer_reducer::{
    player_notification_event_reducer, set_flags_for_player_notification_event_reducer,
    PlayerNotificationEventReducerCallbackId,
};
pub use player_notification_event_table::*;
pub use player_notification_event_type::PlayerNotificationEvent;
pub use player_prefs_state_table::*;
pub use player_prefs_state_type::PlayerPrefsState;
pub use player_queue_state_table::*;
pub use player_queue_state_type::PlayerQueueState;
pub use player_report_state_op_type::PlayerReportStateOp;
pub use player_report_state_table::*;
pub use player_report_state_timestamp_table::*;
pub use player_report_state_timestamp_type::PlayerReportStateTimestamp;
pub use player_report_state_type::PlayerReportState;
pub use player_set_name_reducer::{
    player_set_name, set_flags_for_player_set_name, PlayerSetNameCallbackId,
};
pub use player_set_name_request_type::PlayerSetNameRequest;
pub use player_shard_state_table::*;
pub use player_shard_state_type::PlayerShardState;
pub use player_sign_in_request_type::PlayerSignInRequest;
pub use player_skip_queue_msg_type::PlayerSkipQueueMsg;
pub use player_state_table::*;
pub use player_state_type::PlayerState;
pub use player_timestamp_state_table::*;
pub use player_timestamp_state_type::PlayerTimestampState;
pub use player_username_state_table::*;
pub use player_username_state_type::PlayerUsernameState;
pub use player_vote_answer_reducer::{
    player_vote_answer, set_flags_for_player_vote_answer, PlayerVoteAnswerCallbackId,
};
pub use player_vote_answer_request_type::PlayerVoteAnswerRequest;
pub use player_vote_answer_type::PlayerVoteAnswer;
pub use player_vote_conclude_reducer::{
    player_vote_conclude, set_flags_for_player_vote_conclude, PlayerVoteConcludeCallbackId,
};
pub use player_vote_conclude_timer_table::*;
pub use player_vote_conclude_timer_type::PlayerVoteConcludeTimer;
pub use player_vote_state_table::*;
pub use player_vote_state_type::PlayerVoteState;
pub use player_vote_type_type::PlayerVoteType;
pub use pocket_type::Pocket;
pub use portal_state_table::*;
pub use portal_state_type::PortalState;
pub use private_parameters_desc_table::*;
pub use private_parameters_desc_type::PrivateParametersDesc;
pub use probabilistic_item_stack_type::ProbabilisticItemStack;
pub use process_inter_module_message_reducer::{
    process_inter_module_message, set_flags_for_process_inter_module_message,
    ProcessInterModuleMessageCallbackId,
};
pub use progressive_action_state_table::*;
pub use progressive_action_state_type::ProgressiveActionState;
pub use progressive_action_status_type::ProgressiveActionStatus;
pub use project_site_state_table::*;
pub use project_site_state_type::ProjectSiteState;
pub use rarity_type::Rarity;
pub use recover_deployable_msg_type::RecoverDeployableMsg;
pub use region_connection_info_op_type::RegionConnectionInfoOp;
pub use region_connection_info_table::*;
pub use region_connection_info_type::RegionConnectionInfo;
pub use region_destroy_siege_engine_msg_type::RegionDestroySiegeEngineMsg;
pub use region_population_info_op_type::RegionPopulationInfoOp;
pub use region_population_info_table::*;
pub use region_population_info_type::RegionPopulationInfo;
pub use region_sign_in_parameters_op_type::RegionSignInParametersOp;
pub use region_sign_in_parameters_table::*;
pub use region_sign_in_parameters_type::RegionSignInParameters;
pub use rent_state_table::*;
pub use rent_state_type::RentState;
pub use reserved_name_desc_table::*;
pub use reserved_name_desc_type::ReservedNameDesc;
pub use resource_clump_desc_table::*;
pub use resource_clump_desc_type::ResourceClumpDesc;
pub use resource_count_table::*;
pub use resource_count_type::ResourceCount;
pub use resource_desc_table::*;
pub use resource_desc_type::ResourceDesc;
pub use resource_growth_recipe_desc_table::*;
pub use resource_growth_recipe_desc_type::ResourceGrowthRecipeDesc;
pub use resource_health_state_table::*;
pub use resource_health_state_type::ResourceHealthState;
pub use resource_placement_recipe_desc_table::*;
pub use resource_placement_recipe_desc_type::ResourcePlacementRecipeDesc;
pub use resource_state_table::*;
pub use resource_state_type::ResourceState;
pub use rez_sick_long_term_state_table::*;
pub use rez_sick_long_term_state_type::RezSickLongTermState;
pub use role_type::Role;
pub use satiation_state_table::*;
pub use satiation_state_type::SatiationState;
pub use secondary_knowledge_desc_table::*;
pub use secondary_knowledge_desc_type::SecondaryKnowledgeDesc;
pub use sell_order_state_table::*;
pub use server_identity_table::*;
pub use server_identity_type::ServerIdentity;
pub use set_role_for_identity_reducer::{
    set_flags_for_set_role_for_identity, set_role_for_identity, SetRoleForIdentityCallbackId,
};
pub use sign_in_reducer::{set_flags_for_sign_in, sign_in, SignInCallbackId};
pub use sign_player_out_msg_type::SignPlayerOutMsg;
pub use signed_in_player_state_table::*;
pub use signed_in_player_state_type::SignedInPlayerState;
pub use single_resource_to_clump_desc_table::*;
pub use single_resource_to_clump_desc_type::SingleResourceToClumpDesc;
pub use skill_category_type::SkillCategory;
pub use skill_desc_table::*;
pub use skill_desc_type::SkillDesc;
pub use skill_type_type::SkillType;
pub use stage_achievement_desc_reducer::{
    set_flags_for_stage_achievement_desc, stage_achievement_desc, StageAchievementDescCallbackId,
};
pub use stage_alert_desc_reducer::{
    set_flags_for_stage_alert_desc, stage_alert_desc, StageAlertDescCallbackId,
};
pub use stage_biome_desc_reducer::{
    set_flags_for_stage_biome_desc, stage_biome_desc, StageBiomeDescCallbackId,
};
pub use stage_buff_desc_reducer::{
    set_flags_for_stage_buff_desc, stage_buff_desc, StageBuffDescCallbackId,
};
pub use stage_buff_type_desc_reducer::{
    set_flags_for_stage_buff_type_desc, stage_buff_type_desc, StageBuffTypeDescCallbackId,
};
pub use stage_building_claim_desc_reducer::{
    set_flags_for_stage_building_claim_desc, stage_building_claim_desc,
    StageBuildingClaimDescCallbackId,
};
pub use stage_building_desc_reducer::{
    set_flags_for_stage_building_desc, stage_building_desc, StageBuildingDescCallbackId,
};
pub use stage_building_portal_desc_reducer::{
    set_flags_for_stage_building_portal_desc, stage_building_portal_desc,
    StageBuildingPortalDescCallbackId,
};
pub use stage_building_repairs_desc_reducer::{
    set_flags_for_stage_building_repairs_desc, stage_building_repairs_desc,
    StageBuildingRepairsDescCallbackId,
};
pub use stage_building_spawn_desc_reducer::{
    set_flags_for_stage_building_spawn_desc, stage_building_spawn_desc,
    StageBuildingSpawnDescCallbackId,
};
pub use stage_building_type_desc_reducer::{
    set_flags_for_stage_building_type_desc, stage_building_type_desc,
    StageBuildingTypeDescCallbackId,
};
pub use stage_cargo_desc_reducer::{
    set_flags_for_stage_cargo_desc, stage_cargo_desc, StageCargoDescCallbackId,
};
pub use stage_character_stat_desc_reducer::{
    set_flags_for_stage_character_stat_desc, stage_character_stat_desc,
    StageCharacterStatDescCallbackId,
};
pub use stage_chest_rarity_desc_reducer::{
    set_flags_for_stage_chest_rarity_desc, stage_chest_rarity_desc, StageChestRarityDescCallbackId,
};
pub use stage_claim_tech_desc_reducer::{
    set_flags_for_stage_claim_tech_desc, stage_claim_tech_desc, StageClaimTechDescCallbackId,
};
pub use stage_claim_tile_cost_reducer::{
    set_flags_for_stage_claim_tile_cost, stage_claim_tile_cost, StageClaimTileCostCallbackId,
};
pub use stage_climb_requirement_desc_reducer::{
    set_flags_for_stage_climb_requirement_desc, stage_climb_requirement_desc,
    StageClimbRequirementDescCallbackId,
};
pub use stage_clothing_desc_reducer::{
    set_flags_for_stage_clothing_desc, stage_clothing_desc, StageClothingDescCallbackId,
};
pub use stage_collectible_desc_reducer::{
    set_flags_for_stage_collectible_desc, stage_collectible_desc, StageCollectibleDescCallbackId,
};
pub use stage_combat_action_desc_reducer::{
    set_flags_for_stage_combat_action_desc, stage_combat_action_desc,
    StageCombatActionDescCallbackId,
};
pub use stage_construction_recipe_desc_reducer::{
    set_flags_for_stage_construction_recipe_desc, stage_construction_recipe_desc,
    StageConstructionRecipeDescCallbackId,
};
pub use stage_crafting_recipe_desc_reducer::{
    set_flags_for_stage_crafting_recipe_desc, stage_crafting_recipe_desc,
    StageCraftingRecipeDescCallbackId,
};
pub use stage_deconstruction_recipe_desc_reducer::{
    set_flags_for_stage_deconstruction_recipe_desc, stage_deconstruction_recipe_desc,
    StageDeconstructionRecipeDescCallbackId,
};
pub use stage_deployable_desc_reducer::{
    set_flags_for_stage_deployable_desc, stage_deployable_desc, StageDeployableDescCallbackId,
};
pub use stage_distant_visible_entity_desc_reducer::{
    set_flags_for_stage_distant_visible_entity_desc, stage_distant_visible_entity_desc,
    StageDistantVisibleEntityDescCallbackId,
};
pub use stage_elevator_desc_reducer::{
    set_flags_for_stage_elevator_desc, stage_elevator_desc, StageElevatorDescCallbackId,
};
pub use stage_emote_desc_reducer::{
    set_flags_for_stage_emote_desc, stage_emote_desc, StageEmoteDescCallbackId,
};
pub use stage_empire_colors_desc_reducer::{
    set_flags_for_stage_empire_colors_desc, stage_empire_colors_desc,
    StageEmpireColorsDescCallbackId,
};
pub use stage_empire_icon_desc_reducer::{
    set_flags_for_stage_empire_icon_desc, stage_empire_icon_desc, StageEmpireIconDescCallbackId,
};
pub use stage_empire_notification_desc_reducer::{
    set_flags_for_stage_empire_notification_desc, stage_empire_notification_desc,
    StageEmpireNotificationDescCallbackId,
};
pub use stage_empire_rank_desc_reducer::{
    set_flags_for_stage_empire_rank_desc, stage_empire_rank_desc, StageEmpireRankDescCallbackId,
};
pub use stage_empire_supplies_desc_reducer::{
    set_flags_for_stage_empire_supplies_desc, stage_empire_supplies_desc,
    StageEmpireSuppliesDescCallbackId,
};
pub use stage_empire_territory_desc_reducer::{
    set_flags_for_stage_empire_territory_desc, stage_empire_territory_desc,
    StageEmpireTerritoryDescCallbackId,
};
pub use stage_enemy_ai_params_desc_reducer::{
    set_flags_for_stage_enemy_ai_params_desc, stage_enemy_ai_params_desc,
    StageEnemyAiParamsDescCallbackId,
};
pub use stage_enemy_desc_reducer::{
    set_flags_for_stage_enemy_desc, stage_enemy_desc, StageEnemyDescCallbackId,
};
pub use stage_environment_debuff_desc_reducer::{
    set_flags_for_stage_environment_debuff_desc, stage_environment_debuff_desc,
    StageEnvironmentDebuffDescCallbackId,
};
pub use stage_equipment_desc_reducer::{
    set_flags_for_stage_equipment_desc, stage_equipment_desc, StageEquipmentDescCallbackId,
};
pub use stage_extraction_recipe_desc_reducer::{
    set_flags_for_stage_extraction_recipe_desc, stage_extraction_recipe_desc,
    StageExtractionRecipeDescCallbackId,
};
pub use stage_food_desc_reducer::{
    set_flags_for_stage_food_desc, stage_food_desc, StageFoodDescCallbackId,
};
pub use stage_gate_desc_reducer::{
    set_flags_for_stage_gate_desc, stage_gate_desc, StageGateDescCallbackId,
};
pub use stage_hexite_exchange_entry_desc_reducer::{
    set_flags_for_stage_hexite_exchange_entry_desc, stage_hexite_exchange_entry_desc,
    StageHexiteExchangeEntryDescCallbackId,
};
pub use stage_interior_environment_desc_reducer::{
    set_flags_for_stage_interior_environment_desc, stage_interior_environment_desc,
    StageInteriorEnvironmentDescCallbackId,
};
pub use stage_interior_instance_desc_reducer::{
    set_flags_for_stage_interior_instance_desc, stage_interior_instance_desc,
    StageInteriorInstanceDescCallbackId,
};
pub use stage_interior_network_desc_reducer::{
    set_flags_for_stage_interior_network_desc, stage_interior_network_desc,
    StageInteriorNetworkDescCallbackId,
};
pub use stage_interior_portal_connections_desc_reducer::{
    set_flags_for_stage_interior_portal_connections_desc, stage_interior_portal_connections_desc,
    StageInteriorPortalConnectionsDescCallbackId,
};
pub use stage_interior_shape_desc_reducer::{
    set_flags_for_stage_interior_shape_desc, stage_interior_shape_desc,
    StageInteriorShapeDescCallbackId,
};
pub use stage_interior_spawn_desc_reducer::{
    set_flags_for_stage_interior_spawn_desc, stage_interior_spawn_desc,
    StageInteriorSpawnDescCallbackId,
};
pub use stage_item_conversion_recipe_desc_reducer::{
    set_flags_for_stage_item_conversion_recipe_desc, stage_item_conversion_recipe_desc,
    StageItemConversionRecipeDescCallbackId,
};
pub use stage_item_desc_reducer::{
    set_flags_for_stage_item_desc, stage_item_desc, StageItemDescCallbackId,
};
pub use stage_item_list_desc_reducer::{
    set_flags_for_stage_item_list_desc, stage_item_list_desc, StageItemListDescCallbackId,
};
pub use stage_knowledge_scroll_desc_reducer::{
    set_flags_for_stage_knowledge_scroll_desc, stage_knowledge_scroll_desc,
    StageKnowledgeScrollDescCallbackId,
};
pub use stage_knowledge_scroll_type_desc_reducer::{
    set_flags_for_stage_knowledge_scroll_type_desc, stage_knowledge_scroll_type_desc,
    StageKnowledgeScrollTypeDescCallbackId,
};
pub use stage_knowledge_stat_modifier_desc_reducer::{
    set_flags_for_stage_knowledge_stat_modifier_desc, stage_knowledge_stat_modifier_desc,
    StageKnowledgeStatModifierDescCallbackId,
};
pub use stage_loot_chest_desc_reducer::{
    set_flags_for_stage_loot_chest_desc, stage_loot_chest_desc, StageLootChestDescCallbackId,
};
pub use stage_loot_rarity_desc_reducer::{
    set_flags_for_stage_loot_rarity_desc, stage_loot_rarity_desc, StageLootRarityDescCallbackId,
};
pub use stage_loot_table_desc_reducer::{
    set_flags_for_stage_loot_table_desc, stage_loot_table_desc, StageLootTableDescCallbackId,
};
pub use stage_npc_desc_reducer::{
    set_flags_for_stage_npc_desc, stage_npc_desc, StageNpcDescCallbackId,
};
pub use stage_onboarding_reward_desc_reducer::{
    set_flags_for_stage_onboarding_reward_desc, stage_onboarding_reward_desc,
    StageOnboardingRewardDescCallbackId,
};
pub use stage_parameters_desc_reducer::{
    set_flags_for_stage_parameters_desc, stage_parameters_desc, StageParametersDescCallbackId,
};
pub use stage_pathfinding_desc_reducer::{
    set_flags_for_stage_pathfinding_desc, stage_pathfinding_desc, StagePathfindingDescCallbackId,
};
pub use stage_paving_tile_desc_reducer::{
    set_flags_for_stage_paving_tile_desc, stage_paving_tile_desc, StagePavingTileDescCallbackId,
};
pub use stage_pillar_shaping_desc_reducer::{
    set_flags_for_stage_pillar_shaping_desc, stage_pillar_shaping_desc,
    StagePillarShapingDescCallbackId,
};
pub use stage_player_action_desc_reducer::{
    set_flags_for_stage_player_action_desc, stage_player_action_desc,
    StagePlayerActionDescCallbackId,
};
pub use stage_player_housing_desc_reducer::{
    set_flags_for_stage_player_housing_desc, stage_player_housing_desc,
    StagePlayerHousingDescCallbackId,
};
pub use stage_private_parameters_desc_reducer::{
    set_flags_for_stage_private_parameters_desc, stage_private_parameters_desc,
    StagePrivateParametersDescCallbackId,
};
pub use stage_reserved_name_desc_reducer::{
    set_flags_for_stage_reserved_name_desc, stage_reserved_name_desc,
    StageReservedNameDescCallbackId,
};
pub use stage_resource_clump_desc_reducer::{
    set_flags_for_stage_resource_clump_desc, stage_resource_clump_desc,
    StageResourceClumpDescCallbackId,
};
pub use stage_resource_desc_reducer::{
    set_flags_for_stage_resource_desc, stage_resource_desc, StageResourceDescCallbackId,
};
pub use stage_resource_growth_recipe_desc_reducer::{
    set_flags_for_stage_resource_growth_recipe_desc, stage_resource_growth_recipe_desc,
    StageResourceGrowthRecipeDescCallbackId,
};
pub use stage_resource_placement_recipe_desc_reducer::{
    set_flags_for_stage_resource_placement_recipe_desc, stage_resource_placement_recipe_desc,
    StageResourcePlacementRecipeDescCallbackId,
};
pub use stage_secondary_knowledge_desc_reducer::{
    set_flags_for_stage_secondary_knowledge_desc, stage_secondary_knowledge_desc,
    StageSecondaryKnowledgeDescCallbackId,
};
pub use stage_skill_desc_reducer::{
    set_flags_for_stage_skill_desc, stage_skill_desc, StageSkillDescCallbackId,
};
pub use stage_targeting_matrix_desc_reducer::{
    set_flags_for_stage_targeting_matrix_desc, stage_targeting_matrix_desc,
    StageTargetingMatrixDescCallbackId,
};
pub use stage_teleport_item_desc_reducer::{
    set_flags_for_stage_teleport_item_desc, stage_teleport_item_desc,
    StageTeleportItemDescCallbackId,
};
pub use stage_terraform_recipe_desc_reducer::{
    set_flags_for_stage_terraform_recipe_desc, stage_terraform_recipe_desc,
    StageTerraformRecipeDescCallbackId,
};
pub use stage_tool_desc_reducer::{
    set_flags_for_stage_tool_desc, stage_tool_desc, StageToolDescCallbackId,
};
pub use stage_tool_type_desc_reducer::{
    set_flags_for_stage_tool_type_desc, stage_tool_type_desc, StageToolTypeDescCallbackId,
};
pub use stage_traveler_task_desc_reducer::{
    set_flags_for_stage_traveler_task_desc, stage_traveler_task_desc,
    StageTravelerTaskDescCallbackId,
};
pub use stage_traveler_trade_order_desc_reducer::{
    set_flags_for_stage_traveler_trade_order_desc, stage_traveler_trade_order_desc,
    StageTravelerTradeOrderDescCallbackId,
};
pub use stage_wall_desc_reducer::{
    set_flags_for_stage_wall_desc, stage_wall_desc, StageWallDescCallbackId,
};
pub use stage_weapon_desc_reducer::{
    set_flags_for_stage_weapon_desc, stage_weapon_desc, StageWeaponDescCallbackId,
};
pub use stage_weapon_type_desc_reducer::{
    set_flags_for_stage_weapon_type_desc, stage_weapon_type_desc, StageWeaponTypeDescCallbackId,
};
pub use staged_static_data_table::*;
pub use staged_static_data_type::StagedStaticData;
pub use stamina_state_table::*;
pub use stamina_state_type::StaminaState;
pub use starving_player_state_table::*;
pub use starving_player_state_type::StarvingPlayerState;
pub use static_data_upload_type::StaticDataUpload;
pub use surface_type_type::SurfaceType;
pub use target_state_table::*;
pub use target_state_type::TargetState;
pub use targetable_state_table::*;
pub use targetable_state_type::TargetableState;
pub use targeting_matrix_desc_table::*;
pub use targeting_matrix_desc_type::TargetingMatrixDesc;
pub use teleport_item_desc_table::*;
pub use teleport_item_desc_type::TeleportItemDesc;
pub use teleport_location_type::TeleportLocation;
pub use teleport_location_type_type::TeleportLocationType;
pub use teleportation_energy_state_table::*;
pub use teleportation_energy_state_type::TeleportationEnergyState;
pub use terraform_progress_state_table::*;
pub use terraform_progress_state_type::TerraformProgressState;
pub use terraform_recipe_desc_table::*;
pub use terraform_recipe_desc_type::TerraformRecipeDesc;
pub use terrain_cell_type::TerrainCell;
pub use terrain_chunk_state_table::*;
pub use terrain_chunk_state_type::TerrainChunkState;
pub use the_great_place_holder_table_type::TheGreatPlaceHolderTable;
pub use the_great_placeholder_table_table::*;
pub use threat_state_table::*;
pub use threat_state_type::ThreatState;
pub use tool_desc_table::*;
pub use tool_desc_type::ToolDesc;
pub use tool_requirement_type::ToolRequirement;
pub use tool_type_desc_table::*;
pub use tool_type_desc_type::ToolTypeDesc;
pub use toolbar_state_table::*;
pub use toolbar_state_type::ToolbarState;
pub use trade_order_state_table::*;
pub use trade_order_state_type::TradeOrderState;
pub use trade_pocket_type::TradePocket;
pub use trade_session_state_table::*;
pub use trade_session_state_type::TradeSessionState;
pub use trade_session_status_type::TradeSessionStatus;
pub use transfer_player_housing_msg_type::TransferPlayerHousingMsg;
pub use transfer_player_msg_type::TransferPlayerMsg;
pub use traveler_task_desc_table::*;
pub use traveler_task_desc_type::TravelerTaskDesc;
pub use traveler_task_state_table::*;
pub use traveler_task_state_type::TravelerTaskState;
pub use traveler_trade_order_desc_table::*;
pub use traveler_trade_order_desc_type::TravelerTradeOrderDesc;
pub use traversal_settings_type::TraversalSettings;
pub use unclaimed_collectibles_state_table::*;
pub use unclaimed_collectibles_state_type::UnclaimedCollectiblesState;
pub use unclaimed_shards_state_table::*;
pub use unclaimed_shards_state_type::UnclaimedShardsState;
pub use update_role_for_player_reducer::{
    set_flags_for_update_role_for_player, update_role_for_player, UpdateRoleForPlayerCallbackId,
};
pub use update_scheduled_timers_from_static_data_reducer::{
    set_flags_for_update_scheduled_timers_from_static_data,
    update_scheduled_timers_from_static_data, UpdateScheduledTimersFromStaticDataCallbackId,
};
pub use user_authentication_state_op_type::UserAuthenticationStateOp;
pub use user_authentication_state_table::*;
pub use user_authentication_state_type::UserAuthenticationState;
pub use user_moderation_clear_all_reducer::{
    set_flags_for_user_moderation_clear_all, user_moderation_clear_all,
    UserModerationClearAllCallbackId,
};
pub use user_moderation_create_reducer::{
    set_flags_for_user_moderation_create, user_moderation_create, UserModerationCreateCallbackId,
};
pub use user_moderation_create_user_policy_request_type::UserModerationCreateUserPolicyRequest;
pub use user_moderation_delete_reducer::{
    set_flags_for_user_moderation_delete, user_moderation_delete, UserModerationDeleteCallbackId,
};
pub use user_moderation_list_all_reducer::{
    set_flags_for_user_moderation_list_all, user_moderation_list_all,
    UserModerationListAllCallbackId,
};
pub use user_moderation_policy_type::UserModerationPolicy;
pub use user_moderation_state_op_type::UserModerationStateOp;
pub use user_moderation_state_table::*;
pub use user_moderation_state_type::UserModerationState;
pub use user_previous_region_state_table::*;
pub use user_previous_region_state_type::UserPreviousRegionState;
pub use user_region_state_table::*;
pub use user_region_state_type::UserRegionState;
pub use user_state_op_type::UserStateOp;
pub use user_state_table::*;
pub use user_state_type::UserState;
pub use user_update_region_msg_type::UserUpdateRegionMsg;
pub use vault_collectible_type::VaultCollectible;
pub use vault_state_table::*;
pub use vault_state_type::VaultState;
pub use vfx_attachment_point_type::VfxAttachmentPoint;
pub use wall_desc_table::*;
pub use wall_desc_type::WallDesc;
pub use weapon_desc_table::*;
pub use weapon_desc_type::WeaponDesc;
pub use weapon_type_desc_table::*;
pub use weapon_type_desc_type::WeaponTypeDesc;
pub use world_region_name_state_table::*;
pub use world_region_name_state_type::WorldRegionNameState;
pub use world_region_state_table::*;
pub use world_region_state_type::WorldRegionState;

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    AdminBroadcastMsg {
        region: u8,
        title: String,
        message: String,
    },
    AdminGrantShards {
        identity: String,
        amount: u32,
    },
    AdminMarkUserReportAsActioned {
        entity_id: u64,
        actioned: bool,
    },
    AdminNotifyPlayer {
        username: String,
        title: String,
        message: String,
    },
    AdminNotifyPlayerByIdentity {
        identity: String,
        title: String,
        message: String,
    },
    AdminRenameEmpire {
        current_name: String,
        new_name: String,
    },
    AdminRenameEmpireEntity {
        entity_id: u64,
        new_name: String,
    },
    AdminRenameEmpireRank {
        empire_name: String,
        rank: u8,
        new_name: String,
    },
    AdminRenameEmpireRankEntity {
        empire_entity_id: u64,
        rank: u8,
        new_name: String,
    },
    AdminRenamePlayer {
        current_name: String,
        new_name: String,
    },
    AdminRenamePlayerEntity {
        entity_id: u64,
        new_name: String,
    },
    AdminSignOutAll {
        region: u8,
    },
    AdminSkipQueueEntity {
        entity_id: u64,
    },
    AdminSkipQueueIdentity {
        identity: __sdk::Identity,
    },
    AdminSkipQueueName {
        name: String,
    },
    AdminUpdateGrantedHubItemState {
        identity: __sdk::Identity,
        item_type: HubItemType,
        item_id: i32,
        balance: u32,
    },
    AdminUpdateSignInParameters {
        region_sign_in_parameters: RegionSignInParameters,
        region: u8,
    },
    Authenticate {
        identity: String,
    },
    BlockIdentity {
        identity: String,
    },
    CheatEmpireSiegeAddSupplies {
        siege_node_entity_id: u64,
        supplies: i32,
    },
    CheatEmpireSiegeCancel {
        siege_node_entity_id: u64,
    },
    CheatPlayerSetName {
        player_entity_id: u64,
        name: String,
    },
    CheatShardsGrant {
        request: CheatShardsGrantRequest,
    },
    ClearStagedStaticData,
    CommitStagedStaticData,
    CurrentVersion,
    EmpireChangeEmblem {
        request: EmpireChangeEmblemRequest,
    },
    EmpireCraftSupplies {
        foundry_entity_id: u64,
    },
    EmpireCraftSuppliesScheduled {
        timer: EmpireCraftSuppliesTimer,
    },
    EmpireDecayAgentLoop {
        timer: EmpireDecayLoopTimer,
    },
    EmpireDismantle {
        request: EmpireDismantleRequest,
    },
    EmpireDonateShards {
        request: EmpireDonateShardsRequest,
    },
    EmpireForm {
        request: EmpireFormRequest,
    },
    EmpireLeave {
        request: EmpireLeaveRequest,
    },
    EmpireMarkForExpansion {
        request: EmpireMarkForExpansionRequest,
    },
    EmpireMarkForSiege {
        request: EmpireMarkForSiegeRequest,
    },
    EmpirePlayerJoin {
        request: EmpirePlayerJoinRequest,
    },
    EmpirePlayerLeave {
        request: EmpirePlayerLeaveRequest,
    },
    EmpireSetDirectiveMessage {
        request: EmpireSetDirectiveMessageRequest,
    },
    EmpireSetNobilityThreshold {
        threshold: i32,
    },
    EmpireSetPlayerRank {
        request: EmpireSetPlayerRankRequest,
    },
    EmpireSetRankTitle {
        request: EmpireSetRankTitleRequest,
    },
    EmpireSiegeAgentLoop {
        timer: EmpireSiegeLoopTimer,
    },
    EmpireSubmit {
        new_empire_entity_id: u64,
    },
    EmpireTransferEmperorship {
        target_player_entity_id: u64,
    },
    EmpireUpdatePermissions {
        request: EmpireUpdatePermissionsRequest,
    },
    IdentityConnected,
    IdentityDisconnected,
    ImportAchievementDesc {
        records: Vec<AchievementDesc>,
    },
    ImportActiveBuffState {
        records: Vec<ActiveBuffState>,
    },
    ImportAdminBroadcast {
        records: Vec<AdminBroadcast>,
    },
    ImportAlertDesc {
        records: Vec<AlertDesc>,
    },
    ImportAlertState {
        records: Vec<AlertState>,
    },
    ImportAttackOutcomeState {
        records: Vec<AttackOutcomeState>,
    },
    ImportBiomeDesc {
        records: Vec<BiomeDesc>,
    },
    ImportBuffDesc {
        records: Vec<BuffDesc>,
    },
    ImportBuffTypeDesc {
        records: Vec<BuffTypeDesc>,
    },
    ImportBuildingClaimDesc {
        records: Vec<BuildingClaimDesc>,
    },
    ImportBuildingDesc {
        records: Vec<BuildingDesc>,
    },
    ImportBuildingPortalDesc {
        records: Vec<BuildingPortalDesc>,
    },
    ImportBuildingRepairsDesc {
        records: Vec<BuildingRepairsDesc>,
    },
    ImportBuildingSpawnDesc {
        records: Vec<BuildingSpawnDesc>,
    },
    ImportBuildingState {
        records: Vec<BuildingState>,
    },
    ImportBuildingTypeDesc {
        records: Vec<BuildingTypeDesc>,
    },
    ImportCargoDesc {
        records: Vec<CargoDesc>,
    },
    ImportCharacterStatDesc {
        records: Vec<CharacterStatDesc>,
    },
    ImportCharacterStatsState {
        records: Vec<CharacterStatsState>,
    },
    ImportChatMessageState {
        records: Vec<ChatMessageState>,
    },
    ImportChestRarityDesc {
        records: Vec<ChestRarityDesc>,
    },
    ImportClaimLocalState {
        records: Vec<ClaimLocalState>,
    },
    ImportClaimRecruitmentState {
        records: Vec<ClaimRecruitmentState>,
    },
    ImportClaimState {
        records: Vec<ClaimState>,
    },
    ImportClaimTechDesc {
        records: Vec<ClaimTechDesc>,
    },
    ImportClaimTechState {
        records: Vec<ClaimTechState>,
    },
    ImportClaimTileCost {
        records: Vec<ClaimTileCost>,
    },
    ImportClaimTileState {
        records: Vec<ClaimTileState>,
    },
    ImportClimbRequirementDesc {
        records: Vec<ClimbRequirementDesc>,
    },
    ImportClothingDesc {
        records: Vec<ClothingDesc>,
    },
    ImportCollectibleDesc {
        records: Vec<CollectibleDesc>,
    },
    ImportCombatActionDesc {
        records: Vec<CombatActionDesc>,
    },
    ImportCombatState {
        records: Vec<CombatState>,
    },
    ImportConfig {
        records: Vec<Config>,
    },
    ImportConstructionRecipeDesc {
        records: Vec<ConstructionRecipeDesc>,
    },
    ImportCraftingRecipeDesc {
        records: Vec<CraftingRecipeDesc>,
    },
    ImportDeconstructionRecipeDesc {
        records: Vec<DeconstructionRecipeDesc>,
    },
    ImportDeployableDesc {
        records: Vec<DeployableDesc>,
    },
    ImportDeployableState {
        records: Vec<DeployableState>,
    },
    ImportDimensionDescriptionState {
        records: Vec<DimensionDescriptionState>,
    },
    ImportDimensionNetworkDescriptionState {
        records: Vec<DimensionNetworkState>,
    },
    ImportDistantVisibleEntityDesc {
        records: Vec<DistantVisibleEntityDesc>,
    },
    ImportDroppedInventoryState {
        records: Vec<DroppedInventoryState>,
    },
    ImportElevatorDesc {
        records: Vec<ElevatorDesc>,
    },
    ImportEmoteDesc {
        records: Vec<EmoteDesc>,
    },
    ImportEmpireColorsDesc {
        records: Vec<EmpireColorDesc>,
    },
    ImportEmpireNotificationDesc {
        records: Vec<EmpireNotificationDesc>,
    },
    ImportEmpireRankDesc {
        records: Vec<EmpireRankDesc>,
    },
    ImportEmpireSuppliesDesc {
        records: Vec<EmpireSuppliesDesc>,
    },
    ImportEmpireTerritoryDesc {
        records: Vec<EmpireTerritoryDesc>,
    },
    ImportEnemyAiParamsDesc {
        records: Vec<EnemyAiParamsDesc>,
    },
    ImportEnemyDesc {
        records: Vec<EnemyDesc>,
    },
    ImportEnemyState {
        records: Vec<EnemyState>,
    },
    ImportEnvironmentDebuffDesc {
        records: Vec<EnvironmentDebuffDesc>,
    },
    ImportEquipmentDesc {
        records: Vec<EquipmentDesc>,
    },
    ImportEquipmentState {
        records: Vec<EquipmentState>,
    },
    ImportExperienceState {
        records: Vec<ExperienceState>,
    },
    ImportExplorationChunksState {
        records: Vec<ExplorationChunksState>,
    },
    ImportExtractionRecipeDesc {
        records: Vec<ExtractionRecipeDesc>,
    },
    ImportFoodDesc {
        records: Vec<FoodDesc>,
    },
    ImportFootprintTileState {
        records: Vec<FootprintTileState>,
    },
    ImportGateDesc {
        records: Vec<GateDesc>,
    },
    ImportGlobals {
        records: Vec<Globals>,
    },
    ImportGrowthState {
        records: Vec<GrowthState>,
    },
    ImportHealthState {
        records: Vec<HealthState>,
    },
    ImportHerdCache {
        records: Vec<HerdState>,
    },
    ImportHexiteExchangeEntryDesc {
        records: Vec<HexiteExchangeEntryDesc>,
    },
    ImportIdentityRole {
        records: Vec<IdentityRole>,
    },
    ImportInteriorCollapseTriggerState {
        records: Vec<InteriorCollapseTriggerState>,
    },
    ImportInteriorInstanceDesc {
        records: Vec<InteriorInstanceDesc>,
    },
    ImportInteriorNetworkDesc {
        records: Vec<InteriorNetworkDesc>,
    },
    ImportInteriorPortalConnectionsDesc {
        records: Vec<InteriorPortalConnectionsDesc>,
    },
    ImportInteriorShapeDesc {
        records: Vec<InteriorShapeDesc>,
    },
    ImportInteriorSpawnDesc {
        records: Vec<InteriorSpawnDesc>,
    },
    ImportInventoryState {
        records: Vec<InventoryState>,
    },
    ImportItemConversionRecipeDesc {
        records: Vec<ItemConversionRecipeDesc>,
    },
    ImportItemDesc {
        records: Vec<ItemDesc>,
    },
    ImportItemListDesc {
        records: Vec<ItemListDesc>,
    },
    ImportKnowledgeAchievementState {
        records: Vec<KnowledgeAchievementState>,
    },
    ImportKnowledgeBattleActionState {
        records: Vec<KnowledgeBattleActionState>,
    },
    ImportKnowledgeBuildingState {
        records: Vec<KnowledgeBuildingState>,
    },
    ImportKnowledgeCargoState {
        records: Vec<KnowledgeCargoState>,
    },
    ImportKnowledgeConstructionState {
        records: Vec<KnowledgeConstructionState>,
    },
    ImportKnowledgeCraftState {
        records: Vec<KnowledgeCraftState>,
    },
    ImportKnowledgeDeployableState {
        records: Vec<KnowledgeDeployableState>,
    },
    ImportKnowledgeEnemyState {
        records: Vec<KnowledgeEnemyState>,
    },
    ImportKnowledgeExtractState {
        records: Vec<KnowledgeExtractState>,
    },
    ImportKnowledgeItemState {
        records: Vec<KnowledgeItemState>,
    },
    ImportKnowledgeLoreState {
        records: Vec<KnowledgeLoreState>,
    },
    ImportKnowledgeNpcState {
        records: Vec<KnowledgeNpcState>,
    },
    ImportKnowledgePavingState {
        records: Vec<KnowledgePavingState>,
    },
    ImportKnowledgeResourcePlacementState {
        records: Vec<KnowledgeResourcePlacementState>,
    },
    ImportKnowledgeResourceState {
        records: Vec<KnowledgeResourceState>,
    },
    ImportKnowledgeRuinsState {
        records: Vec<KnowledgeRuinsState>,
    },
    ImportKnowledgeScrollDesc {
        records: Vec<KnowledgeScrollDesc>,
    },
    ImportKnowledgeScrollTypeDesc {
        records: Vec<KnowledgeScrollTypeDesc>,
    },
    ImportKnowledgeSecondaryState {
        records: Vec<KnowledgeSecondaryState>,
    },
    ImportKnowledgeStatModifierDesc {
        records: Vec<KnowledgeStatModifierDesc>,
    },
    ImportKnowledgeVaultState {
        records: Vec<KnowledgeVaultState>,
    },
    ImportLocationState {
        records: Vec<LocationState>,
    },
    ImportLootChestDesc {
        records: Vec<LootChestDesc>,
    },
    ImportLootChestState {
        records: Vec<LootChestState>,
    },
    ImportLootRarityDesc {
        records: Vec<LootRarityDesc>,
    },
    ImportLootTableDesc {
        records: Vec<LootTableDesc>,
    },
    ImportMobileEntityState {
        records: Vec<MobileEntityState>,
    },
    ImportMountingState {
        records: Vec<MountingState>,
    },
    ImportNpcDesc {
        records: Vec<NpcDesc>,
    },
    ImportNpcState {
        records: Vec<NpcState>,
    },
    ImportOnboardingRewardDesc {
        records: Vec<OnboardingRewardDesc>,
    },
    ImportOnboardingState {
        records: Vec<OnboardingState>,
    },
    ImportParametersDesc {
        records: Vec<ParametersDesc>,
    },
    ImportPathfindingDesc {
        records: Vec<PathfindingDesc>,
    },
    ImportPavedTileState {
        records: Vec<PavedTileState>,
    },
    ImportPavingTileDesc {
        records: Vec<PavingTileDesc>,
    },
    ImportPlayerActionDesc {
        records: Vec<PlayerActionDesc>,
    },
    ImportPlayerActionState {
        records: Vec<PlayerActionState>,
    },
    ImportPlayerPrefsState {
        records: Vec<PlayerPrefsState>,
    },
    ImportPlayerState {
        records: Vec<PlayerState>,
    },
    ImportPlayerVoteState {
        records: Vec<PlayerVoteState>,
    },
    ImportPortalState {
        records: Vec<PortalState>,
    },
    ImportPrivateParametersDesc {
        records: Vec<PrivateParametersDesc>,
    },
    ImportProgressiveActionState {
        records: Vec<ProgressiveActionState>,
    },
    ImportProjectSiteState {
        records: Vec<ProjectSiteState>,
    },
    ImportRegionConnectionInfo {
        records: Vec<RegionConnectionInfo>,
    },
    ImportRegionSignInParameters {
        records: Vec<RegionSignInParameters>,
    },
    ImportRentState {
        records: Vec<RentState>,
    },
    ImportResourceClumpDesc {
        records: Vec<ResourceClumpDesc>,
    },
    ImportResourceCount {
        records: Vec<ResourceCount>,
    },
    ImportResourceDesc {
        records: Vec<ResourceDesc>,
    },
    ImportResourceGrowthRecipeDesc {
        records: Vec<ResourceGrowthRecipeDesc>,
    },
    ImportResourcePlacementRecipeDesc {
        records: Vec<ResourcePlacementRecipeDesc>,
    },
    ImportResourceState {
        records: Vec<ResourceState>,
    },
    ImportSatiationState {
        records: Vec<SatiationState>,
    },
    ImportSecondaryKnowledgeDesc {
        records: Vec<SecondaryKnowledgeDesc>,
    },
    ImportServerIdentity {
        records: Vec<ServerIdentity>,
    },
    ImportSignedInPlayerState {
        records: Vec<SignedInPlayerState>,
    },
    ImportSkillDesc {
        records: Vec<SkillDesc>,
    },
    ImportStaminaState {
        records: Vec<StaminaState>,
    },
    ImportTargetState {
        records: Vec<TargetState>,
    },
    ImportTargetableState {
        records: Vec<TargetableState>,
    },
    ImportTargetingMatrixDesc {
        records: Vec<TargetingMatrixDesc>,
    },
    ImportTeleportItemDesc {
        records: Vec<TeleportItemDesc>,
    },
    ImportTerraformRecipeDesc {
        records: Vec<TerraformRecipeDesc>,
    },
    ImportTerrainChunkState {
        records: Vec<TerrainChunkState>,
    },
    ImportToolDesc {
        records: Vec<ToolDesc>,
    },
    ImportToolTypeDesc {
        records: Vec<ToolTypeDesc>,
    },
    ImportTradeOrderState {
        records: Vec<TradeOrderState>,
    },
    ImportTradeSessionState {
        records: Vec<TradeSessionState>,
    },
    ImportTravelerTaskDesc {
        records: Vec<TravelerTaskDesc>,
    },
    ImportTravelerTradeOrderDesc {
        records: Vec<TravelerTradeOrderDesc>,
    },
    ImportUserModerationState {
        records: Vec<UserModerationState>,
    },
    ImportUserState {
        records: Vec<UserState>,
    },
    ImportVaultState {
        records: Vec<VaultState>,
    },
    ImportWallDesc {
        records: Vec<WallDesc>,
    },
    ImportWeaponDesc {
        records: Vec<WeaponDesc>,
    },
    ImportWeaponTypeDesc {
        records: Vec<WeaponTypeDesc>,
    },
    ImportWorldRegionNameState {
        records: Vec<WorldRegionNameState>,
    },
    ImportWorldRegionState {
        records: Vec<WorldRegionState>,
    },
    LoadConfig {
        environment_names: Vec<String>,
        contents: Vec<String>,
    },
    LogEmpireLeaderboard,
    LogPlayerWith,
    OnInterModuleMessageProcessed {
        id: u64,
        error: Option<String>,
    },
    PlayerClaimDailyShards,
    PlayerCreate,
    PlayerDismissNotification,
    PlayerNotificationEventReducer {
        timer: PlayerNotificationEvent,
    },
    PlayerSetName {
        request: PlayerSetNameRequest,
    },
    PlayerVoteAnswer {
        request: PlayerVoteAnswerRequest,
    },
    PlayerVoteConclude {
        timer: PlayerVoteConcludeTimer,
    },
    ProcessInterModuleMessage {
        sender: u8,
        message: InterModuleMessage,
    },
    SetRoleForIdentity {
        identity: String,
        role: Role,
    },
    SignIn {
        request: PlayerSignInRequest,
    },
    StageAchievementDesc {
        records: Vec<AchievementDesc>,
    },
    StageAlertDesc {
        records: Vec<AlertDesc>,
    },
    StageBiomeDesc {
        records: Vec<BiomeDesc>,
    },
    StageBuffDesc {
        records: Vec<BuffDesc>,
    },
    StageBuffTypeDesc {
        records: Vec<BuffTypeDesc>,
    },
    StageBuildingClaimDesc {
        records: Vec<BuildingClaimDesc>,
    },
    StageBuildingDesc {
        records: Vec<BuildingDesc>,
    },
    StageBuildingPortalDesc {
        records: Vec<BuildingPortalDesc>,
    },
    StageBuildingRepairsDesc {
        records: Vec<BuildingRepairsDesc>,
    },
    StageBuildingSpawnDesc {
        records: Vec<BuildingSpawnDesc>,
    },
    StageBuildingTypeDesc {
        records: Vec<BuildingTypeDesc>,
    },
    StageCargoDesc {
        records: Vec<CargoDesc>,
    },
    StageCharacterStatDesc {
        records: Vec<CharacterStatDesc>,
    },
    StageChestRarityDesc {
        records: Vec<ChestRarityDesc>,
    },
    StageClaimTechDesc {
        records: Vec<ClaimTechDesc>,
    },
    StageClaimTileCost {
        records: Vec<ClaimTileCost>,
    },
    StageClimbRequirementDesc {
        records: Vec<ClimbRequirementDesc>,
    },
    StageClothingDesc {
        records: Vec<ClothingDesc>,
    },
    StageCollectibleDesc {
        records: Vec<CollectibleDesc>,
    },
    StageCombatActionDesc {
        records: Vec<CombatActionDesc>,
    },
    StageConstructionRecipeDesc {
        records: Vec<ConstructionRecipeDesc>,
    },
    StageCraftingRecipeDesc {
        records: Vec<CraftingRecipeDesc>,
    },
    StageDeconstructionRecipeDesc {
        records: Vec<DeconstructionRecipeDesc>,
    },
    StageDeployableDesc {
        records: Vec<DeployableDesc>,
    },
    StageDistantVisibleEntityDesc {
        records: Vec<DistantVisibleEntityDesc>,
    },
    StageElevatorDesc {
        records: Vec<ElevatorDesc>,
    },
    StageEmoteDesc {
        records: Vec<EmoteDesc>,
    },
    StageEmpireColorsDesc {
        records: Vec<EmpireColorDesc>,
    },
    StageEmpireIconDesc {
        records: Vec<EmpireIconDesc>,
    },
    StageEmpireNotificationDesc {
        records: Vec<EmpireNotificationDesc>,
    },
    StageEmpireRankDesc {
        records: Vec<EmpireRankDesc>,
    },
    StageEmpireSuppliesDesc {
        records: Vec<EmpireSuppliesDesc>,
    },
    StageEmpireTerritoryDesc {
        records: Vec<EmpireTerritoryDesc>,
    },
    StageEnemyAiParamsDesc {
        records: Vec<EnemyAiParamsDesc>,
    },
    StageEnemyDesc {
        records: Vec<EnemyDesc>,
    },
    StageEnvironmentDebuffDesc {
        records: Vec<EnvironmentDebuffDesc>,
    },
    StageEquipmentDesc {
        records: Vec<EquipmentDesc>,
    },
    StageExtractionRecipeDesc {
        records: Vec<ExtractionRecipeDesc>,
    },
    StageFoodDesc {
        records: Vec<FoodDesc>,
    },
    StageGateDesc {
        records: Vec<GateDesc>,
    },
    StageHexiteExchangeEntryDesc {
        records: Vec<HexiteExchangeEntryDesc>,
    },
    StageInteriorEnvironmentDesc {
        records: Vec<InteriorEnvironmentDesc>,
    },
    StageInteriorInstanceDesc {
        records: Vec<InteriorInstanceDesc>,
    },
    StageInteriorNetworkDesc {
        records: Vec<InteriorNetworkDesc>,
    },
    StageInteriorPortalConnectionsDesc {
        records: Vec<InteriorPortalConnectionsDesc>,
    },
    StageInteriorShapeDesc {
        records: Vec<InteriorShapeDesc>,
    },
    StageInteriorSpawnDesc {
        records: Vec<InteriorSpawnDesc>,
    },
    StageItemConversionRecipeDesc {
        records: Vec<ItemConversionRecipeDesc>,
    },
    StageItemDesc {
        records: Vec<ItemDesc>,
    },
    StageItemListDesc {
        records: Vec<ItemListDesc>,
    },
    StageKnowledgeScrollDesc {
        records: Vec<KnowledgeScrollDesc>,
    },
    StageKnowledgeScrollTypeDesc {
        records: Vec<KnowledgeScrollTypeDesc>,
    },
    StageKnowledgeStatModifierDesc {
        records: Vec<KnowledgeStatModifierDesc>,
    },
    StageLootChestDesc {
        records: Vec<LootChestDesc>,
    },
    StageLootRarityDesc {
        records: Vec<LootRarityDesc>,
    },
    StageLootTableDesc {
        records: Vec<LootTableDesc>,
    },
    StageNpcDesc {
        records: Vec<NpcDesc>,
    },
    StageOnboardingRewardDesc {
        records: Vec<OnboardingRewardDesc>,
    },
    StageParametersDesc {
        records: Vec<ParametersDesc>,
    },
    StagePathfindingDesc {
        records: Vec<PathfindingDesc>,
    },
    StagePavingTileDesc {
        records: Vec<PavingTileDesc>,
    },
    StagePillarShapingDesc {
        records: Vec<PillarShapingDesc>,
    },
    StagePlayerActionDesc {
        records: Vec<PlayerActionDesc>,
    },
    StagePlayerHousingDesc {
        records: Vec<PlayerHousingDesc>,
    },
    StagePrivateParametersDesc {
        records: Vec<PrivateParametersDesc>,
    },
    StageReservedNameDesc {
        records: Vec<ReservedNameDesc>,
    },
    StageResourceClumpDesc {
        records: Vec<ResourceClumpDesc>,
    },
    StageResourceDesc {
        records: Vec<ResourceDesc>,
    },
    StageResourceGrowthRecipeDesc {
        records: Vec<ResourceGrowthRecipeDesc>,
    },
    StageResourcePlacementRecipeDesc {
        records: Vec<ResourcePlacementRecipeDesc>,
    },
    StageSecondaryKnowledgeDesc {
        records: Vec<SecondaryKnowledgeDesc>,
    },
    StageSkillDesc {
        records: Vec<SkillDesc>,
    },
    StageTargetingMatrixDesc {
        records: Vec<TargetingMatrixDesc>,
    },
    StageTeleportItemDesc {
        records: Vec<TeleportItemDesc>,
    },
    StageTerraformRecipeDesc {
        records: Vec<TerraformRecipeDesc>,
    },
    StageToolDesc {
        records: Vec<ToolDesc>,
    },
    StageToolTypeDesc {
        records: Vec<ToolTypeDesc>,
    },
    StageTravelerTaskDesc {
        records: Vec<TravelerTaskDesc>,
    },
    StageTravelerTradeOrderDesc {
        records: Vec<TravelerTradeOrderDesc>,
    },
    StageWallDesc {
        records: Vec<WallDesc>,
    },
    StageWeaponDesc {
        records: Vec<WeaponDesc>,
    },
    StageWeaponTypeDesc {
        records: Vec<WeaponTypeDesc>,
    },
    UpdateRoleForPlayer {
        player_entity_id: u64,
        role: Role,
    },
    UpdateScheduledTimersFromStaticData,
    UserModerationClearAll {
        request: UserModerationCreateUserPolicyRequest,
    },
    UserModerationCreate {
        request: UserModerationCreateUserPolicyRequest,
    },
    UserModerationDelete {
        policy_entity_id: u64,
    },
    UserModerationListAll {
        request: UserModerationCreateUserPolicyRequest,
    },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::AdminBroadcastMsg { .. } => "admin_broadcast_msg",
            Reducer::AdminGrantShards { .. } => "admin_grant_shards",
            Reducer::AdminMarkUserReportAsActioned { .. } => "admin_mark_user_report_as_actioned",
            Reducer::AdminNotifyPlayer { .. } => "admin_notify_player",
            Reducer::AdminNotifyPlayerByIdentity { .. } => "admin_notify_player_by_identity",
            Reducer::AdminRenameEmpire { .. } => "admin_rename_empire",
            Reducer::AdminRenameEmpireEntity { .. } => "admin_rename_empire_entity",
            Reducer::AdminRenameEmpireRank { .. } => "admin_rename_empire_rank",
            Reducer::AdminRenameEmpireRankEntity { .. } => "admin_rename_empire_rank_entity",
            Reducer::AdminRenamePlayer { .. } => "admin_rename_player",
            Reducer::AdminRenamePlayerEntity { .. } => "admin_rename_player_entity",
            Reducer::AdminSignOutAll { .. } => "admin_sign_out_all",
            Reducer::AdminSkipQueueEntity { .. } => "admin_skip_queue_entity",
            Reducer::AdminSkipQueueIdentity { .. } => "admin_skip_queue_identity",
            Reducer::AdminSkipQueueName { .. } => "admin_skip_queue_name",
            Reducer::AdminUpdateGrantedHubItemState { .. } => "admin_update_granted_hub_item_state",
            Reducer::AdminUpdateSignInParameters { .. } => "admin_update_sign_in_parameters",
            Reducer::Authenticate { .. } => "authenticate",
            Reducer::BlockIdentity { .. } => "block_identity",
            Reducer::CheatEmpireSiegeAddSupplies { .. } => "cheat_empire_siege_add_supplies",
            Reducer::CheatEmpireSiegeCancel { .. } => "cheat_empire_siege_cancel",
            Reducer::CheatPlayerSetName { .. } => "cheat_player_set_name",
            Reducer::CheatShardsGrant { .. } => "cheat_shards_grant",
            Reducer::ClearStagedStaticData => "clear_staged_static_data",
            Reducer::CommitStagedStaticData => "commit_staged_static_data",
            Reducer::CurrentVersion => "current_version",
            Reducer::EmpireChangeEmblem { .. } => "empire_change_emblem",
            Reducer::EmpireCraftSupplies { .. } => "empire_craft_supplies",
            Reducer::EmpireCraftSuppliesScheduled { .. } => "empire_craft_supplies_scheduled",
            Reducer::EmpireDecayAgentLoop { .. } => "empire_decay_agent_loop",
            Reducer::EmpireDismantle { .. } => "empire_dismantle",
            Reducer::EmpireDonateShards { .. } => "empire_donate_shards",
            Reducer::EmpireForm { .. } => "empire_form",
            Reducer::EmpireLeave { .. } => "empire_leave",
            Reducer::EmpireMarkForExpansion { .. } => "empire_mark_for_expansion",
            Reducer::EmpireMarkForSiege { .. } => "empire_mark_for_siege",
            Reducer::EmpirePlayerJoin { .. } => "empire_player_join",
            Reducer::EmpirePlayerLeave { .. } => "empire_player_leave",
            Reducer::EmpireSetDirectiveMessage { .. } => "empire_set_directive_message",
            Reducer::EmpireSetNobilityThreshold { .. } => "empire_set_nobility_threshold",
            Reducer::EmpireSetPlayerRank { .. } => "empire_set_player_rank",
            Reducer::EmpireSetRankTitle { .. } => "empire_set_rank_title",
            Reducer::EmpireSiegeAgentLoop { .. } => "empire_siege_agent_loop",
            Reducer::EmpireSubmit { .. } => "empire_submit",
            Reducer::EmpireTransferEmperorship { .. } => "empire_transfer_emperorship",
            Reducer::EmpireUpdatePermissions { .. } => "empire_update_permissions",
            Reducer::IdentityConnected => "identity_connected",
            Reducer::IdentityDisconnected => "identity_disconnected",
            Reducer::ImportAchievementDesc { .. } => "import_achievement_desc",
            Reducer::ImportActiveBuffState { .. } => "import_active_buff_state",
            Reducer::ImportAdminBroadcast { .. } => "import_admin_broadcast",
            Reducer::ImportAlertDesc { .. } => "import_alert_desc",
            Reducer::ImportAlertState { .. } => "import_alert_state",
            Reducer::ImportAttackOutcomeState { .. } => "import_attack_outcome_state",
            Reducer::ImportBiomeDesc { .. } => "import_biome_desc",
            Reducer::ImportBuffDesc { .. } => "import_buff_desc",
            Reducer::ImportBuffTypeDesc { .. } => "import_buff_type_desc",
            Reducer::ImportBuildingClaimDesc { .. } => "import_building_claim_desc",
            Reducer::ImportBuildingDesc { .. } => "import_building_desc",
            Reducer::ImportBuildingPortalDesc { .. } => "import_building_portal_desc",
            Reducer::ImportBuildingRepairsDesc { .. } => "import_building_repairs_desc",
            Reducer::ImportBuildingSpawnDesc { .. } => "import_building_spawn_desc",
            Reducer::ImportBuildingState { .. } => "import_building_state",
            Reducer::ImportBuildingTypeDesc { .. } => "import_building_type_desc",
            Reducer::ImportCargoDesc { .. } => "import_cargo_desc",
            Reducer::ImportCharacterStatDesc { .. } => "import_character_stat_desc",
            Reducer::ImportCharacterStatsState { .. } => "import_character_stats_state",
            Reducer::ImportChatMessageState { .. } => "import_chat_message_state",
            Reducer::ImportChestRarityDesc { .. } => "import_chest_rarity_desc",
            Reducer::ImportClaimLocalState { .. } => "import_claim_local_state",
            Reducer::ImportClaimRecruitmentState { .. } => "import_claim_recruitment_state",
            Reducer::ImportClaimState { .. } => "import_claim_state",
            Reducer::ImportClaimTechDesc { .. } => "import_claim_tech_desc",
            Reducer::ImportClaimTechState { .. } => "import_claim_tech_state",
            Reducer::ImportClaimTileCost { .. } => "import_claim_tile_cost",
            Reducer::ImportClaimTileState { .. } => "import_claim_tile_state",
            Reducer::ImportClimbRequirementDesc { .. } => "import_climb_requirement_desc",
            Reducer::ImportClothingDesc { .. } => "import_clothing_desc",
            Reducer::ImportCollectibleDesc { .. } => "import_collectible_desc",
            Reducer::ImportCombatActionDesc { .. } => "import_combat_action_desc",
            Reducer::ImportCombatState { .. } => "import_combat_state",
            Reducer::ImportConfig { .. } => "import_config",
            Reducer::ImportConstructionRecipeDesc { .. } => "import_construction_recipe_desc",
            Reducer::ImportCraftingRecipeDesc { .. } => "import_crafting_recipe_desc",
            Reducer::ImportDeconstructionRecipeDesc { .. } => "import_deconstruction_recipe_desc",
            Reducer::ImportDeployableDesc { .. } => "import_deployable_desc",
            Reducer::ImportDeployableState { .. } => "import_deployable_state",
            Reducer::ImportDimensionDescriptionState { .. } => "import_dimension_description_state",
            Reducer::ImportDimensionNetworkDescriptionState { .. } => {
                "import_dimension_network_description_state"
            }
            Reducer::ImportDistantVisibleEntityDesc { .. } => "import_distant_visible_entity_desc",
            Reducer::ImportDroppedInventoryState { .. } => "import_dropped_inventory_state",
            Reducer::ImportElevatorDesc { .. } => "import_elevator_desc",
            Reducer::ImportEmoteDesc { .. } => "import_emote_desc",
            Reducer::ImportEmpireColorsDesc { .. } => "import_empire_colors_desc",
            Reducer::ImportEmpireNotificationDesc { .. } => "import_empire_notification_desc",
            Reducer::ImportEmpireRankDesc { .. } => "import_empire_rank_desc",
            Reducer::ImportEmpireSuppliesDesc { .. } => "import_empire_supplies_desc",
            Reducer::ImportEmpireTerritoryDesc { .. } => "import_empire_territory_desc",
            Reducer::ImportEnemyAiParamsDesc { .. } => "import_enemy_ai_params_desc",
            Reducer::ImportEnemyDesc { .. } => "import_enemy_desc",
            Reducer::ImportEnemyState { .. } => "import_enemy_state",
            Reducer::ImportEnvironmentDebuffDesc { .. } => "import_environment_debuff_desc",
            Reducer::ImportEquipmentDesc { .. } => "import_equipment_desc",
            Reducer::ImportEquipmentState { .. } => "import_equipment_state",
            Reducer::ImportExperienceState { .. } => "import_experience_state",
            Reducer::ImportExplorationChunksState { .. } => "import_exploration_chunks_state",
            Reducer::ImportExtractionRecipeDesc { .. } => "import_extraction_recipe_desc",
            Reducer::ImportFoodDesc { .. } => "import_food_desc",
            Reducer::ImportFootprintTileState { .. } => "import_footprint_tile_state",
            Reducer::ImportGateDesc { .. } => "import_gate_desc",
            Reducer::ImportGlobals { .. } => "import_globals",
            Reducer::ImportGrowthState { .. } => "import_growth_state",
            Reducer::ImportHealthState { .. } => "import_health_state",
            Reducer::ImportHerdCache { .. } => "import_herd_cache",
            Reducer::ImportHexiteExchangeEntryDesc { .. } => "import_hexite_exchange_entry_desc",
            Reducer::ImportIdentityRole { .. } => "import_identity_role",
            Reducer::ImportInteriorCollapseTriggerState { .. } => {
                "import_interior_collapse_trigger_state"
            }
            Reducer::ImportInteriorInstanceDesc { .. } => "import_interior_instance_desc",
            Reducer::ImportInteriorNetworkDesc { .. } => "import_interior_network_desc",
            Reducer::ImportInteriorPortalConnectionsDesc { .. } => {
                "import_interior_portal_connections_desc"
            }
            Reducer::ImportInteriorShapeDesc { .. } => "import_interior_shape_desc",
            Reducer::ImportInteriorSpawnDesc { .. } => "import_interior_spawn_desc",
            Reducer::ImportInventoryState { .. } => "import_inventory_state",
            Reducer::ImportItemConversionRecipeDesc { .. } => "import_item_conversion_recipe_desc",
            Reducer::ImportItemDesc { .. } => "import_item_desc",
            Reducer::ImportItemListDesc { .. } => "import_item_list_desc",
            Reducer::ImportKnowledgeAchievementState { .. } => "import_knowledge_achievement_state",
            Reducer::ImportKnowledgeBattleActionState { .. } => {
                "import_knowledge_battle_action_state"
            }
            Reducer::ImportKnowledgeBuildingState { .. } => "import_knowledge_building_state",
            Reducer::ImportKnowledgeCargoState { .. } => "import_knowledge_cargo_state",
            Reducer::ImportKnowledgeConstructionState { .. } => {
                "import_knowledge_construction_state"
            }
            Reducer::ImportKnowledgeCraftState { .. } => "import_knowledge_craft_state",
            Reducer::ImportKnowledgeDeployableState { .. } => "import_knowledge_deployable_state",
            Reducer::ImportKnowledgeEnemyState { .. } => "import_knowledge_enemy_state",
            Reducer::ImportKnowledgeExtractState { .. } => "import_knowledge_extract_state",
            Reducer::ImportKnowledgeItemState { .. } => "import_knowledge_item_state",
            Reducer::ImportKnowledgeLoreState { .. } => "import_knowledge_lore_state",
            Reducer::ImportKnowledgeNpcState { .. } => "import_knowledge_npc_state",
            Reducer::ImportKnowledgePavingState { .. } => "import_knowledge_paving_state",
            Reducer::ImportKnowledgeResourcePlacementState { .. } => {
                "import_knowledge_resource_placement_state"
            }
            Reducer::ImportKnowledgeResourceState { .. } => "import_knowledge_resource_state",
            Reducer::ImportKnowledgeRuinsState { .. } => "import_knowledge_ruins_state",
            Reducer::ImportKnowledgeScrollDesc { .. } => "import_knowledge_scroll_desc",
            Reducer::ImportKnowledgeScrollTypeDesc { .. } => "import_knowledge_scroll_type_desc",
            Reducer::ImportKnowledgeSecondaryState { .. } => "import_knowledge_secondary_state",
            Reducer::ImportKnowledgeStatModifierDesc { .. } => {
                "import_knowledge_stat_modifier_desc"
            }
            Reducer::ImportKnowledgeVaultState { .. } => "import_knowledge_vault_state",
            Reducer::ImportLocationState { .. } => "import_location_state",
            Reducer::ImportLootChestDesc { .. } => "import_loot_chest_desc",
            Reducer::ImportLootChestState { .. } => "import_loot_chest_state",
            Reducer::ImportLootRarityDesc { .. } => "import_loot_rarity_desc",
            Reducer::ImportLootTableDesc { .. } => "import_loot_table_desc",
            Reducer::ImportMobileEntityState { .. } => "import_mobile_entity_state",
            Reducer::ImportMountingState { .. } => "import_mounting_state",
            Reducer::ImportNpcDesc { .. } => "import_npc_desc",
            Reducer::ImportNpcState { .. } => "import_npc_state",
            Reducer::ImportOnboardingRewardDesc { .. } => "import_onboarding_reward_desc",
            Reducer::ImportOnboardingState { .. } => "import_onboarding_state",
            Reducer::ImportParametersDesc { .. } => "import_parameters_desc",
            Reducer::ImportPathfindingDesc { .. } => "import_pathfinding_desc",
            Reducer::ImportPavedTileState { .. } => "import_paved_tile_state",
            Reducer::ImportPavingTileDesc { .. } => "import_paving_tile_desc",
            Reducer::ImportPlayerActionDesc { .. } => "import_player_action_desc",
            Reducer::ImportPlayerActionState { .. } => "import_player_action_state",
            Reducer::ImportPlayerPrefsState { .. } => "import_player_prefs_state",
            Reducer::ImportPlayerState { .. } => "import_player_state",
            Reducer::ImportPlayerVoteState { .. } => "import_player_vote_state",
            Reducer::ImportPortalState { .. } => "import_portal_state",
            Reducer::ImportPrivateParametersDesc { .. } => "import_private_parameters_desc",
            Reducer::ImportProgressiveActionState { .. } => "import_progressive_action_state",
            Reducer::ImportProjectSiteState { .. } => "import_project_site_state",
            Reducer::ImportRegionConnectionInfo { .. } => "import_region_connection_info",
            Reducer::ImportRegionSignInParameters { .. } => "import_region_sign_in_parameters",
            Reducer::ImportRentState { .. } => "import_rent_state",
            Reducer::ImportResourceClumpDesc { .. } => "import_resource_clump_desc",
            Reducer::ImportResourceCount { .. } => "import_resource_count",
            Reducer::ImportResourceDesc { .. } => "import_resource_desc",
            Reducer::ImportResourceGrowthRecipeDesc { .. } => "import_resource_growth_recipe_desc",
            Reducer::ImportResourcePlacementRecipeDesc { .. } => {
                "import_resource_placement_recipe_desc"
            }
            Reducer::ImportResourceState { .. } => "import_resource_state",
            Reducer::ImportSatiationState { .. } => "import_satiation_state",
            Reducer::ImportSecondaryKnowledgeDesc { .. } => "import_secondary_knowledge_desc",
            Reducer::ImportServerIdentity { .. } => "import_server_identity",
            Reducer::ImportSignedInPlayerState { .. } => "import_signed_in_player_state",
            Reducer::ImportSkillDesc { .. } => "import_skill_desc",
            Reducer::ImportStaminaState { .. } => "import_stamina_state",
            Reducer::ImportTargetState { .. } => "import_target_state",
            Reducer::ImportTargetableState { .. } => "import_targetable_state",
            Reducer::ImportTargetingMatrixDesc { .. } => "import_targeting_matrix_desc",
            Reducer::ImportTeleportItemDesc { .. } => "import_teleport_item_desc",
            Reducer::ImportTerraformRecipeDesc { .. } => "import_terraform_recipe_desc",
            Reducer::ImportTerrainChunkState { .. } => "import_terrain_chunk_state",
            Reducer::ImportToolDesc { .. } => "import_tool_desc",
            Reducer::ImportToolTypeDesc { .. } => "import_tool_type_desc",
            Reducer::ImportTradeOrderState { .. } => "import_trade_order_state",
            Reducer::ImportTradeSessionState { .. } => "import_trade_session_state",
            Reducer::ImportTravelerTaskDesc { .. } => "import_traveler_task_desc",
            Reducer::ImportTravelerTradeOrderDesc { .. } => "import_traveler_trade_order_desc",
            Reducer::ImportUserModerationState { .. } => "import_user_moderation_state",
            Reducer::ImportUserState { .. } => "import_user_state",
            Reducer::ImportVaultState { .. } => "import_vault_state",
            Reducer::ImportWallDesc { .. } => "import_wall_desc",
            Reducer::ImportWeaponDesc { .. } => "import_weapon_desc",
            Reducer::ImportWeaponTypeDesc { .. } => "import_weapon_type_desc",
            Reducer::ImportWorldRegionNameState { .. } => "import_world_region_name_state",
            Reducer::ImportWorldRegionState { .. } => "import_world_region_state",
            Reducer::LoadConfig { .. } => "load_config",
            Reducer::LogEmpireLeaderboard => "log_empire_leaderboard",
            Reducer::LogPlayerWith => "log_player_with_",
            Reducer::OnInterModuleMessageProcessed { .. } => "on_inter_module_message_processed",
            Reducer::PlayerClaimDailyShards => "player_claim_daily_shards",
            Reducer::PlayerCreate => "player_create",
            Reducer::PlayerDismissNotification => "player_dismiss_notification",
            Reducer::PlayerNotificationEventReducer { .. } => "player_notification_event_reducer",
            Reducer::PlayerSetName { .. } => "player_set_name",
            Reducer::PlayerVoteAnswer { .. } => "player_vote_answer",
            Reducer::PlayerVoteConclude { .. } => "player_vote_conclude",
            Reducer::ProcessInterModuleMessage { .. } => "process_inter_module_message",
            Reducer::SetRoleForIdentity { .. } => "set_role_for_identity",
            Reducer::SignIn { .. } => "sign_in",
            Reducer::StageAchievementDesc { .. } => "stage_achievement_desc",
            Reducer::StageAlertDesc { .. } => "stage_alert_desc",
            Reducer::StageBiomeDesc { .. } => "stage_biome_desc",
            Reducer::StageBuffDesc { .. } => "stage_buff_desc",
            Reducer::StageBuffTypeDesc { .. } => "stage_buff_type_desc",
            Reducer::StageBuildingClaimDesc { .. } => "stage_building_claim_desc",
            Reducer::StageBuildingDesc { .. } => "stage_building_desc",
            Reducer::StageBuildingPortalDesc { .. } => "stage_building_portal_desc",
            Reducer::StageBuildingRepairsDesc { .. } => "stage_building_repairs_desc",
            Reducer::StageBuildingSpawnDesc { .. } => "stage_building_spawn_desc",
            Reducer::StageBuildingTypeDesc { .. } => "stage_building_type_desc",
            Reducer::StageCargoDesc { .. } => "stage_cargo_desc",
            Reducer::StageCharacterStatDesc { .. } => "stage_character_stat_desc",
            Reducer::StageChestRarityDesc { .. } => "stage_chest_rarity_desc",
            Reducer::StageClaimTechDesc { .. } => "stage_claim_tech_desc",
            Reducer::StageClaimTileCost { .. } => "stage_claim_tile_cost",
            Reducer::StageClimbRequirementDesc { .. } => "stage_climb_requirement_desc",
            Reducer::StageClothingDesc { .. } => "stage_clothing_desc",
            Reducer::StageCollectibleDesc { .. } => "stage_collectible_desc",
            Reducer::StageCombatActionDesc { .. } => "stage_combat_action_desc",
            Reducer::StageConstructionRecipeDesc { .. } => "stage_construction_recipe_desc",
            Reducer::StageCraftingRecipeDesc { .. } => "stage_crafting_recipe_desc",
            Reducer::StageDeconstructionRecipeDesc { .. } => "stage_deconstruction_recipe_desc",
            Reducer::StageDeployableDesc { .. } => "stage_deployable_desc",
            Reducer::StageDistantVisibleEntityDesc { .. } => "stage_distant_visible_entity_desc",
            Reducer::StageElevatorDesc { .. } => "stage_elevator_desc",
            Reducer::StageEmoteDesc { .. } => "stage_emote_desc",
            Reducer::StageEmpireColorsDesc { .. } => "stage_empire_colors_desc",
            Reducer::StageEmpireIconDesc { .. } => "stage_empire_icon_desc",
            Reducer::StageEmpireNotificationDesc { .. } => "stage_empire_notification_desc",
            Reducer::StageEmpireRankDesc { .. } => "stage_empire_rank_desc",
            Reducer::StageEmpireSuppliesDesc { .. } => "stage_empire_supplies_desc",
            Reducer::StageEmpireTerritoryDesc { .. } => "stage_empire_territory_desc",
            Reducer::StageEnemyAiParamsDesc { .. } => "stage_enemy_ai_params_desc",
            Reducer::StageEnemyDesc { .. } => "stage_enemy_desc",
            Reducer::StageEnvironmentDebuffDesc { .. } => "stage_environment_debuff_desc",
            Reducer::StageEquipmentDesc { .. } => "stage_equipment_desc",
            Reducer::StageExtractionRecipeDesc { .. } => "stage_extraction_recipe_desc",
            Reducer::StageFoodDesc { .. } => "stage_food_desc",
            Reducer::StageGateDesc { .. } => "stage_gate_desc",
            Reducer::StageHexiteExchangeEntryDesc { .. } => "stage_hexite_exchange_entry_desc",
            Reducer::StageInteriorEnvironmentDesc { .. } => "stage_interior_environment_desc",
            Reducer::StageInteriorInstanceDesc { .. } => "stage_interior_instance_desc",
            Reducer::StageInteriorNetworkDesc { .. } => "stage_interior_network_desc",
            Reducer::StageInteriorPortalConnectionsDesc { .. } => {
                "stage_interior_portal_connections_desc"
            }
            Reducer::StageInteriorShapeDesc { .. } => "stage_interior_shape_desc",
            Reducer::StageInteriorSpawnDesc { .. } => "stage_interior_spawn_desc",
            Reducer::StageItemConversionRecipeDesc { .. } => "stage_item_conversion_recipe_desc",
            Reducer::StageItemDesc { .. } => "stage_item_desc",
            Reducer::StageItemListDesc { .. } => "stage_item_list_desc",
            Reducer::StageKnowledgeScrollDesc { .. } => "stage_knowledge_scroll_desc",
            Reducer::StageKnowledgeScrollTypeDesc { .. } => "stage_knowledge_scroll_type_desc",
            Reducer::StageKnowledgeStatModifierDesc { .. } => "stage_knowledge_stat_modifier_desc",
            Reducer::StageLootChestDesc { .. } => "stage_loot_chest_desc",
            Reducer::StageLootRarityDesc { .. } => "stage_loot_rarity_desc",
            Reducer::StageLootTableDesc { .. } => "stage_loot_table_desc",
            Reducer::StageNpcDesc { .. } => "stage_npc_desc",
            Reducer::StageOnboardingRewardDesc { .. } => "stage_onboarding_reward_desc",
            Reducer::StageParametersDesc { .. } => "stage_parameters_desc",
            Reducer::StagePathfindingDesc { .. } => "stage_pathfinding_desc",
            Reducer::StagePavingTileDesc { .. } => "stage_paving_tile_desc",
            Reducer::StagePillarShapingDesc { .. } => "stage_pillar_shaping_desc",
            Reducer::StagePlayerActionDesc { .. } => "stage_player_action_desc",
            Reducer::StagePlayerHousingDesc { .. } => "stage_player_housing_desc",
            Reducer::StagePrivateParametersDesc { .. } => "stage_private_parameters_desc",
            Reducer::StageReservedNameDesc { .. } => "stage_reserved_name_desc",
            Reducer::StageResourceClumpDesc { .. } => "stage_resource_clump_desc",
            Reducer::StageResourceDesc { .. } => "stage_resource_desc",
            Reducer::StageResourceGrowthRecipeDesc { .. } => "stage_resource_growth_recipe_desc",
            Reducer::StageResourcePlacementRecipeDesc { .. } => {
                "stage_resource_placement_recipe_desc"
            }
            Reducer::StageSecondaryKnowledgeDesc { .. } => "stage_secondary_knowledge_desc",
            Reducer::StageSkillDesc { .. } => "stage_skill_desc",
            Reducer::StageTargetingMatrixDesc { .. } => "stage_targeting_matrix_desc",
            Reducer::StageTeleportItemDesc { .. } => "stage_teleport_item_desc",
            Reducer::StageTerraformRecipeDesc { .. } => "stage_terraform_recipe_desc",
            Reducer::StageToolDesc { .. } => "stage_tool_desc",
            Reducer::StageToolTypeDesc { .. } => "stage_tool_type_desc",
            Reducer::StageTravelerTaskDesc { .. } => "stage_traveler_task_desc",
            Reducer::StageTravelerTradeOrderDesc { .. } => "stage_traveler_trade_order_desc",
            Reducer::StageWallDesc { .. } => "stage_wall_desc",
            Reducer::StageWeaponDesc { .. } => "stage_weapon_desc",
            Reducer::StageWeaponTypeDesc { .. } => "stage_weapon_type_desc",
            Reducer::UpdateRoleForPlayer { .. } => "update_role_for_player",
            Reducer::UpdateScheduledTimersFromStaticData => {
                "update_scheduled_timers_from_static_data"
            }
            Reducer::UserModerationClearAll { .. } => "user_moderation_clear_all",
            Reducer::UserModerationCreate { .. } => "user_moderation_create",
            Reducer::UserModerationDelete { .. } => "user_moderation_delete",
            Reducer::UserModerationListAll { .. } => "user_moderation_list_all",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
                        "admin_broadcast_msg" => Ok(__sdk::parse_reducer_args::<admin_broadcast_msg_reducer::AdminBroadcastMsgArgs>("admin_broadcast_msg", &value.args)?.into()),
            "admin_grant_shards" => Ok(__sdk::parse_reducer_args::<admin_grant_shards_reducer::AdminGrantShardsArgs>("admin_grant_shards", &value.args)?.into()),
            "admin_mark_user_report_as_actioned" => Ok(__sdk::parse_reducer_args::<admin_mark_user_report_as_actioned_reducer::AdminMarkUserReportAsActionedArgs>("admin_mark_user_report_as_actioned", &value.args)?.into()),
            "admin_notify_player" => Ok(__sdk::parse_reducer_args::<admin_notify_player_reducer::AdminNotifyPlayerArgs>("admin_notify_player", &value.args)?.into()),
            "admin_notify_player_by_identity" => Ok(__sdk::parse_reducer_args::<admin_notify_player_by_identity_reducer::AdminNotifyPlayerByIdentityArgs>("admin_notify_player_by_identity", &value.args)?.into()),
            "admin_rename_empire" => Ok(__sdk::parse_reducer_args::<admin_rename_empire_reducer::AdminRenameEmpireArgs>("admin_rename_empire", &value.args)?.into()),
            "admin_rename_empire_entity" => Ok(__sdk::parse_reducer_args::<admin_rename_empire_entity_reducer::AdminRenameEmpireEntityArgs>("admin_rename_empire_entity", &value.args)?.into()),
            "admin_rename_empire_rank" => Ok(__sdk::parse_reducer_args::<admin_rename_empire_rank_reducer::AdminRenameEmpireRankArgs>("admin_rename_empire_rank", &value.args)?.into()),
            "admin_rename_empire_rank_entity" => Ok(__sdk::parse_reducer_args::<admin_rename_empire_rank_entity_reducer::AdminRenameEmpireRankEntityArgs>("admin_rename_empire_rank_entity", &value.args)?.into()),
            "admin_rename_player" => Ok(__sdk::parse_reducer_args::<admin_rename_player_reducer::AdminRenamePlayerArgs>("admin_rename_player", &value.args)?.into()),
            "admin_rename_player_entity" => Ok(__sdk::parse_reducer_args::<admin_rename_player_entity_reducer::AdminRenamePlayerEntityArgs>("admin_rename_player_entity", &value.args)?.into()),
            "admin_sign_out_all" => Ok(__sdk::parse_reducer_args::<admin_sign_out_all_reducer::AdminSignOutAllArgs>("admin_sign_out_all", &value.args)?.into()),
            "admin_skip_queue_entity" => Ok(__sdk::parse_reducer_args::<admin_skip_queue_entity_reducer::AdminSkipQueueEntityArgs>("admin_skip_queue_entity", &value.args)?.into()),
            "admin_skip_queue_identity" => Ok(__sdk::parse_reducer_args::<admin_skip_queue_identity_reducer::AdminSkipQueueIdentityArgs>("admin_skip_queue_identity", &value.args)?.into()),
            "admin_skip_queue_name" => Ok(__sdk::parse_reducer_args::<admin_skip_queue_name_reducer::AdminSkipQueueNameArgs>("admin_skip_queue_name", &value.args)?.into()),
            "admin_update_granted_hub_item_state" => Ok(__sdk::parse_reducer_args::<admin_update_granted_hub_item_state_reducer::AdminUpdateGrantedHubItemStateArgs>("admin_update_granted_hub_item_state", &value.args)?.into()),
            "admin_update_sign_in_parameters" => Ok(__sdk::parse_reducer_args::<admin_update_sign_in_parameters_reducer::AdminUpdateSignInParametersArgs>("admin_update_sign_in_parameters", &value.args)?.into()),
            "authenticate" => Ok(__sdk::parse_reducer_args::<authenticate_reducer::AuthenticateArgs>("authenticate", &value.args)?.into()),
            "block_identity" => Ok(__sdk::parse_reducer_args::<block_identity_reducer::BlockIdentityArgs>("block_identity", &value.args)?.into()),
            "cheat_empire_siege_add_supplies" => Ok(__sdk::parse_reducer_args::<cheat_empire_siege_add_supplies_reducer::CheatEmpireSiegeAddSuppliesArgs>("cheat_empire_siege_add_supplies", &value.args)?.into()),
            "cheat_empire_siege_cancel" => Ok(__sdk::parse_reducer_args::<cheat_empire_siege_cancel_reducer::CheatEmpireSiegeCancelArgs>("cheat_empire_siege_cancel", &value.args)?.into()),
            "cheat_player_set_name" => Ok(__sdk::parse_reducer_args::<cheat_player_set_name_reducer::CheatPlayerSetNameArgs>("cheat_player_set_name", &value.args)?.into()),
            "cheat_shards_grant" => Ok(__sdk::parse_reducer_args::<cheat_shards_grant_reducer::CheatShardsGrantArgs>("cheat_shards_grant", &value.args)?.into()),
            "clear_staged_static_data" => Ok(__sdk::parse_reducer_args::<clear_staged_static_data_reducer::ClearStagedStaticDataArgs>("clear_staged_static_data", &value.args)?.into()),
            "commit_staged_static_data" => Ok(__sdk::parse_reducer_args::<commit_staged_static_data_reducer::CommitStagedStaticDataArgs>("commit_staged_static_data", &value.args)?.into()),
            "current_version" => Ok(__sdk::parse_reducer_args::<current_version_reducer::CurrentVersionArgs>("current_version", &value.args)?.into()),
            "empire_change_emblem" => Ok(__sdk::parse_reducer_args::<empire_change_emblem_reducer::EmpireChangeEmblemArgs>("empire_change_emblem", &value.args)?.into()),
            "empire_craft_supplies" => Ok(__sdk::parse_reducer_args::<empire_craft_supplies_reducer::EmpireCraftSuppliesArgs>("empire_craft_supplies", &value.args)?.into()),
            "empire_craft_supplies_scheduled" => Ok(__sdk::parse_reducer_args::<empire_craft_supplies_scheduled_reducer::EmpireCraftSuppliesScheduledArgs>("empire_craft_supplies_scheduled", &value.args)?.into()),
            "empire_decay_agent_loop" => Ok(__sdk::parse_reducer_args::<empire_decay_agent_loop_reducer::EmpireDecayAgentLoopArgs>("empire_decay_agent_loop", &value.args)?.into()),
            "empire_dismantle" => Ok(__sdk::parse_reducer_args::<empire_dismantle_reducer::EmpireDismantleArgs>("empire_dismantle", &value.args)?.into()),
            "empire_donate_shards" => Ok(__sdk::parse_reducer_args::<empire_donate_shards_reducer::EmpireDonateShardsArgs>("empire_donate_shards", &value.args)?.into()),
            "empire_form" => Ok(__sdk::parse_reducer_args::<empire_form_reducer::EmpireFormArgs>("empire_form", &value.args)?.into()),
            "empire_leave" => Ok(__sdk::parse_reducer_args::<empire_leave_reducer::EmpireLeaveArgs>("empire_leave", &value.args)?.into()),
            "empire_mark_for_expansion" => Ok(__sdk::parse_reducer_args::<empire_mark_for_expansion_reducer::EmpireMarkForExpansionArgs>("empire_mark_for_expansion", &value.args)?.into()),
            "empire_mark_for_siege" => Ok(__sdk::parse_reducer_args::<empire_mark_for_siege_reducer::EmpireMarkForSiegeArgs>("empire_mark_for_siege", &value.args)?.into()),
            "empire_player_join" => Ok(__sdk::parse_reducer_args::<empire_player_join_reducer::EmpirePlayerJoinArgs>("empire_player_join", &value.args)?.into()),
            "empire_player_leave" => Ok(__sdk::parse_reducer_args::<empire_player_leave_reducer::EmpirePlayerLeaveArgs>("empire_player_leave", &value.args)?.into()),
            "empire_set_directive_message" => Ok(__sdk::parse_reducer_args::<empire_set_directive_message_reducer::EmpireSetDirectiveMessageArgs>("empire_set_directive_message", &value.args)?.into()),
            "empire_set_nobility_threshold" => Ok(__sdk::parse_reducer_args::<empire_set_nobility_threshold_reducer::EmpireSetNobilityThresholdArgs>("empire_set_nobility_threshold", &value.args)?.into()),
            "empire_set_player_rank" => Ok(__sdk::parse_reducer_args::<empire_set_player_rank_reducer::EmpireSetPlayerRankArgs>("empire_set_player_rank", &value.args)?.into()),
            "empire_set_rank_title" => Ok(__sdk::parse_reducer_args::<empire_set_rank_title_reducer::EmpireSetRankTitleArgs>("empire_set_rank_title", &value.args)?.into()),
            "empire_siege_agent_loop" => Ok(__sdk::parse_reducer_args::<empire_siege_agent_loop_reducer::EmpireSiegeAgentLoopArgs>("empire_siege_agent_loop", &value.args)?.into()),
            "empire_submit" => Ok(__sdk::parse_reducer_args::<empire_submit_reducer::EmpireSubmitArgs>("empire_submit", &value.args)?.into()),
            "empire_transfer_emperorship" => Ok(__sdk::parse_reducer_args::<empire_transfer_emperorship_reducer::EmpireTransferEmperorshipArgs>("empire_transfer_emperorship", &value.args)?.into()),
            "empire_update_permissions" => Ok(__sdk::parse_reducer_args::<empire_update_permissions_reducer::EmpireUpdatePermissionsArgs>("empire_update_permissions", &value.args)?.into()),
            "identity_connected" => Ok(__sdk::parse_reducer_args::<identity_connected_reducer::IdentityConnectedArgs>("identity_connected", &value.args)?.into()),
            "identity_disconnected" => Ok(__sdk::parse_reducer_args::<identity_disconnected_reducer::IdentityDisconnectedArgs>("identity_disconnected", &value.args)?.into()),
            "import_achievement_desc" => Ok(__sdk::parse_reducer_args::<import_achievement_desc_reducer::ImportAchievementDescArgs>("import_achievement_desc", &value.args)?.into()),
            "import_active_buff_state" => Ok(__sdk::parse_reducer_args::<import_active_buff_state_reducer::ImportActiveBuffStateArgs>("import_active_buff_state", &value.args)?.into()),
            "import_admin_broadcast" => Ok(__sdk::parse_reducer_args::<import_admin_broadcast_reducer::ImportAdminBroadcastArgs>("import_admin_broadcast", &value.args)?.into()),
            "import_alert_desc" => Ok(__sdk::parse_reducer_args::<import_alert_desc_reducer::ImportAlertDescArgs>("import_alert_desc", &value.args)?.into()),
            "import_alert_state" => Ok(__sdk::parse_reducer_args::<import_alert_state_reducer::ImportAlertStateArgs>("import_alert_state", &value.args)?.into()),
            "import_attack_outcome_state" => Ok(__sdk::parse_reducer_args::<import_attack_outcome_state_reducer::ImportAttackOutcomeStateArgs>("import_attack_outcome_state", &value.args)?.into()),
            "import_biome_desc" => Ok(__sdk::parse_reducer_args::<import_biome_desc_reducer::ImportBiomeDescArgs>("import_biome_desc", &value.args)?.into()),
            "import_buff_desc" => Ok(__sdk::parse_reducer_args::<import_buff_desc_reducer::ImportBuffDescArgs>("import_buff_desc", &value.args)?.into()),
            "import_buff_type_desc" => Ok(__sdk::parse_reducer_args::<import_buff_type_desc_reducer::ImportBuffTypeDescArgs>("import_buff_type_desc", &value.args)?.into()),
            "import_building_claim_desc" => Ok(__sdk::parse_reducer_args::<import_building_claim_desc_reducer::ImportBuildingClaimDescArgs>("import_building_claim_desc", &value.args)?.into()),
            "import_building_desc" => Ok(__sdk::parse_reducer_args::<import_building_desc_reducer::ImportBuildingDescArgs>("import_building_desc", &value.args)?.into()),
            "import_building_portal_desc" => Ok(__sdk::parse_reducer_args::<import_building_portal_desc_reducer::ImportBuildingPortalDescArgs>("import_building_portal_desc", &value.args)?.into()),
            "import_building_repairs_desc" => Ok(__sdk::parse_reducer_args::<import_building_repairs_desc_reducer::ImportBuildingRepairsDescArgs>("import_building_repairs_desc", &value.args)?.into()),
            "import_building_spawn_desc" => Ok(__sdk::parse_reducer_args::<import_building_spawn_desc_reducer::ImportBuildingSpawnDescArgs>("import_building_spawn_desc", &value.args)?.into()),
            "import_building_state" => Ok(__sdk::parse_reducer_args::<import_building_state_reducer::ImportBuildingStateArgs>("import_building_state", &value.args)?.into()),
            "import_building_type_desc" => Ok(__sdk::parse_reducer_args::<import_building_type_desc_reducer::ImportBuildingTypeDescArgs>("import_building_type_desc", &value.args)?.into()),
            "import_cargo_desc" => Ok(__sdk::parse_reducer_args::<import_cargo_desc_reducer::ImportCargoDescArgs>("import_cargo_desc", &value.args)?.into()),
            "import_character_stat_desc" => Ok(__sdk::parse_reducer_args::<import_character_stat_desc_reducer::ImportCharacterStatDescArgs>("import_character_stat_desc", &value.args)?.into()),
            "import_character_stats_state" => Ok(__sdk::parse_reducer_args::<import_character_stats_state_reducer::ImportCharacterStatsStateArgs>("import_character_stats_state", &value.args)?.into()),
            "import_chat_message_state" => Ok(__sdk::parse_reducer_args::<import_chat_message_state_reducer::ImportChatMessageStateArgs>("import_chat_message_state", &value.args)?.into()),
            "import_chest_rarity_desc" => Ok(__sdk::parse_reducer_args::<import_chest_rarity_desc_reducer::ImportChestRarityDescArgs>("import_chest_rarity_desc", &value.args)?.into()),
            "import_claim_local_state" => Ok(__sdk::parse_reducer_args::<import_claim_local_state_reducer::ImportClaimLocalStateArgs>("import_claim_local_state", &value.args)?.into()),
            "import_claim_recruitment_state" => Ok(__sdk::parse_reducer_args::<import_claim_recruitment_state_reducer::ImportClaimRecruitmentStateArgs>("import_claim_recruitment_state", &value.args)?.into()),
            "import_claim_state" => Ok(__sdk::parse_reducer_args::<import_claim_state_reducer::ImportClaimStateArgs>("import_claim_state", &value.args)?.into()),
            "import_claim_tech_desc" => Ok(__sdk::parse_reducer_args::<import_claim_tech_desc_reducer::ImportClaimTechDescArgs>("import_claim_tech_desc", &value.args)?.into()),
            "import_claim_tech_state" => Ok(__sdk::parse_reducer_args::<import_claim_tech_state_reducer::ImportClaimTechStateArgs>("import_claim_tech_state", &value.args)?.into()),
            "import_claim_tile_cost" => Ok(__sdk::parse_reducer_args::<import_claim_tile_cost_reducer::ImportClaimTileCostArgs>("import_claim_tile_cost", &value.args)?.into()),
            "import_claim_tile_state" => Ok(__sdk::parse_reducer_args::<import_claim_tile_state_reducer::ImportClaimTileStateArgs>("import_claim_tile_state", &value.args)?.into()),
            "import_climb_requirement_desc" => Ok(__sdk::parse_reducer_args::<import_climb_requirement_desc_reducer::ImportClimbRequirementDescArgs>("import_climb_requirement_desc", &value.args)?.into()),
            "import_clothing_desc" => Ok(__sdk::parse_reducer_args::<import_clothing_desc_reducer::ImportClothingDescArgs>("import_clothing_desc", &value.args)?.into()),
            "import_collectible_desc" => Ok(__sdk::parse_reducer_args::<import_collectible_desc_reducer::ImportCollectibleDescArgs>("import_collectible_desc", &value.args)?.into()),
            "import_combat_action_desc" => Ok(__sdk::parse_reducer_args::<import_combat_action_desc_reducer::ImportCombatActionDescArgs>("import_combat_action_desc", &value.args)?.into()),
            "import_combat_state" => Ok(__sdk::parse_reducer_args::<import_combat_state_reducer::ImportCombatStateArgs>("import_combat_state", &value.args)?.into()),
            "import_config" => Ok(__sdk::parse_reducer_args::<import_config_reducer::ImportConfigArgs>("import_config", &value.args)?.into()),
            "import_construction_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_construction_recipe_desc_reducer::ImportConstructionRecipeDescArgs>("import_construction_recipe_desc", &value.args)?.into()),
            "import_crafting_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_crafting_recipe_desc_reducer::ImportCraftingRecipeDescArgs>("import_crafting_recipe_desc", &value.args)?.into()),
            "import_deconstruction_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_deconstruction_recipe_desc_reducer::ImportDeconstructionRecipeDescArgs>("import_deconstruction_recipe_desc", &value.args)?.into()),
            "import_deployable_desc" => Ok(__sdk::parse_reducer_args::<import_deployable_desc_reducer::ImportDeployableDescArgs>("import_deployable_desc", &value.args)?.into()),
            "import_deployable_state" => Ok(__sdk::parse_reducer_args::<import_deployable_state_reducer::ImportDeployableStateArgs>("import_deployable_state", &value.args)?.into()),
            "import_dimension_description_state" => Ok(__sdk::parse_reducer_args::<import_dimension_description_state_reducer::ImportDimensionDescriptionStateArgs>("import_dimension_description_state", &value.args)?.into()),
            "import_dimension_network_description_state" => Ok(__sdk::parse_reducer_args::<import_dimension_network_description_state_reducer::ImportDimensionNetworkDescriptionStateArgs>("import_dimension_network_description_state", &value.args)?.into()),
            "import_distant_visible_entity_desc" => Ok(__sdk::parse_reducer_args::<import_distant_visible_entity_desc_reducer::ImportDistantVisibleEntityDescArgs>("import_distant_visible_entity_desc", &value.args)?.into()),
            "import_dropped_inventory_state" => Ok(__sdk::parse_reducer_args::<import_dropped_inventory_state_reducer::ImportDroppedInventoryStateArgs>("import_dropped_inventory_state", &value.args)?.into()),
            "import_elevator_desc" => Ok(__sdk::parse_reducer_args::<import_elevator_desc_reducer::ImportElevatorDescArgs>("import_elevator_desc", &value.args)?.into()),
            "import_emote_desc" => Ok(__sdk::parse_reducer_args::<import_emote_desc_reducer::ImportEmoteDescArgs>("import_emote_desc", &value.args)?.into()),
            "import_empire_colors_desc" => Ok(__sdk::parse_reducer_args::<import_empire_colors_desc_reducer::ImportEmpireColorsDescArgs>("import_empire_colors_desc", &value.args)?.into()),
            "import_empire_notification_desc" => Ok(__sdk::parse_reducer_args::<import_empire_notification_desc_reducer::ImportEmpireNotificationDescArgs>("import_empire_notification_desc", &value.args)?.into()),
            "import_empire_rank_desc" => Ok(__sdk::parse_reducer_args::<import_empire_rank_desc_reducer::ImportEmpireRankDescArgs>("import_empire_rank_desc", &value.args)?.into()),
            "import_empire_supplies_desc" => Ok(__sdk::parse_reducer_args::<import_empire_supplies_desc_reducer::ImportEmpireSuppliesDescArgs>("import_empire_supplies_desc", &value.args)?.into()),
            "import_empire_territory_desc" => Ok(__sdk::parse_reducer_args::<import_empire_territory_desc_reducer::ImportEmpireTerritoryDescArgs>("import_empire_territory_desc", &value.args)?.into()),
            "import_enemy_ai_params_desc" => Ok(__sdk::parse_reducer_args::<import_enemy_ai_params_desc_reducer::ImportEnemyAiParamsDescArgs>("import_enemy_ai_params_desc", &value.args)?.into()),
            "import_enemy_desc" => Ok(__sdk::parse_reducer_args::<import_enemy_desc_reducer::ImportEnemyDescArgs>("import_enemy_desc", &value.args)?.into()),
            "import_enemy_state" => Ok(__sdk::parse_reducer_args::<import_enemy_state_reducer::ImportEnemyStateArgs>("import_enemy_state", &value.args)?.into()),
            "import_environment_debuff_desc" => Ok(__sdk::parse_reducer_args::<import_environment_debuff_desc_reducer::ImportEnvironmentDebuffDescArgs>("import_environment_debuff_desc", &value.args)?.into()),
            "import_equipment_desc" => Ok(__sdk::parse_reducer_args::<import_equipment_desc_reducer::ImportEquipmentDescArgs>("import_equipment_desc", &value.args)?.into()),
            "import_equipment_state" => Ok(__sdk::parse_reducer_args::<import_equipment_state_reducer::ImportEquipmentStateArgs>("import_equipment_state", &value.args)?.into()),
            "import_experience_state" => Ok(__sdk::parse_reducer_args::<import_experience_state_reducer::ImportExperienceStateArgs>("import_experience_state", &value.args)?.into()),
            "import_exploration_chunks_state" => Ok(__sdk::parse_reducer_args::<import_exploration_chunks_state_reducer::ImportExplorationChunksStateArgs>("import_exploration_chunks_state", &value.args)?.into()),
            "import_extraction_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_extraction_recipe_desc_reducer::ImportExtractionRecipeDescArgs>("import_extraction_recipe_desc", &value.args)?.into()),
            "import_food_desc" => Ok(__sdk::parse_reducer_args::<import_food_desc_reducer::ImportFoodDescArgs>("import_food_desc", &value.args)?.into()),
            "import_footprint_tile_state" => Ok(__sdk::parse_reducer_args::<import_footprint_tile_state_reducer::ImportFootprintTileStateArgs>("import_footprint_tile_state", &value.args)?.into()),
            "import_gate_desc" => Ok(__sdk::parse_reducer_args::<import_gate_desc_reducer::ImportGateDescArgs>("import_gate_desc", &value.args)?.into()),
            "import_globals" => Ok(__sdk::parse_reducer_args::<import_globals_reducer::ImportGlobalsArgs>("import_globals", &value.args)?.into()),
            "import_growth_state" => Ok(__sdk::parse_reducer_args::<import_growth_state_reducer::ImportGrowthStateArgs>("import_growth_state", &value.args)?.into()),
            "import_health_state" => Ok(__sdk::parse_reducer_args::<import_health_state_reducer::ImportHealthStateArgs>("import_health_state", &value.args)?.into()),
            "import_herd_cache" => Ok(__sdk::parse_reducer_args::<import_herd_cache_reducer::ImportHerdCacheArgs>("import_herd_cache", &value.args)?.into()),
            "import_hexite_exchange_entry_desc" => Ok(__sdk::parse_reducer_args::<import_hexite_exchange_entry_desc_reducer::ImportHexiteExchangeEntryDescArgs>("import_hexite_exchange_entry_desc", &value.args)?.into()),
            "import_identity_role" => Ok(__sdk::parse_reducer_args::<import_identity_role_reducer::ImportIdentityRoleArgs>("import_identity_role", &value.args)?.into()),
            "import_interior_collapse_trigger_state" => Ok(__sdk::parse_reducer_args::<import_interior_collapse_trigger_state_reducer::ImportInteriorCollapseTriggerStateArgs>("import_interior_collapse_trigger_state", &value.args)?.into()),
            "import_interior_instance_desc" => Ok(__sdk::parse_reducer_args::<import_interior_instance_desc_reducer::ImportInteriorInstanceDescArgs>("import_interior_instance_desc", &value.args)?.into()),
            "import_interior_network_desc" => Ok(__sdk::parse_reducer_args::<import_interior_network_desc_reducer::ImportInteriorNetworkDescArgs>("import_interior_network_desc", &value.args)?.into()),
            "import_interior_portal_connections_desc" => Ok(__sdk::parse_reducer_args::<import_interior_portal_connections_desc_reducer::ImportInteriorPortalConnectionsDescArgs>("import_interior_portal_connections_desc", &value.args)?.into()),
            "import_interior_shape_desc" => Ok(__sdk::parse_reducer_args::<import_interior_shape_desc_reducer::ImportInteriorShapeDescArgs>("import_interior_shape_desc", &value.args)?.into()),
            "import_interior_spawn_desc" => Ok(__sdk::parse_reducer_args::<import_interior_spawn_desc_reducer::ImportInteriorSpawnDescArgs>("import_interior_spawn_desc", &value.args)?.into()),
            "import_inventory_state" => Ok(__sdk::parse_reducer_args::<import_inventory_state_reducer::ImportInventoryStateArgs>("import_inventory_state", &value.args)?.into()),
            "import_item_conversion_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_item_conversion_recipe_desc_reducer::ImportItemConversionRecipeDescArgs>("import_item_conversion_recipe_desc", &value.args)?.into()),
            "import_item_desc" => Ok(__sdk::parse_reducer_args::<import_item_desc_reducer::ImportItemDescArgs>("import_item_desc", &value.args)?.into()),
            "import_item_list_desc" => Ok(__sdk::parse_reducer_args::<import_item_list_desc_reducer::ImportItemListDescArgs>("import_item_list_desc", &value.args)?.into()),
            "import_knowledge_achievement_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_achievement_state_reducer::ImportKnowledgeAchievementStateArgs>("import_knowledge_achievement_state", &value.args)?.into()),
            "import_knowledge_battle_action_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_battle_action_state_reducer::ImportKnowledgeBattleActionStateArgs>("import_knowledge_battle_action_state", &value.args)?.into()),
            "import_knowledge_building_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_building_state_reducer::ImportKnowledgeBuildingStateArgs>("import_knowledge_building_state", &value.args)?.into()),
            "import_knowledge_cargo_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_cargo_state_reducer::ImportKnowledgeCargoStateArgs>("import_knowledge_cargo_state", &value.args)?.into()),
            "import_knowledge_construction_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_construction_state_reducer::ImportKnowledgeConstructionStateArgs>("import_knowledge_construction_state", &value.args)?.into()),
            "import_knowledge_craft_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_craft_state_reducer::ImportKnowledgeCraftStateArgs>("import_knowledge_craft_state", &value.args)?.into()),
            "import_knowledge_deployable_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_deployable_state_reducer::ImportKnowledgeDeployableStateArgs>("import_knowledge_deployable_state", &value.args)?.into()),
            "import_knowledge_enemy_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_enemy_state_reducer::ImportKnowledgeEnemyStateArgs>("import_knowledge_enemy_state", &value.args)?.into()),
            "import_knowledge_extract_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_extract_state_reducer::ImportKnowledgeExtractStateArgs>("import_knowledge_extract_state", &value.args)?.into()),
            "import_knowledge_item_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_item_state_reducer::ImportKnowledgeItemStateArgs>("import_knowledge_item_state", &value.args)?.into()),
            "import_knowledge_lore_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_lore_state_reducer::ImportKnowledgeLoreStateArgs>("import_knowledge_lore_state", &value.args)?.into()),
            "import_knowledge_npc_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_npc_state_reducer::ImportKnowledgeNpcStateArgs>("import_knowledge_npc_state", &value.args)?.into()),
            "import_knowledge_paving_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_paving_state_reducer::ImportKnowledgePavingStateArgs>("import_knowledge_paving_state", &value.args)?.into()),
            "import_knowledge_resource_placement_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_resource_placement_state_reducer::ImportKnowledgeResourcePlacementStateArgs>("import_knowledge_resource_placement_state", &value.args)?.into()),
            "import_knowledge_resource_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_resource_state_reducer::ImportKnowledgeResourceStateArgs>("import_knowledge_resource_state", &value.args)?.into()),
            "import_knowledge_ruins_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_ruins_state_reducer::ImportKnowledgeRuinsStateArgs>("import_knowledge_ruins_state", &value.args)?.into()),
            "import_knowledge_scroll_desc" => Ok(__sdk::parse_reducer_args::<import_knowledge_scroll_desc_reducer::ImportKnowledgeScrollDescArgs>("import_knowledge_scroll_desc", &value.args)?.into()),
            "import_knowledge_scroll_type_desc" => Ok(__sdk::parse_reducer_args::<import_knowledge_scroll_type_desc_reducer::ImportKnowledgeScrollTypeDescArgs>("import_knowledge_scroll_type_desc", &value.args)?.into()),
            "import_knowledge_secondary_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_secondary_state_reducer::ImportKnowledgeSecondaryStateArgs>("import_knowledge_secondary_state", &value.args)?.into()),
            "import_knowledge_stat_modifier_desc" => Ok(__sdk::parse_reducer_args::<import_knowledge_stat_modifier_desc_reducer::ImportKnowledgeStatModifierDescArgs>("import_knowledge_stat_modifier_desc", &value.args)?.into()),
            "import_knowledge_vault_state" => Ok(__sdk::parse_reducer_args::<import_knowledge_vault_state_reducer::ImportKnowledgeVaultStateArgs>("import_knowledge_vault_state", &value.args)?.into()),
            "import_location_state" => Ok(__sdk::parse_reducer_args::<import_location_state_reducer::ImportLocationStateArgs>("import_location_state", &value.args)?.into()),
            "import_loot_chest_desc" => Ok(__sdk::parse_reducer_args::<import_loot_chest_desc_reducer::ImportLootChestDescArgs>("import_loot_chest_desc", &value.args)?.into()),
            "import_loot_chest_state" => Ok(__sdk::parse_reducer_args::<import_loot_chest_state_reducer::ImportLootChestStateArgs>("import_loot_chest_state", &value.args)?.into()),
            "import_loot_rarity_desc" => Ok(__sdk::parse_reducer_args::<import_loot_rarity_desc_reducer::ImportLootRarityDescArgs>("import_loot_rarity_desc", &value.args)?.into()),
            "import_loot_table_desc" => Ok(__sdk::parse_reducer_args::<import_loot_table_desc_reducer::ImportLootTableDescArgs>("import_loot_table_desc", &value.args)?.into()),
            "import_mobile_entity_state" => Ok(__sdk::parse_reducer_args::<import_mobile_entity_state_reducer::ImportMobileEntityStateArgs>("import_mobile_entity_state", &value.args)?.into()),
            "import_mounting_state" => Ok(__sdk::parse_reducer_args::<import_mounting_state_reducer::ImportMountingStateArgs>("import_mounting_state", &value.args)?.into()),
            "import_npc_desc" => Ok(__sdk::parse_reducer_args::<import_npc_desc_reducer::ImportNpcDescArgs>("import_npc_desc", &value.args)?.into()),
            "import_npc_state" => Ok(__sdk::parse_reducer_args::<import_npc_state_reducer::ImportNpcStateArgs>("import_npc_state", &value.args)?.into()),
            "import_onboarding_reward_desc" => Ok(__sdk::parse_reducer_args::<import_onboarding_reward_desc_reducer::ImportOnboardingRewardDescArgs>("import_onboarding_reward_desc", &value.args)?.into()),
            "import_onboarding_state" => Ok(__sdk::parse_reducer_args::<import_onboarding_state_reducer::ImportOnboardingStateArgs>("import_onboarding_state", &value.args)?.into()),
            "import_parameters_desc" => Ok(__sdk::parse_reducer_args::<import_parameters_desc_reducer::ImportParametersDescArgs>("import_parameters_desc", &value.args)?.into()),
            "import_pathfinding_desc" => Ok(__sdk::parse_reducer_args::<import_pathfinding_desc_reducer::ImportPathfindingDescArgs>("import_pathfinding_desc", &value.args)?.into()),
            "import_paved_tile_state" => Ok(__sdk::parse_reducer_args::<import_paved_tile_state_reducer::ImportPavedTileStateArgs>("import_paved_tile_state", &value.args)?.into()),
            "import_paving_tile_desc" => Ok(__sdk::parse_reducer_args::<import_paving_tile_desc_reducer::ImportPavingTileDescArgs>("import_paving_tile_desc", &value.args)?.into()),
            "import_player_action_desc" => Ok(__sdk::parse_reducer_args::<import_player_action_desc_reducer::ImportPlayerActionDescArgs>("import_player_action_desc", &value.args)?.into()),
            "import_player_action_state" => Ok(__sdk::parse_reducer_args::<import_player_action_state_reducer::ImportPlayerActionStateArgs>("import_player_action_state", &value.args)?.into()),
            "import_player_prefs_state" => Ok(__sdk::parse_reducer_args::<import_player_prefs_state_reducer::ImportPlayerPrefsStateArgs>("import_player_prefs_state", &value.args)?.into()),
            "import_player_state" => Ok(__sdk::parse_reducer_args::<import_player_state_reducer::ImportPlayerStateArgs>("import_player_state", &value.args)?.into()),
            "import_player_vote_state" => Ok(__sdk::parse_reducer_args::<import_player_vote_state_reducer::ImportPlayerVoteStateArgs>("import_player_vote_state", &value.args)?.into()),
            "import_portal_state" => Ok(__sdk::parse_reducer_args::<import_portal_state_reducer::ImportPortalStateArgs>("import_portal_state", &value.args)?.into()),
            "import_private_parameters_desc" => Ok(__sdk::parse_reducer_args::<import_private_parameters_desc_reducer::ImportPrivateParametersDescArgs>("import_private_parameters_desc", &value.args)?.into()),
            "import_progressive_action_state" => Ok(__sdk::parse_reducer_args::<import_progressive_action_state_reducer::ImportProgressiveActionStateArgs>("import_progressive_action_state", &value.args)?.into()),
            "import_project_site_state" => Ok(__sdk::parse_reducer_args::<import_project_site_state_reducer::ImportProjectSiteStateArgs>("import_project_site_state", &value.args)?.into()),
            "import_region_connection_info" => Ok(__sdk::parse_reducer_args::<import_region_connection_info_reducer::ImportRegionConnectionInfoArgs>("import_region_connection_info", &value.args)?.into()),
            "import_region_sign_in_parameters" => Ok(__sdk::parse_reducer_args::<import_region_sign_in_parameters_reducer::ImportRegionSignInParametersArgs>("import_region_sign_in_parameters", &value.args)?.into()),
            "import_rent_state" => Ok(__sdk::parse_reducer_args::<import_rent_state_reducer::ImportRentStateArgs>("import_rent_state", &value.args)?.into()),
            "import_resource_clump_desc" => Ok(__sdk::parse_reducer_args::<import_resource_clump_desc_reducer::ImportResourceClumpDescArgs>("import_resource_clump_desc", &value.args)?.into()),
            "import_resource_count" => Ok(__sdk::parse_reducer_args::<import_resource_count_reducer::ImportResourceCountArgs>("import_resource_count", &value.args)?.into()),
            "import_resource_desc" => Ok(__sdk::parse_reducer_args::<import_resource_desc_reducer::ImportResourceDescArgs>("import_resource_desc", &value.args)?.into()),
            "import_resource_growth_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_resource_growth_recipe_desc_reducer::ImportResourceGrowthRecipeDescArgs>("import_resource_growth_recipe_desc", &value.args)?.into()),
            "import_resource_placement_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_resource_placement_recipe_desc_reducer::ImportResourcePlacementRecipeDescArgs>("import_resource_placement_recipe_desc", &value.args)?.into()),
            "import_resource_state" => Ok(__sdk::parse_reducer_args::<import_resource_state_reducer::ImportResourceStateArgs>("import_resource_state", &value.args)?.into()),
            "import_satiation_state" => Ok(__sdk::parse_reducer_args::<import_satiation_state_reducer::ImportSatiationStateArgs>("import_satiation_state", &value.args)?.into()),
            "import_secondary_knowledge_desc" => Ok(__sdk::parse_reducer_args::<import_secondary_knowledge_desc_reducer::ImportSecondaryKnowledgeDescArgs>("import_secondary_knowledge_desc", &value.args)?.into()),
            "import_server_identity" => Ok(__sdk::parse_reducer_args::<import_server_identity_reducer::ImportServerIdentityArgs>("import_server_identity", &value.args)?.into()),
            "import_signed_in_player_state" => Ok(__sdk::parse_reducer_args::<import_signed_in_player_state_reducer::ImportSignedInPlayerStateArgs>("import_signed_in_player_state", &value.args)?.into()),
            "import_skill_desc" => Ok(__sdk::parse_reducer_args::<import_skill_desc_reducer::ImportSkillDescArgs>("import_skill_desc", &value.args)?.into()),
            "import_stamina_state" => Ok(__sdk::parse_reducer_args::<import_stamina_state_reducer::ImportStaminaStateArgs>("import_stamina_state", &value.args)?.into()),
            "import_target_state" => Ok(__sdk::parse_reducer_args::<import_target_state_reducer::ImportTargetStateArgs>("import_target_state", &value.args)?.into()),
            "import_targetable_state" => Ok(__sdk::parse_reducer_args::<import_targetable_state_reducer::ImportTargetableStateArgs>("import_targetable_state", &value.args)?.into()),
            "import_targeting_matrix_desc" => Ok(__sdk::parse_reducer_args::<import_targeting_matrix_desc_reducer::ImportTargetingMatrixDescArgs>("import_targeting_matrix_desc", &value.args)?.into()),
            "import_teleport_item_desc" => Ok(__sdk::parse_reducer_args::<import_teleport_item_desc_reducer::ImportTeleportItemDescArgs>("import_teleport_item_desc", &value.args)?.into()),
            "import_terraform_recipe_desc" => Ok(__sdk::parse_reducer_args::<import_terraform_recipe_desc_reducer::ImportTerraformRecipeDescArgs>("import_terraform_recipe_desc", &value.args)?.into()),
            "import_terrain_chunk_state" => Ok(__sdk::parse_reducer_args::<import_terrain_chunk_state_reducer::ImportTerrainChunkStateArgs>("import_terrain_chunk_state", &value.args)?.into()),
            "import_tool_desc" => Ok(__sdk::parse_reducer_args::<import_tool_desc_reducer::ImportToolDescArgs>("import_tool_desc", &value.args)?.into()),
            "import_tool_type_desc" => Ok(__sdk::parse_reducer_args::<import_tool_type_desc_reducer::ImportToolTypeDescArgs>("import_tool_type_desc", &value.args)?.into()),
            "import_trade_order_state" => Ok(__sdk::parse_reducer_args::<import_trade_order_state_reducer::ImportTradeOrderStateArgs>("import_trade_order_state", &value.args)?.into()),
            "import_trade_session_state" => Ok(__sdk::parse_reducer_args::<import_trade_session_state_reducer::ImportTradeSessionStateArgs>("import_trade_session_state", &value.args)?.into()),
            "import_traveler_task_desc" => Ok(__sdk::parse_reducer_args::<import_traveler_task_desc_reducer::ImportTravelerTaskDescArgs>("import_traveler_task_desc", &value.args)?.into()),
            "import_traveler_trade_order_desc" => Ok(__sdk::parse_reducer_args::<import_traveler_trade_order_desc_reducer::ImportTravelerTradeOrderDescArgs>("import_traveler_trade_order_desc", &value.args)?.into()),
            "import_user_moderation_state" => Ok(__sdk::parse_reducer_args::<import_user_moderation_state_reducer::ImportUserModerationStateArgs>("import_user_moderation_state", &value.args)?.into()),
            "import_user_state" => Ok(__sdk::parse_reducer_args::<import_user_state_reducer::ImportUserStateArgs>("import_user_state", &value.args)?.into()),
            "import_vault_state" => Ok(__sdk::parse_reducer_args::<import_vault_state_reducer::ImportVaultStateArgs>("import_vault_state", &value.args)?.into()),
            "import_wall_desc" => Ok(__sdk::parse_reducer_args::<import_wall_desc_reducer::ImportWallDescArgs>("import_wall_desc", &value.args)?.into()),
            "import_weapon_desc" => Ok(__sdk::parse_reducer_args::<import_weapon_desc_reducer::ImportWeaponDescArgs>("import_weapon_desc", &value.args)?.into()),
            "import_weapon_type_desc" => Ok(__sdk::parse_reducer_args::<import_weapon_type_desc_reducer::ImportWeaponTypeDescArgs>("import_weapon_type_desc", &value.args)?.into()),
            "import_world_region_name_state" => Ok(__sdk::parse_reducer_args::<import_world_region_name_state_reducer::ImportWorldRegionNameStateArgs>("import_world_region_name_state", &value.args)?.into()),
            "import_world_region_state" => Ok(__sdk::parse_reducer_args::<import_world_region_state_reducer::ImportWorldRegionStateArgs>("import_world_region_state", &value.args)?.into()),
            "load_config" => Ok(__sdk::parse_reducer_args::<load_config_reducer::LoadConfigArgs>("load_config", &value.args)?.into()),
            "log_empire_leaderboard" => Ok(__sdk::parse_reducer_args::<log_empire_leaderboard_reducer::LogEmpireLeaderboardArgs>("log_empire_leaderboard", &value.args)?.into()),
            "log_player_with_" => Ok(__sdk::parse_reducer_args::<log_player_with_reducer::LogPlayerWithArgs>("log_player_with_", &value.args)?.into()),
            "on_inter_module_message_processed" => Ok(__sdk::parse_reducer_args::<on_inter_module_message_processed_reducer::OnInterModuleMessageProcessedArgs>("on_inter_module_message_processed", &value.args)?.into()),
            "player_claim_daily_shards" => Ok(__sdk::parse_reducer_args::<player_claim_daily_shards_reducer::PlayerClaimDailyShardsArgs>("player_claim_daily_shards", &value.args)?.into()),
            "player_create" => Ok(__sdk::parse_reducer_args::<player_create_reducer::PlayerCreateArgs>("player_create", &value.args)?.into()),
            "player_dismiss_notification" => Ok(__sdk::parse_reducer_args::<player_dismiss_notification_reducer::PlayerDismissNotificationArgs>("player_dismiss_notification", &value.args)?.into()),
            "player_notification_event_reducer" => Ok(__sdk::parse_reducer_args::<player_notification_event_reducer_reducer::PlayerNotificationEventReducerArgs>("player_notification_event_reducer", &value.args)?.into()),
            "player_set_name" => Ok(__sdk::parse_reducer_args::<player_set_name_reducer::PlayerSetNameArgs>("player_set_name", &value.args)?.into()),
            "player_vote_answer" => Ok(__sdk::parse_reducer_args::<player_vote_answer_reducer::PlayerVoteAnswerArgs>("player_vote_answer", &value.args)?.into()),
            "player_vote_conclude" => Ok(__sdk::parse_reducer_args::<player_vote_conclude_reducer::PlayerVoteConcludeArgs>("player_vote_conclude", &value.args)?.into()),
            "process_inter_module_message" => Ok(__sdk::parse_reducer_args::<process_inter_module_message_reducer::ProcessInterModuleMessageArgs>("process_inter_module_message", &value.args)?.into()),
            "set_role_for_identity" => Ok(__sdk::parse_reducer_args::<set_role_for_identity_reducer::SetRoleForIdentityArgs>("set_role_for_identity", &value.args)?.into()),
            "sign_in" => Ok(__sdk::parse_reducer_args::<sign_in_reducer::SignInArgs>("sign_in", &value.args)?.into()),
            "stage_achievement_desc" => Ok(__sdk::parse_reducer_args::<stage_achievement_desc_reducer::StageAchievementDescArgs>("stage_achievement_desc", &value.args)?.into()),
            "stage_alert_desc" => Ok(__sdk::parse_reducer_args::<stage_alert_desc_reducer::StageAlertDescArgs>("stage_alert_desc", &value.args)?.into()),
            "stage_biome_desc" => Ok(__sdk::parse_reducer_args::<stage_biome_desc_reducer::StageBiomeDescArgs>("stage_biome_desc", &value.args)?.into()),
            "stage_buff_desc" => Ok(__sdk::parse_reducer_args::<stage_buff_desc_reducer::StageBuffDescArgs>("stage_buff_desc", &value.args)?.into()),
            "stage_buff_type_desc" => Ok(__sdk::parse_reducer_args::<stage_buff_type_desc_reducer::StageBuffTypeDescArgs>("stage_buff_type_desc", &value.args)?.into()),
            "stage_building_claim_desc" => Ok(__sdk::parse_reducer_args::<stage_building_claim_desc_reducer::StageBuildingClaimDescArgs>("stage_building_claim_desc", &value.args)?.into()),
            "stage_building_desc" => Ok(__sdk::parse_reducer_args::<stage_building_desc_reducer::StageBuildingDescArgs>("stage_building_desc", &value.args)?.into()),
            "stage_building_portal_desc" => Ok(__sdk::parse_reducer_args::<stage_building_portal_desc_reducer::StageBuildingPortalDescArgs>("stage_building_portal_desc", &value.args)?.into()),
            "stage_building_repairs_desc" => Ok(__sdk::parse_reducer_args::<stage_building_repairs_desc_reducer::StageBuildingRepairsDescArgs>("stage_building_repairs_desc", &value.args)?.into()),
            "stage_building_spawn_desc" => Ok(__sdk::parse_reducer_args::<stage_building_spawn_desc_reducer::StageBuildingSpawnDescArgs>("stage_building_spawn_desc", &value.args)?.into()),
            "stage_building_type_desc" => Ok(__sdk::parse_reducer_args::<stage_building_type_desc_reducer::StageBuildingTypeDescArgs>("stage_building_type_desc", &value.args)?.into()),
            "stage_cargo_desc" => Ok(__sdk::parse_reducer_args::<stage_cargo_desc_reducer::StageCargoDescArgs>("stage_cargo_desc", &value.args)?.into()),
            "stage_character_stat_desc" => Ok(__sdk::parse_reducer_args::<stage_character_stat_desc_reducer::StageCharacterStatDescArgs>("stage_character_stat_desc", &value.args)?.into()),
            "stage_chest_rarity_desc" => Ok(__sdk::parse_reducer_args::<stage_chest_rarity_desc_reducer::StageChestRarityDescArgs>("stage_chest_rarity_desc", &value.args)?.into()),
            "stage_claim_tech_desc" => Ok(__sdk::parse_reducer_args::<stage_claim_tech_desc_reducer::StageClaimTechDescArgs>("stage_claim_tech_desc", &value.args)?.into()),
            "stage_claim_tile_cost" => Ok(__sdk::parse_reducer_args::<stage_claim_tile_cost_reducer::StageClaimTileCostArgs>("stage_claim_tile_cost", &value.args)?.into()),
            "stage_climb_requirement_desc" => Ok(__sdk::parse_reducer_args::<stage_climb_requirement_desc_reducer::StageClimbRequirementDescArgs>("stage_climb_requirement_desc", &value.args)?.into()),
            "stage_clothing_desc" => Ok(__sdk::parse_reducer_args::<stage_clothing_desc_reducer::StageClothingDescArgs>("stage_clothing_desc", &value.args)?.into()),
            "stage_collectible_desc" => Ok(__sdk::parse_reducer_args::<stage_collectible_desc_reducer::StageCollectibleDescArgs>("stage_collectible_desc", &value.args)?.into()),
            "stage_combat_action_desc" => Ok(__sdk::parse_reducer_args::<stage_combat_action_desc_reducer::StageCombatActionDescArgs>("stage_combat_action_desc", &value.args)?.into()),
            "stage_construction_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_construction_recipe_desc_reducer::StageConstructionRecipeDescArgs>("stage_construction_recipe_desc", &value.args)?.into()),
            "stage_crafting_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_crafting_recipe_desc_reducer::StageCraftingRecipeDescArgs>("stage_crafting_recipe_desc", &value.args)?.into()),
            "stage_deconstruction_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_deconstruction_recipe_desc_reducer::StageDeconstructionRecipeDescArgs>("stage_deconstruction_recipe_desc", &value.args)?.into()),
            "stage_deployable_desc" => Ok(__sdk::parse_reducer_args::<stage_deployable_desc_reducer::StageDeployableDescArgs>("stage_deployable_desc", &value.args)?.into()),
            "stage_distant_visible_entity_desc" => Ok(__sdk::parse_reducer_args::<stage_distant_visible_entity_desc_reducer::StageDistantVisibleEntityDescArgs>("stage_distant_visible_entity_desc", &value.args)?.into()),
            "stage_elevator_desc" => Ok(__sdk::parse_reducer_args::<stage_elevator_desc_reducer::StageElevatorDescArgs>("stage_elevator_desc", &value.args)?.into()),
            "stage_emote_desc" => Ok(__sdk::parse_reducer_args::<stage_emote_desc_reducer::StageEmoteDescArgs>("stage_emote_desc", &value.args)?.into()),
            "stage_empire_colors_desc" => Ok(__sdk::parse_reducer_args::<stage_empire_colors_desc_reducer::StageEmpireColorsDescArgs>("stage_empire_colors_desc", &value.args)?.into()),
            "stage_empire_icon_desc" => Ok(__sdk::parse_reducer_args::<stage_empire_icon_desc_reducer::StageEmpireIconDescArgs>("stage_empire_icon_desc", &value.args)?.into()),
            "stage_empire_notification_desc" => Ok(__sdk::parse_reducer_args::<stage_empire_notification_desc_reducer::StageEmpireNotificationDescArgs>("stage_empire_notification_desc", &value.args)?.into()),
            "stage_empire_rank_desc" => Ok(__sdk::parse_reducer_args::<stage_empire_rank_desc_reducer::StageEmpireRankDescArgs>("stage_empire_rank_desc", &value.args)?.into()),
            "stage_empire_supplies_desc" => Ok(__sdk::parse_reducer_args::<stage_empire_supplies_desc_reducer::StageEmpireSuppliesDescArgs>("stage_empire_supplies_desc", &value.args)?.into()),
            "stage_empire_territory_desc" => Ok(__sdk::parse_reducer_args::<stage_empire_territory_desc_reducer::StageEmpireTerritoryDescArgs>("stage_empire_territory_desc", &value.args)?.into()),
            "stage_enemy_ai_params_desc" => Ok(__sdk::parse_reducer_args::<stage_enemy_ai_params_desc_reducer::StageEnemyAiParamsDescArgs>("stage_enemy_ai_params_desc", &value.args)?.into()),
            "stage_enemy_desc" => Ok(__sdk::parse_reducer_args::<stage_enemy_desc_reducer::StageEnemyDescArgs>("stage_enemy_desc", &value.args)?.into()),
            "stage_environment_debuff_desc" => Ok(__sdk::parse_reducer_args::<stage_environment_debuff_desc_reducer::StageEnvironmentDebuffDescArgs>("stage_environment_debuff_desc", &value.args)?.into()),
            "stage_equipment_desc" => Ok(__sdk::parse_reducer_args::<stage_equipment_desc_reducer::StageEquipmentDescArgs>("stage_equipment_desc", &value.args)?.into()),
            "stage_extraction_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_extraction_recipe_desc_reducer::StageExtractionRecipeDescArgs>("stage_extraction_recipe_desc", &value.args)?.into()),
            "stage_food_desc" => Ok(__sdk::parse_reducer_args::<stage_food_desc_reducer::StageFoodDescArgs>("stage_food_desc", &value.args)?.into()),
            "stage_gate_desc" => Ok(__sdk::parse_reducer_args::<stage_gate_desc_reducer::StageGateDescArgs>("stage_gate_desc", &value.args)?.into()),
            "stage_hexite_exchange_entry_desc" => Ok(__sdk::parse_reducer_args::<stage_hexite_exchange_entry_desc_reducer::StageHexiteExchangeEntryDescArgs>("stage_hexite_exchange_entry_desc", &value.args)?.into()),
            "stage_interior_environment_desc" => Ok(__sdk::parse_reducer_args::<stage_interior_environment_desc_reducer::StageInteriorEnvironmentDescArgs>("stage_interior_environment_desc", &value.args)?.into()),
            "stage_interior_instance_desc" => Ok(__sdk::parse_reducer_args::<stage_interior_instance_desc_reducer::StageInteriorInstanceDescArgs>("stage_interior_instance_desc", &value.args)?.into()),
            "stage_interior_network_desc" => Ok(__sdk::parse_reducer_args::<stage_interior_network_desc_reducer::StageInteriorNetworkDescArgs>("stage_interior_network_desc", &value.args)?.into()),
            "stage_interior_portal_connections_desc" => Ok(__sdk::parse_reducer_args::<stage_interior_portal_connections_desc_reducer::StageInteriorPortalConnectionsDescArgs>("stage_interior_portal_connections_desc", &value.args)?.into()),
            "stage_interior_shape_desc" => Ok(__sdk::parse_reducer_args::<stage_interior_shape_desc_reducer::StageInteriorShapeDescArgs>("stage_interior_shape_desc", &value.args)?.into()),
            "stage_interior_spawn_desc" => Ok(__sdk::parse_reducer_args::<stage_interior_spawn_desc_reducer::StageInteriorSpawnDescArgs>("stage_interior_spawn_desc", &value.args)?.into()),
            "stage_item_conversion_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_item_conversion_recipe_desc_reducer::StageItemConversionRecipeDescArgs>("stage_item_conversion_recipe_desc", &value.args)?.into()),
            "stage_item_desc" => Ok(__sdk::parse_reducer_args::<stage_item_desc_reducer::StageItemDescArgs>("stage_item_desc", &value.args)?.into()),
            "stage_item_list_desc" => Ok(__sdk::parse_reducer_args::<stage_item_list_desc_reducer::StageItemListDescArgs>("stage_item_list_desc", &value.args)?.into()),
            "stage_knowledge_scroll_desc" => Ok(__sdk::parse_reducer_args::<stage_knowledge_scroll_desc_reducer::StageKnowledgeScrollDescArgs>("stage_knowledge_scroll_desc", &value.args)?.into()),
            "stage_knowledge_scroll_type_desc" => Ok(__sdk::parse_reducer_args::<stage_knowledge_scroll_type_desc_reducer::StageKnowledgeScrollTypeDescArgs>("stage_knowledge_scroll_type_desc", &value.args)?.into()),
            "stage_knowledge_stat_modifier_desc" => Ok(__sdk::parse_reducer_args::<stage_knowledge_stat_modifier_desc_reducer::StageKnowledgeStatModifierDescArgs>("stage_knowledge_stat_modifier_desc", &value.args)?.into()),
            "stage_loot_chest_desc" => Ok(__sdk::parse_reducer_args::<stage_loot_chest_desc_reducer::StageLootChestDescArgs>("stage_loot_chest_desc", &value.args)?.into()),
            "stage_loot_rarity_desc" => Ok(__sdk::parse_reducer_args::<stage_loot_rarity_desc_reducer::StageLootRarityDescArgs>("stage_loot_rarity_desc", &value.args)?.into()),
            "stage_loot_table_desc" => Ok(__sdk::parse_reducer_args::<stage_loot_table_desc_reducer::StageLootTableDescArgs>("stage_loot_table_desc", &value.args)?.into()),
            "stage_npc_desc" => Ok(__sdk::parse_reducer_args::<stage_npc_desc_reducer::StageNpcDescArgs>("stage_npc_desc", &value.args)?.into()),
            "stage_onboarding_reward_desc" => Ok(__sdk::parse_reducer_args::<stage_onboarding_reward_desc_reducer::StageOnboardingRewardDescArgs>("stage_onboarding_reward_desc", &value.args)?.into()),
            "stage_parameters_desc" => Ok(__sdk::parse_reducer_args::<stage_parameters_desc_reducer::StageParametersDescArgs>("stage_parameters_desc", &value.args)?.into()),
            "stage_pathfinding_desc" => Ok(__sdk::parse_reducer_args::<stage_pathfinding_desc_reducer::StagePathfindingDescArgs>("stage_pathfinding_desc", &value.args)?.into()),
            "stage_paving_tile_desc" => Ok(__sdk::parse_reducer_args::<stage_paving_tile_desc_reducer::StagePavingTileDescArgs>("stage_paving_tile_desc", &value.args)?.into()),
            "stage_pillar_shaping_desc" => Ok(__sdk::parse_reducer_args::<stage_pillar_shaping_desc_reducer::StagePillarShapingDescArgs>("stage_pillar_shaping_desc", &value.args)?.into()),
            "stage_player_action_desc" => Ok(__sdk::parse_reducer_args::<stage_player_action_desc_reducer::StagePlayerActionDescArgs>("stage_player_action_desc", &value.args)?.into()),
            "stage_player_housing_desc" => Ok(__sdk::parse_reducer_args::<stage_player_housing_desc_reducer::StagePlayerHousingDescArgs>("stage_player_housing_desc", &value.args)?.into()),
            "stage_private_parameters_desc" => Ok(__sdk::parse_reducer_args::<stage_private_parameters_desc_reducer::StagePrivateParametersDescArgs>("stage_private_parameters_desc", &value.args)?.into()),
            "stage_reserved_name_desc" => Ok(__sdk::parse_reducer_args::<stage_reserved_name_desc_reducer::StageReservedNameDescArgs>("stage_reserved_name_desc", &value.args)?.into()),
            "stage_resource_clump_desc" => Ok(__sdk::parse_reducer_args::<stage_resource_clump_desc_reducer::StageResourceClumpDescArgs>("stage_resource_clump_desc", &value.args)?.into()),
            "stage_resource_desc" => Ok(__sdk::parse_reducer_args::<stage_resource_desc_reducer::StageResourceDescArgs>("stage_resource_desc", &value.args)?.into()),
            "stage_resource_growth_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_resource_growth_recipe_desc_reducer::StageResourceGrowthRecipeDescArgs>("stage_resource_growth_recipe_desc", &value.args)?.into()),
            "stage_resource_placement_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_resource_placement_recipe_desc_reducer::StageResourcePlacementRecipeDescArgs>("stage_resource_placement_recipe_desc", &value.args)?.into()),
            "stage_secondary_knowledge_desc" => Ok(__sdk::parse_reducer_args::<stage_secondary_knowledge_desc_reducer::StageSecondaryKnowledgeDescArgs>("stage_secondary_knowledge_desc", &value.args)?.into()),
            "stage_skill_desc" => Ok(__sdk::parse_reducer_args::<stage_skill_desc_reducer::StageSkillDescArgs>("stage_skill_desc", &value.args)?.into()),
            "stage_targeting_matrix_desc" => Ok(__sdk::parse_reducer_args::<stage_targeting_matrix_desc_reducer::StageTargetingMatrixDescArgs>("stage_targeting_matrix_desc", &value.args)?.into()),
            "stage_teleport_item_desc" => Ok(__sdk::parse_reducer_args::<stage_teleport_item_desc_reducer::StageTeleportItemDescArgs>("stage_teleport_item_desc", &value.args)?.into()),
            "stage_terraform_recipe_desc" => Ok(__sdk::parse_reducer_args::<stage_terraform_recipe_desc_reducer::StageTerraformRecipeDescArgs>("stage_terraform_recipe_desc", &value.args)?.into()),
            "stage_tool_desc" => Ok(__sdk::parse_reducer_args::<stage_tool_desc_reducer::StageToolDescArgs>("stage_tool_desc", &value.args)?.into()),
            "stage_tool_type_desc" => Ok(__sdk::parse_reducer_args::<stage_tool_type_desc_reducer::StageToolTypeDescArgs>("stage_tool_type_desc", &value.args)?.into()),
            "stage_traveler_task_desc" => Ok(__sdk::parse_reducer_args::<stage_traveler_task_desc_reducer::StageTravelerTaskDescArgs>("stage_traveler_task_desc", &value.args)?.into()),
            "stage_traveler_trade_order_desc" => Ok(__sdk::parse_reducer_args::<stage_traveler_trade_order_desc_reducer::StageTravelerTradeOrderDescArgs>("stage_traveler_trade_order_desc", &value.args)?.into()),
            "stage_wall_desc" => Ok(__sdk::parse_reducer_args::<stage_wall_desc_reducer::StageWallDescArgs>("stage_wall_desc", &value.args)?.into()),
            "stage_weapon_desc" => Ok(__sdk::parse_reducer_args::<stage_weapon_desc_reducer::StageWeaponDescArgs>("stage_weapon_desc", &value.args)?.into()),
            "stage_weapon_type_desc" => Ok(__sdk::parse_reducer_args::<stage_weapon_type_desc_reducer::StageWeaponTypeDescArgs>("stage_weapon_type_desc", &value.args)?.into()),
            "update_role_for_player" => Ok(__sdk::parse_reducer_args::<update_role_for_player_reducer::UpdateRoleForPlayerArgs>("update_role_for_player", &value.args)?.into()),
            "update_scheduled_timers_from_static_data" => Ok(__sdk::parse_reducer_args::<update_scheduled_timers_from_static_data_reducer::UpdateScheduledTimersFromStaticDataArgs>("update_scheduled_timers_from_static_data", &value.args)?.into()),
            "user_moderation_clear_all" => Ok(__sdk::parse_reducer_args::<user_moderation_clear_all_reducer::UserModerationClearAllArgs>("user_moderation_clear_all", &value.args)?.into()),
            "user_moderation_create" => Ok(__sdk::parse_reducer_args::<user_moderation_create_reducer::UserModerationCreateArgs>("user_moderation_create", &value.args)?.into()),
            "user_moderation_delete" => Ok(__sdk::parse_reducer_args::<user_moderation_delete_reducer::UserModerationDeleteArgs>("user_moderation_delete", &value.args)?.into()),
            "user_moderation_list_all" => Ok(__sdk::parse_reducer_args::<user_moderation_list_all_reducer::UserModerationListAllArgs>("user_moderation_list_all", &value.args)?.into()),
            unknown => Err(__sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo").into()),
}
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    a_i_debug_state: __sdk::TableUpdate<AiDebugState>,
    achievement_desc: __sdk::TableUpdate<AchievementDesc>,
    action_state: __sdk::TableUpdate<ActionState>,
    active_buff_state: __sdk::TableUpdate<ActiveBuffState>,
    admin_broadcast: __sdk::TableUpdate<AdminBroadcast>,
    alert_desc: __sdk::TableUpdate<AlertDesc>,
    alert_state: __sdk::TableUpdate<AlertState>,
    attached_herds_state: __sdk::TableUpdate<AttachedHerdsState>,
    attack_outcome_state: __sdk::TableUpdate<AttackOutcomeState>,
    auto_claim_state: __sdk::TableUpdate<AutoClaimState>,
    barter_stall_state: __sdk::TableUpdate<BarterStallState>,
    biome_desc: __sdk::TableUpdate<BiomeDesc>,
    blocked_identity: __sdk::TableUpdate<BlockedIdentity>,
    buff_desc: __sdk::TableUpdate<BuffDesc>,
    buff_type_desc: __sdk::TableUpdate<BuffTypeDesc>,
    building_claim_desc: __sdk::TableUpdate<BuildingClaimDesc>,
    building_desc: __sdk::TableUpdate<BuildingDesc>,
    building_function_type_mapping_desc: __sdk::TableUpdate<BuildingFunctionTypeMappingDesc>,
    building_nickname_state: __sdk::TableUpdate<BuildingNicknameState>,
    building_portal_desc: __sdk::TableUpdate<BuildingPortalDesc>,
    building_repairs_desc: __sdk::TableUpdate<BuildingRepairsDesc>,
    building_spawn_desc: __sdk::TableUpdate<BuildingSpawnDesc>,
    building_state: __sdk::TableUpdate<BuildingState>,
    building_type_desc: __sdk::TableUpdate<BuildingTypeDesc>,
    buy_order_state: __sdk::TableUpdate<AuctionListingState>,
    cargo_desc: __sdk::TableUpdate<CargoDesc>,
    character_stat_desc: __sdk::TableUpdate<CharacterStatDesc>,
    character_stats_state: __sdk::TableUpdate<CharacterStatsState>,
    chat_message_state: __sdk::TableUpdate<ChatMessageState>,
    chest_rarity_desc: __sdk::TableUpdate<ChestRarityDesc>,
    claim_local_state: __sdk::TableUpdate<ClaimLocalState>,
    claim_member_state: __sdk::TableUpdate<ClaimMemberState>,
    claim_recruitment_state: __sdk::TableUpdate<ClaimRecruitmentState>,
    claim_state: __sdk::TableUpdate<ClaimState>,
    claim_tech_desc: __sdk::TableUpdate<ClaimTechDesc>,
    claim_tech_state: __sdk::TableUpdate<ClaimTechState>,
    claim_tile_cost: __sdk::TableUpdate<ClaimTileCost>,
    claim_tile_state: __sdk::TableUpdate<ClaimTileState>,
    climb_requirement_desc: __sdk::TableUpdate<ClimbRequirementDesc>,
    closed_listing_state: __sdk::TableUpdate<ClosedListingState>,
    clothing_desc: __sdk::TableUpdate<ClothingDesc>,
    collectible_desc: __sdk::TableUpdate<CollectibleDesc>,
    combat_action_desc: __sdk::TableUpdate<CombatActionDesc>,
    combat_state: __sdk::TableUpdate<CombatState>,
    config: __sdk::TableUpdate<Config>,
    construction_recipe_desc: __sdk::TableUpdate<ConstructionRecipeDesc>,
    crafting_recipe_desc: __sdk::TableUpdate<CraftingRecipeDesc>,
    deconstruction_recipe_desc: __sdk::TableUpdate<DeconstructionRecipeDesc>,
    deployable_collectible_state: __sdk::TableUpdate<DeployableCollectibleState>,
    deployable_desc: __sdk::TableUpdate<DeployableDesc>,
    deployable_state: __sdk::TableUpdate<DeployableState>,
    dimension_description_state: __sdk::TableUpdate<DimensionDescriptionState>,
    dimension_network_state: __sdk::TableUpdate<DimensionNetworkState>,
    distant_visible_entity: __sdk::TableUpdate<DistantVisibleEntity>,
    distant_visible_entity_desc: __sdk::TableUpdate<DistantVisibleEntityDesc>,
    dropped_inventory_state: __sdk::TableUpdate<DroppedInventoryState>,
    duel_state: __sdk::TableUpdate<DuelState>,
    elevator_desc: __sdk::TableUpdate<ElevatorDesc>,
    emote_desc: __sdk::TableUpdate<EmoteDesc>,
    empire_chunk_state: __sdk::TableUpdate<EmpireChunkState>,
    empire_color_desc: __sdk::TableUpdate<EmpireColorDesc>,
    empire_craft_supplies_timer: __sdk::TableUpdate<EmpireCraftSuppliesTimer>,
    empire_decay_loop_timer: __sdk::TableUpdate<EmpireDecayLoopTimer>,
    empire_directive_state: __sdk::TableUpdate<EmpireDirectiveState>,
    empire_emblem_state: __sdk::TableUpdate<EmpireEmblemState>,
    empire_expansion_state: __sdk::TableUpdate<EmpireExpansionState>,
    empire_foundry_state: __sdk::TableUpdate<EmpireFoundryState>,
    empire_icon_desc: __sdk::TableUpdate<EmpireIconDesc>,
    empire_log_state: __sdk::TableUpdate<EmpireLogState>,
    empire_node_siege_state: __sdk::TableUpdate<EmpireNodeSiegeState>,
    empire_node_state: __sdk::TableUpdate<EmpireNodeState>,
    empire_notification_desc: __sdk::TableUpdate<EmpireNotificationDesc>,
    empire_notification_state: __sdk::TableUpdate<EmpireNotificationState>,
    empire_player_data_state: __sdk::TableUpdate<EmpirePlayerDataState>,
    empire_player_log_state: __sdk::TableUpdate<EmpirePlayerLogState>,
    empire_rank_desc: __sdk::TableUpdate<EmpireRankDesc>,
    empire_rank_state: __sdk::TableUpdate<EmpireRankState>,
    empire_settlement_state: __sdk::TableUpdate<EmpireSettlementState>,
    empire_siege_engine_state: __sdk::TableUpdate<EmpireSiegeEngineState>,
    empire_siege_loop_timer: __sdk::TableUpdate<EmpireSiegeLoopTimer>,
    empire_state: __sdk::TableUpdate<EmpireState>,
    empire_supplies_desc: __sdk::TableUpdate<EmpireSuppliesDesc>,
    empire_territory_desc: __sdk::TableUpdate<EmpireTerritoryDesc>,
    enemy_ai_params_desc: __sdk::TableUpdate<EnemyAiParamsDesc>,
    enemy_desc: __sdk::TableUpdate<EnemyDesc>,
    enemy_mob_monitor_state: __sdk::TableUpdate<EnemyMobMonitorState>,
    enemy_state: __sdk::TableUpdate<EnemyState>,
    environment_debuff_desc: __sdk::TableUpdate<EnvironmentDebuffDesc>,
    equipment_desc: __sdk::TableUpdate<EquipmentDesc>,
    equipment_state: __sdk::TableUpdate<EquipmentState>,
    experience_state: __sdk::TableUpdate<ExperienceState>,
    exploration_chunks_state: __sdk::TableUpdate<ExplorationChunksState>,
    extract_outcome_state: __sdk::TableUpdate<ExtractOutcomeState>,
    extraction_recipe_desc: __sdk::TableUpdate<ExtractionRecipeDesc>,
    food_desc: __sdk::TableUpdate<FoodDesc>,
    footprint_tile_state: __sdk::TableUpdate<FootprintTileState>,
    force_generate_types: __sdk::TableUpdate<ForceGenerateTypes>,
    gate_desc: __sdk::TableUpdate<GateDesc>,
    global_search_state: __sdk::TableUpdate<GlobalSearchState>,
    globals: __sdk::TableUpdate<Globals>,
    granted_hub_item_state: __sdk::TableUpdate<GrantedHubItemState>,
    growth_state: __sdk::TableUpdate<GrowthState>,
    health_state: __sdk::TableUpdate<HealthState>,
    herd_state: __sdk::TableUpdate<HerdState>,
    hexite_exchange_entry_desc: __sdk::TableUpdate<HexiteExchangeEntryDesc>,
    identity_role: __sdk::TableUpdate<IdentityRole>,
    inter_module_message: __sdk::TableUpdate<InterModuleMessage>,
    inter_module_message_counter: __sdk::TableUpdate<InterModuleMessageCounter>,
    inter_module_response_message_counter: __sdk::TableUpdate<InterModuleResponseMessageCounter>,
    interior_collapse_trigger_state: __sdk::TableUpdate<InteriorCollapseTriggerState>,
    interior_environment_desc: __sdk::TableUpdate<InteriorEnvironmentDesc>,
    interior_instance_desc: __sdk::TableUpdate<InteriorInstanceDesc>,
    interior_network_desc: __sdk::TableUpdate<InteriorNetworkDesc>,
    interior_portal_connections_desc: __sdk::TableUpdate<InteriorPortalConnectionsDesc>,
    interior_shape_desc: __sdk::TableUpdate<InteriorShapeDesc>,
    interior_spawn_desc: __sdk::TableUpdate<InteriorSpawnDesc>,
    inventory_state: __sdk::TableUpdate<InventoryState>,
    item_conversion_recipe_desc: __sdk::TableUpdate<ItemConversionRecipeDesc>,
    item_desc: __sdk::TableUpdate<ItemDesc>,
    item_list_desc: __sdk::TableUpdate<ItemListDesc>,
    knowledge_achievement_state: __sdk::TableUpdate<KnowledgeAchievementState>,
    knowledge_battle_action_state: __sdk::TableUpdate<KnowledgeBattleActionState>,
    knowledge_building_state: __sdk::TableUpdate<KnowledgeBuildingState>,
    knowledge_cargo_state: __sdk::TableUpdate<KnowledgeCargoState>,
    knowledge_claim_state: __sdk::TableUpdate<KnowledgeClaimState>,
    knowledge_construction_state: __sdk::TableUpdate<KnowledgeConstructionState>,
    knowledge_craft_state: __sdk::TableUpdate<KnowledgeCraftState>,
    knowledge_deployable_state: __sdk::TableUpdate<KnowledgeDeployableState>,
    knowledge_enemy_state: __sdk::TableUpdate<KnowledgeEnemyState>,
    knowledge_extract_state: __sdk::TableUpdate<KnowledgeExtractState>,
    knowledge_item_state: __sdk::TableUpdate<KnowledgeItemState>,
    knowledge_lore_state: __sdk::TableUpdate<KnowledgeLoreState>,
    knowledge_npc_state: __sdk::TableUpdate<KnowledgeNpcState>,
    knowledge_paving_state: __sdk::TableUpdate<KnowledgePavingState>,
    knowledge_pillar_shaping_state: __sdk::TableUpdate<KnowledgePillarShapingState>,
    knowledge_resource_placement_state: __sdk::TableUpdate<KnowledgeResourcePlacementState>,
    knowledge_resource_state: __sdk::TableUpdate<KnowledgeResourceState>,
    knowledge_ruins_state: __sdk::TableUpdate<KnowledgeRuinsState>,
    knowledge_scroll_desc: __sdk::TableUpdate<KnowledgeScrollDesc>,
    knowledge_scroll_type_desc: __sdk::TableUpdate<KnowledgeScrollTypeDesc>,
    knowledge_secondary_state: __sdk::TableUpdate<KnowledgeSecondaryState>,
    knowledge_stat_modifier_desc: __sdk::TableUpdate<KnowledgeStatModifierDesc>,
    knowledge_vault_state: __sdk::TableUpdate<KnowledgeVaultState>,
    light_source_state: __sdk::TableUpdate<LightSourceState>,
    location_state: __sdk::TableUpdate<LocationState>,
    loot_chest_desc: __sdk::TableUpdate<LootChestDesc>,
    loot_chest_state: __sdk::TableUpdate<LootChestState>,
    loot_rarity_desc: __sdk::TableUpdate<LootRarityDesc>,
    loot_table_desc: __sdk::TableUpdate<LootTableDesc>,
    lost_items_state: __sdk::TableUpdate<LostItemsState>,
    mobile_entity_state: __sdk::TableUpdate<MobileEntityState>,
    mounting_state: __sdk::TableUpdate<MountingState>,
    move_validation_strike_counter_state: __sdk::TableUpdate<MoveValidationStrikeCounterState>,
    npc_desc: __sdk::TableUpdate<NpcDesc>,
    npc_state: __sdk::TableUpdate<NpcState>,
    onboarding_reward_desc: __sdk::TableUpdate<OnboardingRewardDesc>,
    onboarding_state: __sdk::TableUpdate<OnboardingState>,
    parameters_desc: __sdk::TableUpdate<ParametersDesc>,
    parameters_player_move_desc: __sdk::TableUpdate<ParametersPlayerMoveDesc>,
    passive_craft_state: __sdk::TableUpdate<PassiveCraftState>,
    pathfinding_desc: __sdk::TableUpdate<PathfindingDesc>,
    paved_tile_state: __sdk::TableUpdate<PavedTileState>,
    paving_tile_desc: __sdk::TableUpdate<PavingTileDesc>,
    permission_state: __sdk::TableUpdate<PermissionState>,
    pillar_shaping_desc: __sdk::TableUpdate<PillarShapingDesc>,
    pillar_shaping_state: __sdk::TableUpdate<PillarShapingState>,
    player_action_desc: __sdk::TableUpdate<PlayerActionDesc>,
    player_action_state: __sdk::TableUpdate<PlayerActionState>,
    player_developer_notification_state: __sdk::TableUpdate<PlayerDeveloperNotificationState>,
    player_housing_desc: __sdk::TableUpdate<PlayerHousingDesc>,
    player_housing_state: __sdk::TableUpdate<PlayerHousingState>,
    player_lowercase_username_state: __sdk::TableUpdate<PlayerLowercaseUsernameState>,
    player_note_state: __sdk::TableUpdate<PlayerNoteState>,
    player_notification_event: __sdk::TableUpdate<PlayerNotificationEvent>,
    player_prefs_state: __sdk::TableUpdate<PlayerPrefsState>,
    player_queue_state: __sdk::TableUpdate<PlayerQueueState>,
    player_report_state: __sdk::TableUpdate<PlayerReportState>,
    player_report_state_timestamp: __sdk::TableUpdate<PlayerReportStateTimestamp>,
    player_shard_state: __sdk::TableUpdate<PlayerShardState>,
    player_state: __sdk::TableUpdate<PlayerState>,
    player_timestamp_state: __sdk::TableUpdate<PlayerTimestampState>,
    player_username_state: __sdk::TableUpdate<PlayerUsernameState>,
    player_vote_conclude_timer: __sdk::TableUpdate<PlayerVoteConcludeTimer>,
    player_vote_state: __sdk::TableUpdate<PlayerVoteState>,
    portal_state: __sdk::TableUpdate<PortalState>,
    private_parameters_desc: __sdk::TableUpdate<PrivateParametersDesc>,
    progressive_action_state: __sdk::TableUpdate<ProgressiveActionState>,
    project_site_state: __sdk::TableUpdate<ProjectSiteState>,
    region_connection_info: __sdk::TableUpdate<RegionConnectionInfo>,
    region_population_info: __sdk::TableUpdate<RegionPopulationInfo>,
    region_sign_in_parameters: __sdk::TableUpdate<RegionSignInParameters>,
    rent_state: __sdk::TableUpdate<RentState>,
    reserved_name_desc: __sdk::TableUpdate<ReservedNameDesc>,
    resource_clump_desc: __sdk::TableUpdate<ResourceClumpDesc>,
    resource_count: __sdk::TableUpdate<ResourceCount>,
    resource_desc: __sdk::TableUpdate<ResourceDesc>,
    resource_growth_recipe_desc: __sdk::TableUpdate<ResourceGrowthRecipeDesc>,
    resource_health_state: __sdk::TableUpdate<ResourceHealthState>,
    resource_placement_recipe_desc: __sdk::TableUpdate<ResourcePlacementRecipeDesc>,
    resource_state: __sdk::TableUpdate<ResourceState>,
    rez_sick_long_term_state: __sdk::TableUpdate<RezSickLongTermState>,
    satiation_state: __sdk::TableUpdate<SatiationState>,
    secondary_knowledge_desc: __sdk::TableUpdate<SecondaryKnowledgeDesc>,
    sell_order_state: __sdk::TableUpdate<AuctionListingState>,
    server_identity: __sdk::TableUpdate<ServerIdentity>,
    signed_in_player_state: __sdk::TableUpdate<SignedInPlayerState>,
    single_resource_to_clump_desc: __sdk::TableUpdate<SingleResourceToClumpDesc>,
    skill_desc: __sdk::TableUpdate<SkillDesc>,
    staged_static_data: __sdk::TableUpdate<StagedStaticData>,
    stamina_state: __sdk::TableUpdate<StaminaState>,
    starving_player_state: __sdk::TableUpdate<StarvingPlayerState>,
    target_state: __sdk::TableUpdate<TargetState>,
    targetable_state: __sdk::TableUpdate<TargetableState>,
    targeting_matrix_desc: __sdk::TableUpdate<TargetingMatrixDesc>,
    teleport_item_desc: __sdk::TableUpdate<TeleportItemDesc>,
    teleportation_energy_state: __sdk::TableUpdate<TeleportationEnergyState>,
    terraform_progress_state: __sdk::TableUpdate<TerraformProgressState>,
    terraform_recipe_desc: __sdk::TableUpdate<TerraformRecipeDesc>,
    terrain_chunk_state: __sdk::TableUpdate<TerrainChunkState>,
    the_great_placeholder_table: __sdk::TableUpdate<TheGreatPlaceHolderTable>,
    threat_state: __sdk::TableUpdate<ThreatState>,
    tool_desc: __sdk::TableUpdate<ToolDesc>,
    tool_type_desc: __sdk::TableUpdate<ToolTypeDesc>,
    toolbar_state: __sdk::TableUpdate<ToolbarState>,
    trade_order_state: __sdk::TableUpdate<TradeOrderState>,
    trade_session_state: __sdk::TableUpdate<TradeSessionState>,
    traveler_task_desc: __sdk::TableUpdate<TravelerTaskDesc>,
    traveler_task_state: __sdk::TableUpdate<TravelerTaskState>,
    traveler_trade_order_desc: __sdk::TableUpdate<TravelerTradeOrderDesc>,
    unclaimed_collectibles_state: __sdk::TableUpdate<UnclaimedCollectiblesState>,
    unclaimed_shards_state: __sdk::TableUpdate<UnclaimedShardsState>,
    user_authentication_state: __sdk::TableUpdate<UserAuthenticationState>,
    user_moderation_state: __sdk::TableUpdate<UserModerationState>,
    user_previous_region_state: __sdk::TableUpdate<UserPreviousRegionState>,
    user_region_state: __sdk::TableUpdate<UserRegionState>,
    user_state: __sdk::TableUpdate<UserState>,
    vault_state: __sdk::TableUpdate<VaultState>,
    wall_desc: __sdk::TableUpdate<WallDesc>,
    weapon_desc: __sdk::TableUpdate<WeaponDesc>,
    weapon_type_desc: __sdk::TableUpdate<WeaponTypeDesc>,
    world_region_name_state: __sdk::TableUpdate<WorldRegionNameState>,
    world_region_state: __sdk::TableUpdate<WorldRegionState>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "a_i_debug_state" => {
                    db_update.a_i_debug_state =
                        a_i_debug_state_table::parse_table_update(table_update)?
                }
                "achievement_desc" => {
                    db_update.achievement_desc =
                        achievement_desc_table::parse_table_update(table_update)?
                }
                "action_state" => {
                    db_update.action_state = action_state_table::parse_table_update(table_update)?
                }
                "active_buff_state" => {
                    db_update.active_buff_state =
                        active_buff_state_table::parse_table_update(table_update)?
                }
                "admin_broadcast" => {
                    db_update.admin_broadcast =
                        admin_broadcast_table::parse_table_update(table_update)?
                }
                "alert_desc" => {
                    db_update.alert_desc = alert_desc_table::parse_table_update(table_update)?
                }
                "alert_state" => {
                    db_update.alert_state = alert_state_table::parse_table_update(table_update)?
                }
                "attached_herds_state" => {
                    db_update.attached_herds_state =
                        attached_herds_state_table::parse_table_update(table_update)?
                }
                "attack_outcome_state" => {
                    db_update.attack_outcome_state =
                        attack_outcome_state_table::parse_table_update(table_update)?
                }
                "auto_claim_state" => {
                    db_update.auto_claim_state =
                        auto_claim_state_table::parse_table_update(table_update)?
                }
                "barter_stall_state" => {
                    db_update.barter_stall_state =
                        barter_stall_state_table::parse_table_update(table_update)?
                }
                "biome_desc" => {
                    db_update.biome_desc = biome_desc_table::parse_table_update(table_update)?
                }
                "blocked_identity" => {
                    db_update.blocked_identity =
                        blocked_identity_table::parse_table_update(table_update)?
                }
                "buff_desc" => {
                    db_update.buff_desc = buff_desc_table::parse_table_update(table_update)?
                }
                "buff_type_desc" => {
                    db_update.buff_type_desc =
                        buff_type_desc_table::parse_table_update(table_update)?
                }
                "building_claim_desc" => {
                    db_update.building_claim_desc =
                        building_claim_desc_table::parse_table_update(table_update)?
                }
                "building_desc" => {
                    db_update.building_desc = building_desc_table::parse_table_update(table_update)?
                }
                "building_function_type_mapping_desc" => {
                    db_update.building_function_type_mapping_desc =
                        building_function_type_mapping_desc_table::parse_table_update(table_update)?
                }
                "building_nickname_state" => {
                    db_update.building_nickname_state =
                        building_nickname_state_table::parse_table_update(table_update)?
                }
                "building_portal_desc" => {
                    db_update.building_portal_desc =
                        building_portal_desc_table::parse_table_update(table_update)?
                }
                "building_repairs_desc" => {
                    db_update.building_repairs_desc =
                        building_repairs_desc_table::parse_table_update(table_update)?
                }
                "building_spawn_desc" => {
                    db_update.building_spawn_desc =
                        building_spawn_desc_table::parse_table_update(table_update)?
                }
                "building_state" => {
                    db_update.building_state =
                        building_state_table::parse_table_update(table_update)?
                }
                "building_type_desc" => {
                    db_update.building_type_desc =
                        building_type_desc_table::parse_table_update(table_update)?
                }
                "buy_order_state" => {
                    db_update.buy_order_state =
                        buy_order_state_table::parse_table_update(table_update)?
                }
                "cargo_desc" => {
                    db_update.cargo_desc = cargo_desc_table::parse_table_update(table_update)?
                }
                "character_stat_desc" => {
                    db_update.character_stat_desc =
                        character_stat_desc_table::parse_table_update(table_update)?
                }
                "character_stats_state" => {
                    db_update.character_stats_state =
                        character_stats_state_table::parse_table_update(table_update)?
                }
                "chat_message_state" => {
                    db_update.chat_message_state =
                        chat_message_state_table::parse_table_update(table_update)?
                }
                "chest_rarity_desc" => {
                    db_update.chest_rarity_desc =
                        chest_rarity_desc_table::parse_table_update(table_update)?
                }
                "claim_local_state" => {
                    db_update.claim_local_state =
                        claim_local_state_table::parse_table_update(table_update)?
                }
                "claim_member_state" => {
                    db_update.claim_member_state =
                        claim_member_state_table::parse_table_update(table_update)?
                }
                "claim_recruitment_state" => {
                    db_update.claim_recruitment_state =
                        claim_recruitment_state_table::parse_table_update(table_update)?
                }
                "claim_state" => {
                    db_update.claim_state = claim_state_table::parse_table_update(table_update)?
                }
                "claim_tech_desc" => {
                    db_update.claim_tech_desc =
                        claim_tech_desc_table::parse_table_update(table_update)?
                }
                "claim_tech_state" => {
                    db_update.claim_tech_state =
                        claim_tech_state_table::parse_table_update(table_update)?
                }
                "claim_tile_cost" => {
                    db_update.claim_tile_cost =
                        claim_tile_cost_table::parse_table_update(table_update)?
                }
                "claim_tile_state" => {
                    db_update.claim_tile_state =
                        claim_tile_state_table::parse_table_update(table_update)?
                }
                "climb_requirement_desc" => {
                    db_update.climb_requirement_desc =
                        climb_requirement_desc_table::parse_table_update(table_update)?
                }
                "closed_listing_state" => {
                    db_update.closed_listing_state =
                        closed_listing_state_table::parse_table_update(table_update)?
                }
                "clothing_desc" => {
                    db_update.clothing_desc = clothing_desc_table::parse_table_update(table_update)?
                }
                "collectible_desc" => {
                    db_update.collectible_desc =
                        collectible_desc_table::parse_table_update(table_update)?
                }
                "combat_action_desc" => {
                    db_update.combat_action_desc =
                        combat_action_desc_table::parse_table_update(table_update)?
                }
                "combat_state" => {
                    db_update.combat_state = combat_state_table::parse_table_update(table_update)?
                }
                "config" => db_update.config = config_table::parse_table_update(table_update)?,
                "construction_recipe_desc" => {
                    db_update.construction_recipe_desc =
                        construction_recipe_desc_table::parse_table_update(table_update)?
                }
                "crafting_recipe_desc" => {
                    db_update.crafting_recipe_desc =
                        crafting_recipe_desc_table::parse_table_update(table_update)?
                }
                "deconstruction_recipe_desc" => {
                    db_update.deconstruction_recipe_desc =
                        deconstruction_recipe_desc_table::parse_table_update(table_update)?
                }
                "deployable_collectible_state" => {
                    db_update.deployable_collectible_state =
                        deployable_collectible_state_table::parse_table_update(table_update)?
                }
                "deployable_desc" => {
                    db_update.deployable_desc =
                        deployable_desc_table::parse_table_update(table_update)?
                }
                "deployable_state" => {
                    db_update.deployable_state =
                        deployable_state_table::parse_table_update(table_update)?
                }
                "dimension_description_state" => {
                    db_update.dimension_description_state =
                        dimension_description_state_table::parse_table_update(table_update)?
                }
                "dimension_network_state" => {
                    db_update.dimension_network_state =
                        dimension_network_state_table::parse_table_update(table_update)?
                }
                "distant_visible_entity" => {
                    db_update.distant_visible_entity =
                        distant_visible_entity_table::parse_table_update(table_update)?
                }
                "distant_visible_entity_desc" => {
                    db_update.distant_visible_entity_desc =
                        distant_visible_entity_desc_table::parse_table_update(table_update)?
                }
                "dropped_inventory_state" => {
                    db_update.dropped_inventory_state =
                        dropped_inventory_state_table::parse_table_update(table_update)?
                }
                "duel_state" => {
                    db_update.duel_state = duel_state_table::parse_table_update(table_update)?
                }
                "elevator_desc" => {
                    db_update.elevator_desc = elevator_desc_table::parse_table_update(table_update)?
                }
                "emote_desc" => {
                    db_update.emote_desc = emote_desc_table::parse_table_update(table_update)?
                }
                "empire_chunk_state" => {
                    db_update.empire_chunk_state =
                        empire_chunk_state_table::parse_table_update(table_update)?
                }
                "empire_color_desc" => {
                    db_update.empire_color_desc =
                        empire_color_desc_table::parse_table_update(table_update)?
                }
                "empire_craft_supplies_timer" => {
                    db_update.empire_craft_supplies_timer =
                        empire_craft_supplies_timer_table::parse_table_update(table_update)?
                }
                "empire_decay_loop_timer" => {
                    db_update.empire_decay_loop_timer =
                        empire_decay_loop_timer_table::parse_table_update(table_update)?
                }
                "empire_directive_state" => {
                    db_update.empire_directive_state =
                        empire_directive_state_table::parse_table_update(table_update)?
                }
                "empire_emblem_state" => {
                    db_update.empire_emblem_state =
                        empire_emblem_state_table::parse_table_update(table_update)?
                }
                "empire_expansion_state" => {
                    db_update.empire_expansion_state =
                        empire_expansion_state_table::parse_table_update(table_update)?
                }
                "empire_foundry_state" => {
                    db_update.empire_foundry_state =
                        empire_foundry_state_table::parse_table_update(table_update)?
                }
                "empire_icon_desc" => {
                    db_update.empire_icon_desc =
                        empire_icon_desc_table::parse_table_update(table_update)?
                }
                "empire_log_state" => {
                    db_update.empire_log_state =
                        empire_log_state_table::parse_table_update(table_update)?
                }
                "empire_node_siege_state" => {
                    db_update.empire_node_siege_state =
                        empire_node_siege_state_table::parse_table_update(table_update)?
                }
                "empire_node_state" => {
                    db_update.empire_node_state =
                        empire_node_state_table::parse_table_update(table_update)?
                }
                "empire_notification_desc" => {
                    db_update.empire_notification_desc =
                        empire_notification_desc_table::parse_table_update(table_update)?
                }
                "empire_notification_state" => {
                    db_update.empire_notification_state =
                        empire_notification_state_table::parse_table_update(table_update)?
                }
                "empire_player_data_state" => {
                    db_update.empire_player_data_state =
                        empire_player_data_state_table::parse_table_update(table_update)?
                }
                "empire_player_log_state" => {
                    db_update.empire_player_log_state =
                        empire_player_log_state_table::parse_table_update(table_update)?
                }
                "empire_rank_desc" => {
                    db_update.empire_rank_desc =
                        empire_rank_desc_table::parse_table_update(table_update)?
                }
                "empire_rank_state" => {
                    db_update.empire_rank_state =
                        empire_rank_state_table::parse_table_update(table_update)?
                }
                "empire_settlement_state" => {
                    db_update.empire_settlement_state =
                        empire_settlement_state_table::parse_table_update(table_update)?
                }
                "empire_siege_engine_state" => {
                    db_update.empire_siege_engine_state =
                        empire_siege_engine_state_table::parse_table_update(table_update)?
                }
                "empire_siege_loop_timer" => {
                    db_update.empire_siege_loop_timer =
                        empire_siege_loop_timer_table::parse_table_update(table_update)?
                }
                "empire_state" => {
                    db_update.empire_state = empire_state_table::parse_table_update(table_update)?
                }
                "empire_supplies_desc" => {
                    db_update.empire_supplies_desc =
                        empire_supplies_desc_table::parse_table_update(table_update)?
                }
                "empire_territory_desc" => {
                    db_update.empire_territory_desc =
                        empire_territory_desc_table::parse_table_update(table_update)?
                }
                "enemy_ai_params_desc" => {
                    db_update.enemy_ai_params_desc =
                        enemy_ai_params_desc_table::parse_table_update(table_update)?
                }
                "enemy_desc" => {
                    db_update.enemy_desc = enemy_desc_table::parse_table_update(table_update)?
                }
                "enemy_mob_monitor_state" => {
                    db_update.enemy_mob_monitor_state =
                        enemy_mob_monitor_state_table::parse_table_update(table_update)?
                }
                "enemy_state" => {
                    db_update.enemy_state = enemy_state_table::parse_table_update(table_update)?
                }
                "environment_debuff_desc" => {
                    db_update.environment_debuff_desc =
                        environment_debuff_desc_table::parse_table_update(table_update)?
                }
                "equipment_desc" => {
                    db_update.equipment_desc =
                        equipment_desc_table::parse_table_update(table_update)?
                }
                "equipment_state" => {
                    db_update.equipment_state =
                        equipment_state_table::parse_table_update(table_update)?
                }
                "experience_state" => {
                    db_update.experience_state =
                        experience_state_table::parse_table_update(table_update)?
                }
                "exploration_chunks_state" => {
                    db_update.exploration_chunks_state =
                        exploration_chunks_state_table::parse_table_update(table_update)?
                }
                "extract_outcome_state" => {
                    db_update.extract_outcome_state =
                        extract_outcome_state_table::parse_table_update(table_update)?
                }
                "extraction_recipe_desc" => {
                    db_update.extraction_recipe_desc =
                        extraction_recipe_desc_table::parse_table_update(table_update)?
                }
                "food_desc" => {
                    db_update.food_desc = food_desc_table::parse_table_update(table_update)?
                }
                "footprint_tile_state" => {
                    db_update.footprint_tile_state =
                        footprint_tile_state_table::parse_table_update(table_update)?
                }
                "force_generate_types" => {
                    db_update.force_generate_types =
                        force_generate_types_table::parse_table_update(table_update)?
                }
                "gate_desc" => {
                    db_update.gate_desc = gate_desc_table::parse_table_update(table_update)?
                }
                "global_search_state" => {
                    db_update.global_search_state =
                        global_search_state_table::parse_table_update(table_update)?
                }
                "globals" => db_update.globals = globals_table::parse_table_update(table_update)?,
                "granted_hub_item_state" => {
                    db_update.granted_hub_item_state =
                        granted_hub_item_state_table::parse_table_update(table_update)?
                }
                "growth_state" => {
                    db_update.growth_state = growth_state_table::parse_table_update(table_update)?
                }
                "health_state" => {
                    db_update.health_state = health_state_table::parse_table_update(table_update)?
                }
                "herd_state" => {
                    db_update.herd_state = herd_state_table::parse_table_update(table_update)?
                }
                "hexite_exchange_entry_desc" => {
                    db_update.hexite_exchange_entry_desc =
                        hexite_exchange_entry_desc_table::parse_table_update(table_update)?
                }
                "identity_role" => {
                    db_update.identity_role = identity_role_table::parse_table_update(table_update)?
                }
                "inter_module_message" => {
                    db_update.inter_module_message =
                        inter_module_message_table::parse_table_update(table_update)?
                }
                "inter_module_message_counter" => {
                    db_update.inter_module_message_counter =
                        inter_module_message_counter_table::parse_table_update(table_update)?
                }
                "inter_module_response_message_counter" => {
                    db_update.inter_module_response_message_counter =
                        inter_module_response_message_counter_table::parse_table_update(
                            table_update,
                        )?
                }
                "interior_collapse_trigger_state" => {
                    db_update.interior_collapse_trigger_state =
                        interior_collapse_trigger_state_table::parse_table_update(table_update)?
                }
                "interior_environment_desc" => {
                    db_update.interior_environment_desc =
                        interior_environment_desc_table::parse_table_update(table_update)?
                }
                "interior_instance_desc" => {
                    db_update.interior_instance_desc =
                        interior_instance_desc_table::parse_table_update(table_update)?
                }
                "interior_network_desc" => {
                    db_update.interior_network_desc =
                        interior_network_desc_table::parse_table_update(table_update)?
                }
                "interior_portal_connections_desc" => {
                    db_update.interior_portal_connections_desc =
                        interior_portal_connections_desc_table::parse_table_update(table_update)?
                }
                "interior_shape_desc" => {
                    db_update.interior_shape_desc =
                        interior_shape_desc_table::parse_table_update(table_update)?
                }
                "interior_spawn_desc" => {
                    db_update.interior_spawn_desc =
                        interior_spawn_desc_table::parse_table_update(table_update)?
                }
                "inventory_state" => {
                    db_update.inventory_state =
                        inventory_state_table::parse_table_update(table_update)?
                }
                "item_conversion_recipe_desc" => {
                    db_update.item_conversion_recipe_desc =
                        item_conversion_recipe_desc_table::parse_table_update(table_update)?
                }
                "item_desc" => {
                    db_update.item_desc = item_desc_table::parse_table_update(table_update)?
                }
                "item_list_desc" => {
                    db_update.item_list_desc =
                        item_list_desc_table::parse_table_update(table_update)?
                }
                "knowledge_achievement_state" => {
                    db_update.knowledge_achievement_state =
                        knowledge_achievement_state_table::parse_table_update(table_update)?
                }
                "knowledge_battle_action_state" => {
                    db_update.knowledge_battle_action_state =
                        knowledge_battle_action_state_table::parse_table_update(table_update)?
                }
                "knowledge_building_state" => {
                    db_update.knowledge_building_state =
                        knowledge_building_state_table::parse_table_update(table_update)?
                }
                "knowledge_cargo_state" => {
                    db_update.knowledge_cargo_state =
                        knowledge_cargo_state_table::parse_table_update(table_update)?
                }
                "knowledge_claim_state" => {
                    db_update.knowledge_claim_state =
                        knowledge_claim_state_table::parse_table_update(table_update)?
                }
                "knowledge_construction_state" => {
                    db_update.knowledge_construction_state =
                        knowledge_construction_state_table::parse_table_update(table_update)?
                }
                "knowledge_craft_state" => {
                    db_update.knowledge_craft_state =
                        knowledge_craft_state_table::parse_table_update(table_update)?
                }
                "knowledge_deployable_state" => {
                    db_update.knowledge_deployable_state =
                        knowledge_deployable_state_table::parse_table_update(table_update)?
                }
                "knowledge_enemy_state" => {
                    db_update.knowledge_enemy_state =
                        knowledge_enemy_state_table::parse_table_update(table_update)?
                }
                "knowledge_extract_state" => {
                    db_update.knowledge_extract_state =
                        knowledge_extract_state_table::parse_table_update(table_update)?
                }
                "knowledge_item_state" => {
                    db_update.knowledge_item_state =
                        knowledge_item_state_table::parse_table_update(table_update)?
                }
                "knowledge_lore_state" => {
                    db_update.knowledge_lore_state =
                        knowledge_lore_state_table::parse_table_update(table_update)?
                }
                "knowledge_npc_state" => {
                    db_update.knowledge_npc_state =
                        knowledge_npc_state_table::parse_table_update(table_update)?
                }
                "knowledge_paving_state" => {
                    db_update.knowledge_paving_state =
                        knowledge_paving_state_table::parse_table_update(table_update)?
                }
                "knowledge_pillar_shaping_state" => {
                    db_update.knowledge_pillar_shaping_state =
                        knowledge_pillar_shaping_state_table::parse_table_update(table_update)?
                }
                "knowledge_resource_placement_state" => {
                    db_update.knowledge_resource_placement_state =
                        knowledge_resource_placement_state_table::parse_table_update(table_update)?
                }
                "knowledge_resource_state" => {
                    db_update.knowledge_resource_state =
                        knowledge_resource_state_table::parse_table_update(table_update)?
                }
                "knowledge_ruins_state" => {
                    db_update.knowledge_ruins_state =
                        knowledge_ruins_state_table::parse_table_update(table_update)?
                }
                "knowledge_scroll_desc" => {
                    db_update.knowledge_scroll_desc =
                        knowledge_scroll_desc_table::parse_table_update(table_update)?
                }
                "knowledge_scroll_type_desc" => {
                    db_update.knowledge_scroll_type_desc =
                        knowledge_scroll_type_desc_table::parse_table_update(table_update)?
                }
                "knowledge_secondary_state" => {
                    db_update.knowledge_secondary_state =
                        knowledge_secondary_state_table::parse_table_update(table_update)?
                }
                "knowledge_stat_modifier_desc" => {
                    db_update.knowledge_stat_modifier_desc =
                        knowledge_stat_modifier_desc_table::parse_table_update(table_update)?
                }
                "knowledge_vault_state" => {
                    db_update.knowledge_vault_state =
                        knowledge_vault_state_table::parse_table_update(table_update)?
                }
                "light_source_state" => {
                    db_update.light_source_state =
                        light_source_state_table::parse_table_update(table_update)?
                }
                "location_state" => {
                    db_update.location_state =
                        location_state_table::parse_table_update(table_update)?
                }
                "loot_chest_desc" => {
                    db_update.loot_chest_desc =
                        loot_chest_desc_table::parse_table_update(table_update)?
                }
                "loot_chest_state" => {
                    db_update.loot_chest_state =
                        loot_chest_state_table::parse_table_update(table_update)?
                }
                "loot_rarity_desc" => {
                    db_update.loot_rarity_desc =
                        loot_rarity_desc_table::parse_table_update(table_update)?
                }
                "loot_table_desc" => {
                    db_update.loot_table_desc =
                        loot_table_desc_table::parse_table_update(table_update)?
                }
                "lost_items_state" => {
                    db_update.lost_items_state =
                        lost_items_state_table::parse_table_update(table_update)?
                }
                "mobile_entity_state" => {
                    db_update.mobile_entity_state =
                        mobile_entity_state_table::parse_table_update(table_update)?
                }
                "mounting_state" => {
                    db_update.mounting_state =
                        mounting_state_table::parse_table_update(table_update)?
                }
                "move_validation_strike_counter_state" => {
                    db_update.move_validation_strike_counter_state =
                        move_validation_strike_counter_state_table::parse_table_update(
                            table_update,
                        )?
                }
                "npc_desc" => {
                    db_update.npc_desc = npc_desc_table::parse_table_update(table_update)?
                }
                "npc_state" => {
                    db_update.npc_state = npc_state_table::parse_table_update(table_update)?
                }
                "onboarding_reward_desc" => {
                    db_update.onboarding_reward_desc =
                        onboarding_reward_desc_table::parse_table_update(table_update)?
                }
                "onboarding_state" => {
                    db_update.onboarding_state =
                        onboarding_state_table::parse_table_update(table_update)?
                }
                "parameters_desc" => {
                    db_update.parameters_desc =
                        parameters_desc_table::parse_table_update(table_update)?
                }
                "parameters_player_move_desc" => {
                    db_update.parameters_player_move_desc =
                        parameters_player_move_desc_table::parse_table_update(table_update)?
                }
                "passive_craft_state" => {
                    db_update.passive_craft_state =
                        passive_craft_state_table::parse_table_update(table_update)?
                }
                "pathfinding_desc" => {
                    db_update.pathfinding_desc =
                        pathfinding_desc_table::parse_table_update(table_update)?
                }
                "paved_tile_state" => {
                    db_update.paved_tile_state =
                        paved_tile_state_table::parse_table_update(table_update)?
                }
                "paving_tile_desc" => {
                    db_update.paving_tile_desc =
                        paving_tile_desc_table::parse_table_update(table_update)?
                }
                "permission_state" => {
                    db_update.permission_state =
                        permission_state_table::parse_table_update(table_update)?
                }
                "pillar_shaping_desc" => {
                    db_update.pillar_shaping_desc =
                        pillar_shaping_desc_table::parse_table_update(table_update)?
                }
                "pillar_shaping_state" => {
                    db_update.pillar_shaping_state =
                        pillar_shaping_state_table::parse_table_update(table_update)?
                }
                "player_action_desc" => {
                    db_update.player_action_desc =
                        player_action_desc_table::parse_table_update(table_update)?
                }
                "player_action_state" => {
                    db_update.player_action_state =
                        player_action_state_table::parse_table_update(table_update)?
                }
                "player_developer_notification_state" => {
                    db_update.player_developer_notification_state =
                        player_developer_notification_state_table::parse_table_update(table_update)?
                }
                "player_housing_desc" => {
                    db_update.player_housing_desc =
                        player_housing_desc_table::parse_table_update(table_update)?
                }
                "player_housing_state" => {
                    db_update.player_housing_state =
                        player_housing_state_table::parse_table_update(table_update)?
                }
                "player_lowercase_username_state" => {
                    db_update.player_lowercase_username_state =
                        player_lowercase_username_state_table::parse_table_update(table_update)?
                }
                "player_note_state" => {
                    db_update.player_note_state =
                        player_note_state_table::parse_table_update(table_update)?
                }
                "player_notification_event" => {
                    db_update.player_notification_event =
                        player_notification_event_table::parse_table_update(table_update)?
                }
                "player_prefs_state" => {
                    db_update.player_prefs_state =
                        player_prefs_state_table::parse_table_update(table_update)?
                }
                "player_queue_state" => {
                    db_update.player_queue_state =
                        player_queue_state_table::parse_table_update(table_update)?
                }
                "player_report_state" => {
                    db_update.player_report_state =
                        player_report_state_table::parse_table_update(table_update)?
                }
                "player_report_state_timestamp" => {
                    db_update.player_report_state_timestamp =
                        player_report_state_timestamp_table::parse_table_update(table_update)?
                }
                "player_shard_state" => {
                    db_update.player_shard_state =
                        player_shard_state_table::parse_table_update(table_update)?
                }
                "player_state" => {
                    db_update.player_state = player_state_table::parse_table_update(table_update)?
                }
                "player_timestamp_state" => {
                    db_update.player_timestamp_state =
                        player_timestamp_state_table::parse_table_update(table_update)?
                }
                "player_username_state" => {
                    db_update.player_username_state =
                        player_username_state_table::parse_table_update(table_update)?
                }
                "player_vote_conclude_timer" => {
                    db_update.player_vote_conclude_timer =
                        player_vote_conclude_timer_table::parse_table_update(table_update)?
                }
                "player_vote_state" => {
                    db_update.player_vote_state =
                        player_vote_state_table::parse_table_update(table_update)?
                }
                "portal_state" => {
                    db_update.portal_state = portal_state_table::parse_table_update(table_update)?
                }
                "private_parameters_desc" => {
                    db_update.private_parameters_desc =
                        private_parameters_desc_table::parse_table_update(table_update)?
                }
                "progressive_action_state" => {
                    db_update.progressive_action_state =
                        progressive_action_state_table::parse_table_update(table_update)?
                }
                "project_site_state" => {
                    db_update.project_site_state =
                        project_site_state_table::parse_table_update(table_update)?
                }
                "region_connection_info" => {
                    db_update.region_connection_info =
                        region_connection_info_table::parse_table_update(table_update)?
                }
                "region_population_info" => {
                    db_update.region_population_info =
                        region_population_info_table::parse_table_update(table_update)?
                }
                "region_sign_in_parameters" => {
                    db_update.region_sign_in_parameters =
                        region_sign_in_parameters_table::parse_table_update(table_update)?
                }
                "rent_state" => {
                    db_update.rent_state = rent_state_table::parse_table_update(table_update)?
                }
                "reserved_name_desc" => {
                    db_update.reserved_name_desc =
                        reserved_name_desc_table::parse_table_update(table_update)?
                }
                "resource_clump_desc" => {
                    db_update.resource_clump_desc =
                        resource_clump_desc_table::parse_table_update(table_update)?
                }
                "resource_count" => {
                    db_update.resource_count =
                        resource_count_table::parse_table_update(table_update)?
                }
                "resource_desc" => {
                    db_update.resource_desc = resource_desc_table::parse_table_update(table_update)?
                }
                "resource_growth_recipe_desc" => {
                    db_update.resource_growth_recipe_desc =
                        resource_growth_recipe_desc_table::parse_table_update(table_update)?
                }
                "resource_health_state" => {
                    db_update.resource_health_state =
                        resource_health_state_table::parse_table_update(table_update)?
                }
                "resource_placement_recipe_desc" => {
                    db_update.resource_placement_recipe_desc =
                        resource_placement_recipe_desc_table::parse_table_update(table_update)?
                }
                "resource_state" => {
                    db_update.resource_state =
                        resource_state_table::parse_table_update(table_update)?
                }
                "rez_sick_long_term_state" => {
                    db_update.rez_sick_long_term_state =
                        rez_sick_long_term_state_table::parse_table_update(table_update)?
                }
                "satiation_state" => {
                    db_update.satiation_state =
                        satiation_state_table::parse_table_update(table_update)?
                }
                "secondary_knowledge_desc" => {
                    db_update.secondary_knowledge_desc =
                        secondary_knowledge_desc_table::parse_table_update(table_update)?
                }
                "sell_order_state" => {
                    db_update.sell_order_state =
                        sell_order_state_table::parse_table_update(table_update)?
                }
                "server_identity" => {
                    db_update.server_identity =
                        server_identity_table::parse_table_update(table_update)?
                }
                "signed_in_player_state" => {
                    db_update.signed_in_player_state =
                        signed_in_player_state_table::parse_table_update(table_update)?
                }
                "single_resource_to_clump_desc" => {
                    db_update.single_resource_to_clump_desc =
                        single_resource_to_clump_desc_table::parse_table_update(table_update)?
                }
                "skill_desc" => {
                    db_update.skill_desc = skill_desc_table::parse_table_update(table_update)?
                }
                "staged_static_data" => {
                    db_update.staged_static_data =
                        staged_static_data_table::parse_table_update(table_update)?
                }
                "stamina_state" => {
                    db_update.stamina_state = stamina_state_table::parse_table_update(table_update)?
                }
                "starving_player_state" => {
                    db_update.starving_player_state =
                        starving_player_state_table::parse_table_update(table_update)?
                }
                "target_state" => {
                    db_update.target_state = target_state_table::parse_table_update(table_update)?
                }
                "targetable_state" => {
                    db_update.targetable_state =
                        targetable_state_table::parse_table_update(table_update)?
                }
                "targeting_matrix_desc" => {
                    db_update.targeting_matrix_desc =
                        targeting_matrix_desc_table::parse_table_update(table_update)?
                }
                "teleport_item_desc" => {
                    db_update.teleport_item_desc =
                        teleport_item_desc_table::parse_table_update(table_update)?
                }
                "teleportation_energy_state" => {
                    db_update.teleportation_energy_state =
                        teleportation_energy_state_table::parse_table_update(table_update)?
                }
                "terraform_progress_state" => {
                    db_update.terraform_progress_state =
                        terraform_progress_state_table::parse_table_update(table_update)?
                }
                "terraform_recipe_desc" => {
                    db_update.terraform_recipe_desc =
                        terraform_recipe_desc_table::parse_table_update(table_update)?
                }
                "terrain_chunk_state" => {
                    db_update.terrain_chunk_state =
                        terrain_chunk_state_table::parse_table_update(table_update)?
                }
                "the_great_placeholder_table" => {
                    db_update.the_great_placeholder_table =
                        the_great_placeholder_table_table::parse_table_update(table_update)?
                }
                "threat_state" => {
                    db_update.threat_state = threat_state_table::parse_table_update(table_update)?
                }
                "tool_desc" => {
                    db_update.tool_desc = tool_desc_table::parse_table_update(table_update)?
                }
                "tool_type_desc" => {
                    db_update.tool_type_desc =
                        tool_type_desc_table::parse_table_update(table_update)?
                }
                "toolbar_state" => {
                    db_update.toolbar_state = toolbar_state_table::parse_table_update(table_update)?
                }
                "trade_order_state" => {
                    db_update.trade_order_state =
                        trade_order_state_table::parse_table_update(table_update)?
                }
                "trade_session_state" => {
                    db_update.trade_session_state =
                        trade_session_state_table::parse_table_update(table_update)?
                }
                "traveler_task_desc" => {
                    db_update.traveler_task_desc =
                        traveler_task_desc_table::parse_table_update(table_update)?
                }
                "traveler_task_state" => {
                    db_update.traveler_task_state =
                        traveler_task_state_table::parse_table_update(table_update)?
                }
                "traveler_trade_order_desc" => {
                    db_update.traveler_trade_order_desc =
                        traveler_trade_order_desc_table::parse_table_update(table_update)?
                }
                "unclaimed_collectibles_state" => {
                    db_update.unclaimed_collectibles_state =
                        unclaimed_collectibles_state_table::parse_table_update(table_update)?
                }
                "unclaimed_shards_state" => {
                    db_update.unclaimed_shards_state =
                        unclaimed_shards_state_table::parse_table_update(table_update)?
                }
                "user_authentication_state" => {
                    db_update.user_authentication_state =
                        user_authentication_state_table::parse_table_update(table_update)?
                }
                "user_moderation_state" => {
                    db_update.user_moderation_state =
                        user_moderation_state_table::parse_table_update(table_update)?
                }
                "user_previous_region_state" => {
                    db_update.user_previous_region_state =
                        user_previous_region_state_table::parse_table_update(table_update)?
                }
                "user_region_state" => {
                    db_update.user_region_state =
                        user_region_state_table::parse_table_update(table_update)?
                }
                "user_state" => {
                    db_update.user_state = user_state_table::parse_table_update(table_update)?
                }
                "vault_state" => {
                    db_update.vault_state = vault_state_table::parse_table_update(table_update)?
                }
                "wall_desc" => {
                    db_update.wall_desc = wall_desc_table::parse_table_update(table_update)?
                }
                "weapon_desc" => {
                    db_update.weapon_desc = weapon_desc_table::parse_table_update(table_update)?
                }
                "weapon_type_desc" => {
                    db_update.weapon_type_desc =
                        weapon_type_desc_table::parse_table_update(table_update)?
                }
                "world_region_name_state" => {
                    db_update.world_region_name_state =
                        world_region_name_state_table::parse_table_update(table_update)?
                }
                "world_region_state" => {
                    db_update.world_region_state =
                        world_region_state_table::parse_table_update(table_update)?
                }

                unknown => {
                    return Err(__sdk::InternalError::unknown_name(
                        "table",
                        unknown,
                        "DatabaseUpdate",
                    )
                    .into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(
        &self,
        cache: &mut __sdk::ClientCache<RemoteModule>,
    ) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.a_i_debug_state = cache
            .apply_diff_to_table::<AiDebugState>("a_i_debug_state", &self.a_i_debug_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.achievement_desc = cache
            .apply_diff_to_table::<AchievementDesc>("achievement_desc", &self.achievement_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.action_state = cache
            .apply_diff_to_table::<ActionState>("action_state", &self.action_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.active_buff_state = cache
            .apply_diff_to_table::<ActiveBuffState>("active_buff_state", &self.active_buff_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.admin_broadcast = cache
            .apply_diff_to_table::<AdminBroadcast>("admin_broadcast", &self.admin_broadcast)
            .with_updates_by_pk(|row| &row.version);
        diff.alert_desc = cache
            .apply_diff_to_table::<AlertDesc>("alert_desc", &self.alert_desc)
            .with_updates_by_pk(|row| &row.alert_type);
        diff.alert_state = cache
            .apply_diff_to_table::<AlertState>("alert_state", &self.alert_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.attached_herds_state = cache
            .apply_diff_to_table::<AttachedHerdsState>(
                "attached_herds_state",
                &self.attached_herds_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.attack_outcome_state = cache
            .apply_diff_to_table::<AttackOutcomeState>(
                "attack_outcome_state",
                &self.attack_outcome_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.auto_claim_state = cache
            .apply_diff_to_table::<AutoClaimState>("auto_claim_state", &self.auto_claim_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.barter_stall_state = cache
            .apply_diff_to_table::<BarterStallState>("barter_stall_state", &self.barter_stall_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.biome_desc = cache
            .apply_diff_to_table::<BiomeDesc>("biome_desc", &self.biome_desc)
            .with_updates_by_pk(|row| &row.biome_type);
        diff.blocked_identity = cache
            .apply_diff_to_table::<BlockedIdentity>("blocked_identity", &self.blocked_identity)
            .with_updates_by_pk(|row| &row.identity);
        diff.buff_desc = cache
            .apply_diff_to_table::<BuffDesc>("buff_desc", &self.buff_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.buff_type_desc = cache
            .apply_diff_to_table::<BuffTypeDesc>("buff_type_desc", &self.buff_type_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.building_claim_desc = cache
            .apply_diff_to_table::<BuildingClaimDesc>(
                "building_claim_desc",
                &self.building_claim_desc,
            )
            .with_updates_by_pk(|row| &row.building_id);
        diff.building_desc = cache
            .apply_diff_to_table::<BuildingDesc>("building_desc", &self.building_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.building_function_type_mapping_desc = cache
            .apply_diff_to_table::<BuildingFunctionTypeMappingDesc>(
                "building_function_type_mapping_desc",
                &self.building_function_type_mapping_desc,
            )
            .with_updates_by_pk(|row| &row.type_id);
        diff.building_nickname_state = cache
            .apply_diff_to_table::<BuildingNicknameState>(
                "building_nickname_state",
                &self.building_nickname_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.building_portal_desc = cache
            .apply_diff_to_table::<BuildingPortalDesc>(
                "building_portal_desc",
                &self.building_portal_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.building_repairs_desc = cache
            .apply_diff_to_table::<BuildingRepairsDesc>(
                "building_repairs_desc",
                &self.building_repairs_desc,
            )
            .with_updates_by_pk(|row| &row.cargo_id);
        diff.building_spawn_desc = cache
            .apply_diff_to_table::<BuildingSpawnDesc>(
                "building_spawn_desc",
                &self.building_spawn_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.building_state = cache
            .apply_diff_to_table::<BuildingState>("building_state", &self.building_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.building_type_desc = cache
            .apply_diff_to_table::<BuildingTypeDesc>("building_type_desc", &self.building_type_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.buy_order_state = cache
            .apply_diff_to_table::<AuctionListingState>("buy_order_state", &self.buy_order_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.cargo_desc = cache
            .apply_diff_to_table::<CargoDesc>("cargo_desc", &self.cargo_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.character_stat_desc = cache
            .apply_diff_to_table::<CharacterStatDesc>(
                "character_stat_desc",
                &self.character_stat_desc,
            )
            .with_updates_by_pk(|row| &row.stat_type);
        diff.character_stats_state = cache
            .apply_diff_to_table::<CharacterStatsState>(
                "character_stats_state",
                &self.character_stats_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.chat_message_state = cache
            .apply_diff_to_table::<ChatMessageState>("chat_message_state", &self.chat_message_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.chest_rarity_desc = cache
            .apply_diff_to_table::<ChestRarityDesc>("chest_rarity_desc", &self.chest_rarity_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.claim_local_state = cache
            .apply_diff_to_table::<ClaimLocalState>("claim_local_state", &self.claim_local_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.claim_member_state = cache
            .apply_diff_to_table::<ClaimMemberState>("claim_member_state", &self.claim_member_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.claim_recruitment_state = cache
            .apply_diff_to_table::<ClaimRecruitmentState>(
                "claim_recruitment_state",
                &self.claim_recruitment_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.claim_state = cache
            .apply_diff_to_table::<ClaimState>("claim_state", &self.claim_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.claim_tech_desc = cache
            .apply_diff_to_table::<ClaimTechDesc>("claim_tech_desc", &self.claim_tech_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.claim_tech_state = cache
            .apply_diff_to_table::<ClaimTechState>("claim_tech_state", &self.claim_tech_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.claim_tile_cost = cache
            .apply_diff_to_table::<ClaimTileCost>("claim_tile_cost", &self.claim_tile_cost)
            .with_updates_by_pk(|row| &row.tile_count);
        diff.claim_tile_state = cache
            .apply_diff_to_table::<ClaimTileState>("claim_tile_state", &self.claim_tile_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.climb_requirement_desc = cache
            .apply_diff_to_table::<ClimbRequirementDesc>(
                "climb_requirement_desc",
                &self.climb_requirement_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.closed_listing_state = cache
            .apply_diff_to_table::<ClosedListingState>(
                "closed_listing_state",
                &self.closed_listing_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.clothing_desc = cache
            .apply_diff_to_table::<ClothingDesc>("clothing_desc", &self.clothing_desc)
            .with_updates_by_pk(|row| &row.item_id);
        diff.collectible_desc = cache
            .apply_diff_to_table::<CollectibleDesc>("collectible_desc", &self.collectible_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.combat_action_desc = cache
            .apply_diff_to_table::<CombatActionDesc>("combat_action_desc", &self.combat_action_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.combat_state = cache
            .apply_diff_to_table::<CombatState>("combat_state", &self.combat_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.config = cache
            .apply_diff_to_table::<Config>("config", &self.config)
            .with_updates_by_pk(|row| &row.version);
        diff.construction_recipe_desc = cache
            .apply_diff_to_table::<ConstructionRecipeDesc>(
                "construction_recipe_desc",
                &self.construction_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.crafting_recipe_desc = cache
            .apply_diff_to_table::<CraftingRecipeDesc>(
                "crafting_recipe_desc",
                &self.crafting_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.deconstruction_recipe_desc = cache
            .apply_diff_to_table::<DeconstructionRecipeDesc>(
                "deconstruction_recipe_desc",
                &self.deconstruction_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.deployable_collectible_state = cache
            .apply_diff_to_table::<DeployableCollectibleState>(
                "deployable_collectible_state",
                &self.deployable_collectible_state,
            )
            .with_updates_by_pk(|row| &row.deployable_entity_id);
        diff.deployable_desc = cache
            .apply_diff_to_table::<DeployableDesc>("deployable_desc", &self.deployable_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.deployable_state = cache
            .apply_diff_to_table::<DeployableState>("deployable_state", &self.deployable_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.dimension_description_state = cache
            .apply_diff_to_table::<DimensionDescriptionState>(
                "dimension_description_state",
                &self.dimension_description_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.dimension_network_state = cache
            .apply_diff_to_table::<DimensionNetworkState>(
                "dimension_network_state",
                &self.dimension_network_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.distant_visible_entity = cache
            .apply_diff_to_table::<DistantVisibleEntity>(
                "distant_visible_entity",
                &self.distant_visible_entity,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.distant_visible_entity_desc = cache
            .apply_diff_to_table::<DistantVisibleEntityDesc>(
                "distant_visible_entity_desc",
                &self.distant_visible_entity_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.dropped_inventory_state = cache
            .apply_diff_to_table::<DroppedInventoryState>(
                "dropped_inventory_state",
                &self.dropped_inventory_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.duel_state = cache
            .apply_diff_to_table::<DuelState>("duel_state", &self.duel_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.elevator_desc = cache
            .apply_diff_to_table::<ElevatorDesc>("elevator_desc", &self.elevator_desc)
            .with_updates_by_pk(|row| &row.building_id);
        diff.emote_desc = cache
            .apply_diff_to_table::<EmoteDesc>("emote_desc", &self.emote_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.empire_chunk_state = cache
            .apply_diff_to_table::<EmpireChunkState>("empire_chunk_state", &self.empire_chunk_state)
            .with_updates_by_pk(|row| &row.chunk_index);
        diff.empire_color_desc = cache
            .apply_diff_to_table::<EmpireColorDesc>("empire_color_desc", &self.empire_color_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.empire_craft_supplies_timer = cache
            .apply_diff_to_table::<EmpireCraftSuppliesTimer>(
                "empire_craft_supplies_timer",
                &self.empire_craft_supplies_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.empire_decay_loop_timer = cache
            .apply_diff_to_table::<EmpireDecayLoopTimer>(
                "empire_decay_loop_timer",
                &self.empire_decay_loop_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.empire_directive_state = cache
            .apply_diff_to_table::<EmpireDirectiveState>(
                "empire_directive_state",
                &self.empire_directive_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_emblem_state = cache
            .apply_diff_to_table::<EmpireEmblemState>(
                "empire_emblem_state",
                &self.empire_emblem_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_expansion_state = cache
            .apply_diff_to_table::<EmpireExpansionState>(
                "empire_expansion_state",
                &self.empire_expansion_state,
            )
            .with_updates_by_pk(|row| &row.chunk_index);
        diff.empire_foundry_state = cache
            .apply_diff_to_table::<EmpireFoundryState>(
                "empire_foundry_state",
                &self.empire_foundry_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_icon_desc = cache
            .apply_diff_to_table::<EmpireIconDesc>("empire_icon_desc", &self.empire_icon_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.empire_log_state = cache
            .apply_diff_to_table::<EmpireLogState>("empire_log_state", &self.empire_log_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_node_siege_state = cache
            .apply_diff_to_table::<EmpireNodeSiegeState>(
                "empire_node_siege_state",
                &self.empire_node_siege_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_node_state = cache
            .apply_diff_to_table::<EmpireNodeState>("empire_node_state", &self.empire_node_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_notification_desc = cache
            .apply_diff_to_table::<EmpireNotificationDesc>(
                "empire_notification_desc",
                &self.empire_notification_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.empire_notification_state = cache
            .apply_diff_to_table::<EmpireNotificationState>(
                "empire_notification_state",
                &self.empire_notification_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_player_data_state = cache
            .apply_diff_to_table::<EmpirePlayerDataState>(
                "empire_player_data_state",
                &self.empire_player_data_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_player_log_state = cache
            .apply_diff_to_table::<EmpirePlayerLogState>(
                "empire_player_log_state",
                &self.empire_player_log_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_rank_desc = cache
            .apply_diff_to_table::<EmpireRankDesc>("empire_rank_desc", &self.empire_rank_desc)
            .with_updates_by_pk(|row| &row.rank);
        diff.empire_rank_state = cache
            .apply_diff_to_table::<EmpireRankState>("empire_rank_state", &self.empire_rank_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_settlement_state = cache
            .apply_diff_to_table::<EmpireSettlementState>(
                "empire_settlement_state",
                &self.empire_settlement_state,
            )
            .with_updates_by_pk(|row| &row.building_entity_id);
        diff.empire_siege_engine_state = cache
            .apply_diff_to_table::<EmpireSiegeEngineState>(
                "empire_siege_engine_state",
                &self.empire_siege_engine_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_siege_loop_timer = cache
            .apply_diff_to_table::<EmpireSiegeLoopTimer>(
                "empire_siege_loop_timer",
                &self.empire_siege_loop_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.empire_state = cache
            .apply_diff_to_table::<EmpireState>("empire_state", &self.empire_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.empire_supplies_desc = cache
            .apply_diff_to_table::<EmpireSuppliesDesc>(
                "empire_supplies_desc",
                &self.empire_supplies_desc,
            )
            .with_updates_by_pk(|row| &row.cargo_id);
        diff.empire_territory_desc = cache
            .apply_diff_to_table::<EmpireTerritoryDesc>(
                "empire_territory_desc",
                &self.empire_territory_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.enemy_ai_params_desc = cache
            .apply_diff_to_table::<EnemyAiParamsDesc>(
                "enemy_ai_params_desc",
                &self.enemy_ai_params_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.enemy_desc = cache
            .apply_diff_to_table::<EnemyDesc>("enemy_desc", &self.enemy_desc)
            .with_updates_by_pk(|row| &row.enemy_type);
        diff.enemy_mob_monitor_state = cache
            .apply_diff_to_table::<EnemyMobMonitorState>(
                "enemy_mob_monitor_state",
                &self.enemy_mob_monitor_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.enemy_state = cache
            .apply_diff_to_table::<EnemyState>("enemy_state", &self.enemy_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.environment_debuff_desc = cache
            .apply_diff_to_table::<EnvironmentDebuffDesc>(
                "environment_debuff_desc",
                &self.environment_debuff_desc,
            )
            .with_updates_by_pk(|row| &row.buff_id);
        diff.equipment_desc = cache
            .apply_diff_to_table::<EquipmentDesc>("equipment_desc", &self.equipment_desc)
            .with_updates_by_pk(|row| &row.item_id);
        diff.equipment_state = cache
            .apply_diff_to_table::<EquipmentState>("equipment_state", &self.equipment_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.experience_state = cache
            .apply_diff_to_table::<ExperienceState>("experience_state", &self.experience_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.exploration_chunks_state = cache
            .apply_diff_to_table::<ExplorationChunksState>(
                "exploration_chunks_state",
                &self.exploration_chunks_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.extract_outcome_state = cache
            .apply_diff_to_table::<ExtractOutcomeState>(
                "extract_outcome_state",
                &self.extract_outcome_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.extraction_recipe_desc = cache
            .apply_diff_to_table::<ExtractionRecipeDesc>(
                "extraction_recipe_desc",
                &self.extraction_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.food_desc = cache
            .apply_diff_to_table::<FoodDesc>("food_desc", &self.food_desc)
            .with_updates_by_pk(|row| &row.item_id);
        diff.footprint_tile_state = cache
            .apply_diff_to_table::<FootprintTileState>(
                "footprint_tile_state",
                &self.footprint_tile_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.force_generate_types = cache.apply_diff_to_table::<ForceGenerateTypes>(
            "force_generate_types",
            &self.force_generate_types,
        );
        diff.gate_desc = cache
            .apply_diff_to_table::<GateDesc>("gate_desc", &self.gate_desc)
            .with_updates_by_pk(|row| &row.building_id);
        diff.global_search_state = cache
            .apply_diff_to_table::<GlobalSearchState>(
                "global_search_state",
                &self.global_search_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.globals = cache
            .apply_diff_to_table::<Globals>("globals", &self.globals)
            .with_updates_by_pk(|row| &row.version);
        diff.granted_hub_item_state = cache
            .apply_diff_to_table::<GrantedHubItemState>(
                "granted_hub_item_state",
                &self.granted_hub_item_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.growth_state = cache
            .apply_diff_to_table::<GrowthState>("growth_state", &self.growth_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.health_state = cache
            .apply_diff_to_table::<HealthState>("health_state", &self.health_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.herd_state = cache
            .apply_diff_to_table::<HerdState>("herd_state", &self.herd_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.hexite_exchange_entry_desc = cache
            .apply_diff_to_table::<HexiteExchangeEntryDesc>(
                "hexite_exchange_entry_desc",
                &self.hexite_exchange_entry_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.identity_role = cache
            .apply_diff_to_table::<IdentityRole>("identity_role", &self.identity_role)
            .with_updates_by_pk(|row| &row.identity);
        diff.inter_module_message = cache
            .apply_diff_to_table::<InterModuleMessage>(
                "inter_module_message",
                &self.inter_module_message,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.inter_module_message_counter = cache
            .apply_diff_to_table::<InterModuleMessageCounter>(
                "inter_module_message_counter",
                &self.inter_module_message_counter,
            )
            .with_updates_by_pk(|row| &row.module_id);
        diff.inter_module_response_message_counter = cache
            .apply_diff_to_table::<InterModuleResponseMessageCounter>(
                "inter_module_response_message_counter",
                &self.inter_module_response_message_counter,
            )
            .with_updates_by_pk(|row| &row.dst_module_id);
        diff.interior_collapse_trigger_state = cache
            .apply_diff_to_table::<InteriorCollapseTriggerState>(
                "interior_collapse_trigger_state",
                &self.interior_collapse_trigger_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.interior_environment_desc = cache
            .apply_diff_to_table::<InteriorEnvironmentDesc>(
                "interior_environment_desc",
                &self.interior_environment_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.interior_instance_desc = cache
            .apply_diff_to_table::<InteriorInstanceDesc>(
                "interior_instance_desc",
                &self.interior_instance_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.interior_network_desc = cache
            .apply_diff_to_table::<InteriorNetworkDesc>(
                "interior_network_desc",
                &self.interior_network_desc,
            )
            .with_updates_by_pk(|row| &row.building_id);
        diff.interior_portal_connections_desc = cache
            .apply_diff_to_table::<InteriorPortalConnectionsDesc>(
                "interior_portal_connections_desc",
                &self.interior_portal_connections_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.interior_shape_desc = cache
            .apply_diff_to_table::<InteriorShapeDesc>(
                "interior_shape_desc",
                &self.interior_shape_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.interior_spawn_desc = cache
            .apply_diff_to_table::<InteriorSpawnDesc>(
                "interior_spawn_desc",
                &self.interior_spawn_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.inventory_state = cache
            .apply_diff_to_table::<InventoryState>("inventory_state", &self.inventory_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.item_conversion_recipe_desc = cache
            .apply_diff_to_table::<ItemConversionRecipeDesc>(
                "item_conversion_recipe_desc",
                &self.item_conversion_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.item_desc = cache
            .apply_diff_to_table::<ItemDesc>("item_desc", &self.item_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.item_list_desc = cache
            .apply_diff_to_table::<ItemListDesc>("item_list_desc", &self.item_list_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.knowledge_achievement_state = cache
            .apply_diff_to_table::<KnowledgeAchievementState>(
                "knowledge_achievement_state",
                &self.knowledge_achievement_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_battle_action_state = cache
            .apply_diff_to_table::<KnowledgeBattleActionState>(
                "knowledge_battle_action_state",
                &self.knowledge_battle_action_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_building_state = cache
            .apply_diff_to_table::<KnowledgeBuildingState>(
                "knowledge_building_state",
                &self.knowledge_building_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_cargo_state = cache
            .apply_diff_to_table::<KnowledgeCargoState>(
                "knowledge_cargo_state",
                &self.knowledge_cargo_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_claim_state = cache
            .apply_diff_to_table::<KnowledgeClaimState>(
                "knowledge_claim_state",
                &self.knowledge_claim_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_construction_state = cache
            .apply_diff_to_table::<KnowledgeConstructionState>(
                "knowledge_construction_state",
                &self.knowledge_construction_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_craft_state = cache
            .apply_diff_to_table::<KnowledgeCraftState>(
                "knowledge_craft_state",
                &self.knowledge_craft_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_deployable_state = cache
            .apply_diff_to_table::<KnowledgeDeployableState>(
                "knowledge_deployable_state",
                &self.knowledge_deployable_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_enemy_state = cache
            .apply_diff_to_table::<KnowledgeEnemyState>(
                "knowledge_enemy_state",
                &self.knowledge_enemy_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_extract_state = cache
            .apply_diff_to_table::<KnowledgeExtractState>(
                "knowledge_extract_state",
                &self.knowledge_extract_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_item_state = cache
            .apply_diff_to_table::<KnowledgeItemState>(
                "knowledge_item_state",
                &self.knowledge_item_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_lore_state = cache
            .apply_diff_to_table::<KnowledgeLoreState>(
                "knowledge_lore_state",
                &self.knowledge_lore_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_npc_state = cache
            .apply_diff_to_table::<KnowledgeNpcState>(
                "knowledge_npc_state",
                &self.knowledge_npc_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_paving_state = cache
            .apply_diff_to_table::<KnowledgePavingState>(
                "knowledge_paving_state",
                &self.knowledge_paving_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_pillar_shaping_state = cache
            .apply_diff_to_table::<KnowledgePillarShapingState>(
                "knowledge_pillar_shaping_state",
                &self.knowledge_pillar_shaping_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_resource_placement_state = cache
            .apply_diff_to_table::<KnowledgeResourcePlacementState>(
                "knowledge_resource_placement_state",
                &self.knowledge_resource_placement_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_resource_state = cache
            .apply_diff_to_table::<KnowledgeResourceState>(
                "knowledge_resource_state",
                &self.knowledge_resource_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_ruins_state = cache
            .apply_diff_to_table::<KnowledgeRuinsState>(
                "knowledge_ruins_state",
                &self.knowledge_ruins_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_scroll_desc = cache
            .apply_diff_to_table::<KnowledgeScrollDesc>(
                "knowledge_scroll_desc",
                &self.knowledge_scroll_desc,
            )
            .with_updates_by_pk(|row| &row.item_id);
        diff.knowledge_scroll_type_desc = cache
            .apply_diff_to_table::<KnowledgeScrollTypeDesc>(
                "knowledge_scroll_type_desc",
                &self.knowledge_scroll_type_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.knowledge_secondary_state = cache
            .apply_diff_to_table::<KnowledgeSecondaryState>(
                "knowledge_secondary_state",
                &self.knowledge_secondary_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.knowledge_stat_modifier_desc = cache
            .apply_diff_to_table::<KnowledgeStatModifierDesc>(
                "knowledge_stat_modifier_desc",
                &self.knowledge_stat_modifier_desc,
            )
            .with_updates_by_pk(|row| &row.secondary_knowledge_id);
        diff.knowledge_vault_state = cache
            .apply_diff_to_table::<KnowledgeVaultState>(
                "knowledge_vault_state",
                &self.knowledge_vault_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.light_source_state = cache
            .apply_diff_to_table::<LightSourceState>("light_source_state", &self.light_source_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.location_state = cache
            .apply_diff_to_table::<LocationState>("location_state", &self.location_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.loot_chest_desc = cache
            .apply_diff_to_table::<LootChestDesc>("loot_chest_desc", &self.loot_chest_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.loot_chest_state = cache
            .apply_diff_to_table::<LootChestState>("loot_chest_state", &self.loot_chest_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.loot_rarity_desc = cache
            .apply_diff_to_table::<LootRarityDesc>("loot_rarity_desc", &self.loot_rarity_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.loot_table_desc = cache
            .apply_diff_to_table::<LootTableDesc>("loot_table_desc", &self.loot_table_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.lost_items_state = cache
            .apply_diff_to_table::<LostItemsState>("lost_items_state", &self.lost_items_state)
            .with_updates_by_pk(|row| &row.inventory_entity_id);
        diff.mobile_entity_state = cache
            .apply_diff_to_table::<MobileEntityState>(
                "mobile_entity_state",
                &self.mobile_entity_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.mounting_state = cache
            .apply_diff_to_table::<MountingState>("mounting_state", &self.mounting_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.move_validation_strike_counter_state = cache
            .apply_diff_to_table::<MoveValidationStrikeCounterState>(
                "move_validation_strike_counter_state",
                &self.move_validation_strike_counter_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.npc_desc = cache
            .apply_diff_to_table::<NpcDesc>("npc_desc", &self.npc_desc)
            .with_updates_by_pk(|row| &row.npc_type);
        diff.npc_state = cache
            .apply_diff_to_table::<NpcState>("npc_state", &self.npc_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.onboarding_reward_desc = cache
            .apply_diff_to_table::<OnboardingRewardDesc>(
                "onboarding_reward_desc",
                &self.onboarding_reward_desc,
            )
            .with_updates_by_pk(|row| &row.state_id);
        diff.onboarding_state = cache
            .apply_diff_to_table::<OnboardingState>("onboarding_state", &self.onboarding_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.parameters_desc = cache
            .apply_diff_to_table::<ParametersDesc>("parameters_desc", &self.parameters_desc)
            .with_updates_by_pk(|row| &row.version);
        diff.parameters_player_move_desc = cache
            .apply_diff_to_table::<ParametersPlayerMoveDesc>(
                "parameters_player_move_desc",
                &self.parameters_player_move_desc,
            )
            .with_updates_by_pk(|row| &row.version);
        diff.passive_craft_state = cache
            .apply_diff_to_table::<PassiveCraftState>(
                "passive_craft_state",
                &self.passive_craft_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.pathfinding_desc = cache
            .apply_diff_to_table::<PathfindingDesc>("pathfinding_desc", &self.pathfinding_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.paved_tile_state = cache
            .apply_diff_to_table::<PavedTileState>("paved_tile_state", &self.paved_tile_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.paving_tile_desc = cache
            .apply_diff_to_table::<PavingTileDesc>("paving_tile_desc", &self.paving_tile_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.permission_state = cache
            .apply_diff_to_table::<PermissionState>("permission_state", &self.permission_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.pillar_shaping_desc = cache
            .apply_diff_to_table::<PillarShapingDesc>(
                "pillar_shaping_desc",
                &self.pillar_shaping_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.pillar_shaping_state = cache
            .apply_diff_to_table::<PillarShapingState>(
                "pillar_shaping_state",
                &self.pillar_shaping_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_action_desc = cache
            .apply_diff_to_table::<PlayerActionDesc>("player_action_desc", &self.player_action_desc)
            .with_updates_by_pk(|row| &row.action_type_id);
        diff.player_action_state = cache
            .apply_diff_to_table::<PlayerActionState>(
                "player_action_state",
                &self.player_action_state,
            )
            .with_updates_by_pk(|row| &row.auto_id);
        diff.player_developer_notification_state = cache
            .apply_diff_to_table::<PlayerDeveloperNotificationState>(
                "player_developer_notification_state",
                &self.player_developer_notification_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_housing_desc = cache
            .apply_diff_to_table::<PlayerHousingDesc>(
                "player_housing_desc",
                &self.player_housing_desc,
            )
            .with_updates_by_pk(|row| &row.secondary_knowledge_id);
        diff.player_housing_state = cache
            .apply_diff_to_table::<PlayerHousingState>(
                "player_housing_state",
                &self.player_housing_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_lowercase_username_state = cache
            .apply_diff_to_table::<PlayerLowercaseUsernameState>(
                "player_lowercase_username_state",
                &self.player_lowercase_username_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_note_state = cache
            .apply_diff_to_table::<PlayerNoteState>("player_note_state", &self.player_note_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_notification_event = cache
            .apply_diff_to_table::<PlayerNotificationEvent>(
                "player_notification_event",
                &self.player_notification_event,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.player_prefs_state = cache
            .apply_diff_to_table::<PlayerPrefsState>("player_prefs_state", &self.player_prefs_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_queue_state = cache
            .apply_diff_to_table::<PlayerQueueState>("player_queue_state", &self.player_queue_state)
            .with_updates_by_pk(|row| &row.index);
        diff.player_report_state = cache
            .apply_diff_to_table::<PlayerReportState>(
                "player_report_state",
                &self.player_report_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_report_state_timestamp = cache
            .apply_diff_to_table::<PlayerReportStateTimestamp>(
                "player_report_state_timestamp",
                &self.player_report_state_timestamp,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_shard_state = cache
            .apply_diff_to_table::<PlayerShardState>("player_shard_state", &self.player_shard_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_state = cache
            .apply_diff_to_table::<PlayerState>("player_state", &self.player_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_timestamp_state = cache
            .apply_diff_to_table::<PlayerTimestampState>(
                "player_timestamp_state",
                &self.player_timestamp_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_username_state = cache
            .apply_diff_to_table::<PlayerUsernameState>(
                "player_username_state",
                &self.player_username_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.player_vote_conclude_timer = cache
            .apply_diff_to_table::<PlayerVoteConcludeTimer>(
                "player_vote_conclude_timer",
                &self.player_vote_conclude_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.player_vote_state = cache
            .apply_diff_to_table::<PlayerVoteState>("player_vote_state", &self.player_vote_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.portal_state = cache
            .apply_diff_to_table::<PortalState>("portal_state", &self.portal_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.private_parameters_desc = cache
            .apply_diff_to_table::<PrivateParametersDesc>(
                "private_parameters_desc",
                &self.private_parameters_desc,
            )
            .with_updates_by_pk(|row| &row.version);
        diff.progressive_action_state = cache
            .apply_diff_to_table::<ProgressiveActionState>(
                "progressive_action_state",
                &self.progressive_action_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.project_site_state = cache
            .apply_diff_to_table::<ProjectSiteState>("project_site_state", &self.project_site_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.region_connection_info = cache
            .apply_diff_to_table::<RegionConnectionInfo>(
                "region_connection_info",
                &self.region_connection_info,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.region_population_info = cache
            .apply_diff_to_table::<RegionPopulationInfo>(
                "region_population_info",
                &self.region_population_info,
            )
            .with_updates_by_pk(|row| &row.region_id);
        diff.region_sign_in_parameters = cache
            .apply_diff_to_table::<RegionSignInParameters>(
                "region_sign_in_parameters",
                &self.region_sign_in_parameters,
            )
            .with_updates_by_pk(|row| &row.region_id);
        diff.rent_state = cache
            .apply_diff_to_table::<RentState>("rent_state", &self.rent_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.reserved_name_desc = cache
            .apply_diff_to_table::<ReservedNameDesc>("reserved_name_desc", &self.reserved_name_desc)
            .with_updates_by_pk(|row| &row.name);
        diff.resource_clump_desc = cache
            .apply_diff_to_table::<ResourceClumpDesc>(
                "resource_clump_desc",
                &self.resource_clump_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.resource_count = cache
            .apply_diff_to_table::<ResourceCount>("resource_count", &self.resource_count)
            .with_updates_by_pk(|row| &row.resource_id);
        diff.resource_desc = cache
            .apply_diff_to_table::<ResourceDesc>("resource_desc", &self.resource_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.resource_growth_recipe_desc = cache
            .apply_diff_to_table::<ResourceGrowthRecipeDesc>(
                "resource_growth_recipe_desc",
                &self.resource_growth_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.resource_health_state = cache
            .apply_diff_to_table::<ResourceHealthState>(
                "resource_health_state",
                &self.resource_health_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.resource_placement_recipe_desc = cache
            .apply_diff_to_table::<ResourcePlacementRecipeDesc>(
                "resource_placement_recipe_desc",
                &self.resource_placement_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.resource_state = cache
            .apply_diff_to_table::<ResourceState>("resource_state", &self.resource_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.rez_sick_long_term_state = cache
            .apply_diff_to_table::<RezSickLongTermState>(
                "rez_sick_long_term_state",
                &self.rez_sick_long_term_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.satiation_state = cache
            .apply_diff_to_table::<SatiationState>("satiation_state", &self.satiation_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.secondary_knowledge_desc = cache
            .apply_diff_to_table::<SecondaryKnowledgeDesc>(
                "secondary_knowledge_desc",
                &self.secondary_knowledge_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.sell_order_state = cache
            .apply_diff_to_table::<AuctionListingState>("sell_order_state", &self.sell_order_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.server_identity = cache
            .apply_diff_to_table::<ServerIdentity>("server_identity", &self.server_identity)
            .with_updates_by_pk(|row| &row.version);
        diff.signed_in_player_state = cache
            .apply_diff_to_table::<SignedInPlayerState>(
                "signed_in_player_state",
                &self.signed_in_player_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.single_resource_to_clump_desc = cache
            .apply_diff_to_table::<SingleResourceToClumpDesc>(
                "single_resource_to_clump_desc",
                &self.single_resource_to_clump_desc,
            )
            .with_updates_by_pk(|row| &row.resource_id);
        diff.skill_desc = cache
            .apply_diff_to_table::<SkillDesc>("skill_desc", &self.skill_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.staged_static_data = cache
            .apply_diff_to_table::<StagedStaticData>("staged_static_data", &self.staged_static_data)
            .with_updates_by_pk(|row| &row.version);
        diff.stamina_state = cache
            .apply_diff_to_table::<StaminaState>("stamina_state", &self.stamina_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.starving_player_state = cache
            .apply_diff_to_table::<StarvingPlayerState>(
                "starving_player_state",
                &self.starving_player_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.target_state = cache
            .apply_diff_to_table::<TargetState>("target_state", &self.target_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.targetable_state = cache
            .apply_diff_to_table::<TargetableState>("targetable_state", &self.targetable_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.targeting_matrix_desc = cache
            .apply_diff_to_table::<TargetingMatrixDesc>(
                "targeting_matrix_desc",
                &self.targeting_matrix_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.teleport_item_desc = cache
            .apply_diff_to_table::<TeleportItemDesc>("teleport_item_desc", &self.teleport_item_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.teleportation_energy_state = cache
            .apply_diff_to_table::<TeleportationEnergyState>(
                "teleportation_energy_state",
                &self.teleportation_energy_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.terraform_progress_state = cache
            .apply_diff_to_table::<TerraformProgressState>(
                "terraform_progress_state",
                &self.terraform_progress_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.terraform_recipe_desc = cache
            .apply_diff_to_table::<TerraformRecipeDesc>(
                "terraform_recipe_desc",
                &self.terraform_recipe_desc,
            )
            .with_updates_by_pk(|row| &row.difference);
        diff.terrain_chunk_state = cache
            .apply_diff_to_table::<TerrainChunkState>(
                "terrain_chunk_state",
                &self.terrain_chunk_state,
            )
            .with_updates_by_pk(|row| &row.chunk_index);
        diff.the_great_placeholder_table = cache
            .apply_diff_to_table::<TheGreatPlaceHolderTable>(
                "the_great_placeholder_table",
                &self.the_great_placeholder_table,
            )
            .with_updates_by_pk(|row| &row.placeholder_id);
        diff.threat_state = cache
            .apply_diff_to_table::<ThreatState>("threat_state", &self.threat_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.tool_desc = cache
            .apply_diff_to_table::<ToolDesc>("tool_desc", &self.tool_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.tool_type_desc = cache
            .apply_diff_to_table::<ToolTypeDesc>("tool_type_desc", &self.tool_type_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.toolbar_state = cache
            .apply_diff_to_table::<ToolbarState>("toolbar_state", &self.toolbar_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.trade_order_state = cache
            .apply_diff_to_table::<TradeOrderState>("trade_order_state", &self.trade_order_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.trade_session_state = cache
            .apply_diff_to_table::<TradeSessionState>(
                "trade_session_state",
                &self.trade_session_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.traveler_task_desc = cache
            .apply_diff_to_table::<TravelerTaskDesc>("traveler_task_desc", &self.traveler_task_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.traveler_task_state = cache
            .apply_diff_to_table::<TravelerTaskState>(
                "traveler_task_state",
                &self.traveler_task_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.traveler_trade_order_desc = cache
            .apply_diff_to_table::<TravelerTradeOrderDesc>(
                "traveler_trade_order_desc",
                &self.traveler_trade_order_desc,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.unclaimed_collectibles_state = cache
            .apply_diff_to_table::<UnclaimedCollectiblesState>(
                "unclaimed_collectibles_state",
                &self.unclaimed_collectibles_state,
            )
            .with_updates_by_pk(|row| &row.identity);
        diff.unclaimed_shards_state = cache
            .apply_diff_to_table::<UnclaimedShardsState>(
                "unclaimed_shards_state",
                &self.unclaimed_shards_state,
            )
            .with_updates_by_pk(|row| &row.identity);
        diff.user_authentication_state = cache
            .apply_diff_to_table::<UserAuthenticationState>(
                "user_authentication_state",
                &self.user_authentication_state,
            )
            .with_updates_by_pk(|row| &row.identity);
        diff.user_moderation_state = cache
            .apply_diff_to_table::<UserModerationState>(
                "user_moderation_state",
                &self.user_moderation_state,
            )
            .with_updates_by_pk(|row| &row.entity_id);
        diff.user_previous_region_state = cache
            .apply_diff_to_table::<UserPreviousRegionState>(
                "user_previous_region_state",
                &self.user_previous_region_state,
            )
            .with_updates_by_pk(|row| &row.identity);
        diff.user_region_state = cache
            .apply_diff_to_table::<UserRegionState>("user_region_state", &self.user_region_state)
            .with_updates_by_pk(|row| &row.identity);
        diff.user_state = cache
            .apply_diff_to_table::<UserState>("user_state", &self.user_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.vault_state = cache
            .apply_diff_to_table::<VaultState>("vault_state", &self.vault_state)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.wall_desc = cache
            .apply_diff_to_table::<WallDesc>("wall_desc", &self.wall_desc)
            .with_updates_by_pk(|row| &row.building_id);
        diff.weapon_desc = cache
            .apply_diff_to_table::<WeaponDesc>("weapon_desc", &self.weapon_desc)
            .with_updates_by_pk(|row| &row.item_id);
        diff.weapon_type_desc = cache
            .apply_diff_to_table::<WeaponTypeDesc>("weapon_type_desc", &self.weapon_type_desc)
            .with_updates_by_pk(|row| &row.id);
        diff.world_region_name_state = cache
            .apply_diff_to_table::<WorldRegionNameState>(
                "world_region_name_state",
                &self.world_region_name_state,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.world_region_state = cache
            .apply_diff_to_table::<WorldRegionState>("world_region_state", &self.world_region_state)
            .with_updates_by_pk(|row| &row.id);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    a_i_debug_state: __sdk::TableAppliedDiff<'r, AiDebugState>,
    achievement_desc: __sdk::TableAppliedDiff<'r, AchievementDesc>,
    action_state: __sdk::TableAppliedDiff<'r, ActionState>,
    active_buff_state: __sdk::TableAppliedDiff<'r, ActiveBuffState>,
    admin_broadcast: __sdk::TableAppliedDiff<'r, AdminBroadcast>,
    alert_desc: __sdk::TableAppliedDiff<'r, AlertDesc>,
    alert_state: __sdk::TableAppliedDiff<'r, AlertState>,
    attached_herds_state: __sdk::TableAppliedDiff<'r, AttachedHerdsState>,
    attack_outcome_state: __sdk::TableAppliedDiff<'r, AttackOutcomeState>,
    auto_claim_state: __sdk::TableAppliedDiff<'r, AutoClaimState>,
    barter_stall_state: __sdk::TableAppliedDiff<'r, BarterStallState>,
    biome_desc: __sdk::TableAppliedDiff<'r, BiomeDesc>,
    blocked_identity: __sdk::TableAppliedDiff<'r, BlockedIdentity>,
    buff_desc: __sdk::TableAppliedDiff<'r, BuffDesc>,
    buff_type_desc: __sdk::TableAppliedDiff<'r, BuffTypeDesc>,
    building_claim_desc: __sdk::TableAppliedDiff<'r, BuildingClaimDesc>,
    building_desc: __sdk::TableAppliedDiff<'r, BuildingDesc>,
    building_function_type_mapping_desc:
        __sdk::TableAppliedDiff<'r, BuildingFunctionTypeMappingDesc>,
    building_nickname_state: __sdk::TableAppliedDiff<'r, BuildingNicknameState>,
    building_portal_desc: __sdk::TableAppliedDiff<'r, BuildingPortalDesc>,
    building_repairs_desc: __sdk::TableAppliedDiff<'r, BuildingRepairsDesc>,
    building_spawn_desc: __sdk::TableAppliedDiff<'r, BuildingSpawnDesc>,
    building_state: __sdk::TableAppliedDiff<'r, BuildingState>,
    building_type_desc: __sdk::TableAppliedDiff<'r, BuildingTypeDesc>,
    buy_order_state: __sdk::TableAppliedDiff<'r, AuctionListingState>,
    cargo_desc: __sdk::TableAppliedDiff<'r, CargoDesc>,
    character_stat_desc: __sdk::TableAppliedDiff<'r, CharacterStatDesc>,
    character_stats_state: __sdk::TableAppliedDiff<'r, CharacterStatsState>,
    chat_message_state: __sdk::TableAppliedDiff<'r, ChatMessageState>,
    chest_rarity_desc: __sdk::TableAppliedDiff<'r, ChestRarityDesc>,
    claim_local_state: __sdk::TableAppliedDiff<'r, ClaimLocalState>,
    claim_member_state: __sdk::TableAppliedDiff<'r, ClaimMemberState>,
    claim_recruitment_state: __sdk::TableAppliedDiff<'r, ClaimRecruitmentState>,
    claim_state: __sdk::TableAppliedDiff<'r, ClaimState>,
    claim_tech_desc: __sdk::TableAppliedDiff<'r, ClaimTechDesc>,
    claim_tech_state: __sdk::TableAppliedDiff<'r, ClaimTechState>,
    claim_tile_cost: __sdk::TableAppliedDiff<'r, ClaimTileCost>,
    claim_tile_state: __sdk::TableAppliedDiff<'r, ClaimTileState>,
    climb_requirement_desc: __sdk::TableAppliedDiff<'r, ClimbRequirementDesc>,
    closed_listing_state: __sdk::TableAppliedDiff<'r, ClosedListingState>,
    clothing_desc: __sdk::TableAppliedDiff<'r, ClothingDesc>,
    collectible_desc: __sdk::TableAppliedDiff<'r, CollectibleDesc>,
    combat_action_desc: __sdk::TableAppliedDiff<'r, CombatActionDesc>,
    combat_state: __sdk::TableAppliedDiff<'r, CombatState>,
    config: __sdk::TableAppliedDiff<'r, Config>,
    construction_recipe_desc: __sdk::TableAppliedDiff<'r, ConstructionRecipeDesc>,
    crafting_recipe_desc: __sdk::TableAppliedDiff<'r, CraftingRecipeDesc>,
    deconstruction_recipe_desc: __sdk::TableAppliedDiff<'r, DeconstructionRecipeDesc>,
    deployable_collectible_state: __sdk::TableAppliedDiff<'r, DeployableCollectibleState>,
    deployable_desc: __sdk::TableAppliedDiff<'r, DeployableDesc>,
    deployable_state: __sdk::TableAppliedDiff<'r, DeployableState>,
    dimension_description_state: __sdk::TableAppliedDiff<'r, DimensionDescriptionState>,
    dimension_network_state: __sdk::TableAppliedDiff<'r, DimensionNetworkState>,
    distant_visible_entity: __sdk::TableAppliedDiff<'r, DistantVisibleEntity>,
    distant_visible_entity_desc: __sdk::TableAppliedDiff<'r, DistantVisibleEntityDesc>,
    dropped_inventory_state: __sdk::TableAppliedDiff<'r, DroppedInventoryState>,
    duel_state: __sdk::TableAppliedDiff<'r, DuelState>,
    elevator_desc: __sdk::TableAppliedDiff<'r, ElevatorDesc>,
    emote_desc: __sdk::TableAppliedDiff<'r, EmoteDesc>,
    empire_chunk_state: __sdk::TableAppliedDiff<'r, EmpireChunkState>,
    empire_color_desc: __sdk::TableAppliedDiff<'r, EmpireColorDesc>,
    empire_craft_supplies_timer: __sdk::TableAppliedDiff<'r, EmpireCraftSuppliesTimer>,
    empire_decay_loop_timer: __sdk::TableAppliedDiff<'r, EmpireDecayLoopTimer>,
    empire_directive_state: __sdk::TableAppliedDiff<'r, EmpireDirectiveState>,
    empire_emblem_state: __sdk::TableAppliedDiff<'r, EmpireEmblemState>,
    empire_expansion_state: __sdk::TableAppliedDiff<'r, EmpireExpansionState>,
    empire_foundry_state: __sdk::TableAppliedDiff<'r, EmpireFoundryState>,
    empire_icon_desc: __sdk::TableAppliedDiff<'r, EmpireIconDesc>,
    empire_log_state: __sdk::TableAppliedDiff<'r, EmpireLogState>,
    empire_node_siege_state: __sdk::TableAppliedDiff<'r, EmpireNodeSiegeState>,
    empire_node_state: __sdk::TableAppliedDiff<'r, EmpireNodeState>,
    empire_notification_desc: __sdk::TableAppliedDiff<'r, EmpireNotificationDesc>,
    empire_notification_state: __sdk::TableAppliedDiff<'r, EmpireNotificationState>,
    empire_player_data_state: __sdk::TableAppliedDiff<'r, EmpirePlayerDataState>,
    empire_player_log_state: __sdk::TableAppliedDiff<'r, EmpirePlayerLogState>,
    empire_rank_desc: __sdk::TableAppliedDiff<'r, EmpireRankDesc>,
    empire_rank_state: __sdk::TableAppliedDiff<'r, EmpireRankState>,
    empire_settlement_state: __sdk::TableAppliedDiff<'r, EmpireSettlementState>,
    empire_siege_engine_state: __sdk::TableAppliedDiff<'r, EmpireSiegeEngineState>,
    empire_siege_loop_timer: __sdk::TableAppliedDiff<'r, EmpireSiegeLoopTimer>,
    empire_state: __sdk::TableAppliedDiff<'r, EmpireState>,
    empire_supplies_desc: __sdk::TableAppliedDiff<'r, EmpireSuppliesDesc>,
    empire_territory_desc: __sdk::TableAppliedDiff<'r, EmpireTerritoryDesc>,
    enemy_ai_params_desc: __sdk::TableAppliedDiff<'r, EnemyAiParamsDesc>,
    enemy_desc: __sdk::TableAppliedDiff<'r, EnemyDesc>,
    enemy_mob_monitor_state: __sdk::TableAppliedDiff<'r, EnemyMobMonitorState>,
    enemy_state: __sdk::TableAppliedDiff<'r, EnemyState>,
    environment_debuff_desc: __sdk::TableAppliedDiff<'r, EnvironmentDebuffDesc>,
    equipment_desc: __sdk::TableAppliedDiff<'r, EquipmentDesc>,
    equipment_state: __sdk::TableAppliedDiff<'r, EquipmentState>,
    experience_state: __sdk::TableAppliedDiff<'r, ExperienceState>,
    exploration_chunks_state: __sdk::TableAppliedDiff<'r, ExplorationChunksState>,
    extract_outcome_state: __sdk::TableAppliedDiff<'r, ExtractOutcomeState>,
    extraction_recipe_desc: __sdk::TableAppliedDiff<'r, ExtractionRecipeDesc>,
    food_desc: __sdk::TableAppliedDiff<'r, FoodDesc>,
    footprint_tile_state: __sdk::TableAppliedDiff<'r, FootprintTileState>,
    force_generate_types: __sdk::TableAppliedDiff<'r, ForceGenerateTypes>,
    gate_desc: __sdk::TableAppliedDiff<'r, GateDesc>,
    global_search_state: __sdk::TableAppliedDiff<'r, GlobalSearchState>,
    globals: __sdk::TableAppliedDiff<'r, Globals>,
    granted_hub_item_state: __sdk::TableAppliedDiff<'r, GrantedHubItemState>,
    growth_state: __sdk::TableAppliedDiff<'r, GrowthState>,
    health_state: __sdk::TableAppliedDiff<'r, HealthState>,
    herd_state: __sdk::TableAppliedDiff<'r, HerdState>,
    hexite_exchange_entry_desc: __sdk::TableAppliedDiff<'r, HexiteExchangeEntryDesc>,
    identity_role: __sdk::TableAppliedDiff<'r, IdentityRole>,
    inter_module_message: __sdk::TableAppliedDiff<'r, InterModuleMessage>,
    inter_module_message_counter: __sdk::TableAppliedDiff<'r, InterModuleMessageCounter>,
    inter_module_response_message_counter:
        __sdk::TableAppliedDiff<'r, InterModuleResponseMessageCounter>,
    interior_collapse_trigger_state: __sdk::TableAppliedDiff<'r, InteriorCollapseTriggerState>,
    interior_environment_desc: __sdk::TableAppliedDiff<'r, InteriorEnvironmentDesc>,
    interior_instance_desc: __sdk::TableAppliedDiff<'r, InteriorInstanceDesc>,
    interior_network_desc: __sdk::TableAppliedDiff<'r, InteriorNetworkDesc>,
    interior_portal_connections_desc: __sdk::TableAppliedDiff<'r, InteriorPortalConnectionsDesc>,
    interior_shape_desc: __sdk::TableAppliedDiff<'r, InteriorShapeDesc>,
    interior_spawn_desc: __sdk::TableAppliedDiff<'r, InteriorSpawnDesc>,
    inventory_state: __sdk::TableAppliedDiff<'r, InventoryState>,
    item_conversion_recipe_desc: __sdk::TableAppliedDiff<'r, ItemConversionRecipeDesc>,
    item_desc: __sdk::TableAppliedDiff<'r, ItemDesc>,
    item_list_desc: __sdk::TableAppliedDiff<'r, ItemListDesc>,
    knowledge_achievement_state: __sdk::TableAppliedDiff<'r, KnowledgeAchievementState>,
    knowledge_battle_action_state: __sdk::TableAppliedDiff<'r, KnowledgeBattleActionState>,
    knowledge_building_state: __sdk::TableAppliedDiff<'r, KnowledgeBuildingState>,
    knowledge_cargo_state: __sdk::TableAppliedDiff<'r, KnowledgeCargoState>,
    knowledge_claim_state: __sdk::TableAppliedDiff<'r, KnowledgeClaimState>,
    knowledge_construction_state: __sdk::TableAppliedDiff<'r, KnowledgeConstructionState>,
    knowledge_craft_state: __sdk::TableAppliedDiff<'r, KnowledgeCraftState>,
    knowledge_deployable_state: __sdk::TableAppliedDiff<'r, KnowledgeDeployableState>,
    knowledge_enemy_state: __sdk::TableAppliedDiff<'r, KnowledgeEnemyState>,
    knowledge_extract_state: __sdk::TableAppliedDiff<'r, KnowledgeExtractState>,
    knowledge_item_state: __sdk::TableAppliedDiff<'r, KnowledgeItemState>,
    knowledge_lore_state: __sdk::TableAppliedDiff<'r, KnowledgeLoreState>,
    knowledge_npc_state: __sdk::TableAppliedDiff<'r, KnowledgeNpcState>,
    knowledge_paving_state: __sdk::TableAppliedDiff<'r, KnowledgePavingState>,
    knowledge_pillar_shaping_state: __sdk::TableAppliedDiff<'r, KnowledgePillarShapingState>,
    knowledge_resource_placement_state:
        __sdk::TableAppliedDiff<'r, KnowledgeResourcePlacementState>,
    knowledge_resource_state: __sdk::TableAppliedDiff<'r, KnowledgeResourceState>,
    knowledge_ruins_state: __sdk::TableAppliedDiff<'r, KnowledgeRuinsState>,
    knowledge_scroll_desc: __sdk::TableAppliedDiff<'r, KnowledgeScrollDesc>,
    knowledge_scroll_type_desc: __sdk::TableAppliedDiff<'r, KnowledgeScrollTypeDesc>,
    knowledge_secondary_state: __sdk::TableAppliedDiff<'r, KnowledgeSecondaryState>,
    knowledge_stat_modifier_desc: __sdk::TableAppliedDiff<'r, KnowledgeStatModifierDesc>,
    knowledge_vault_state: __sdk::TableAppliedDiff<'r, KnowledgeVaultState>,
    light_source_state: __sdk::TableAppliedDiff<'r, LightSourceState>,
    location_state: __sdk::TableAppliedDiff<'r, LocationState>,
    loot_chest_desc: __sdk::TableAppliedDiff<'r, LootChestDesc>,
    loot_chest_state: __sdk::TableAppliedDiff<'r, LootChestState>,
    loot_rarity_desc: __sdk::TableAppliedDiff<'r, LootRarityDesc>,
    loot_table_desc: __sdk::TableAppliedDiff<'r, LootTableDesc>,
    lost_items_state: __sdk::TableAppliedDiff<'r, LostItemsState>,
    mobile_entity_state: __sdk::TableAppliedDiff<'r, MobileEntityState>,
    mounting_state: __sdk::TableAppliedDiff<'r, MountingState>,
    move_validation_strike_counter_state:
        __sdk::TableAppliedDiff<'r, MoveValidationStrikeCounterState>,
    npc_desc: __sdk::TableAppliedDiff<'r, NpcDesc>,
    npc_state: __sdk::TableAppliedDiff<'r, NpcState>,
    onboarding_reward_desc: __sdk::TableAppliedDiff<'r, OnboardingRewardDesc>,
    onboarding_state: __sdk::TableAppliedDiff<'r, OnboardingState>,
    parameters_desc: __sdk::TableAppliedDiff<'r, ParametersDesc>,
    parameters_player_move_desc: __sdk::TableAppliedDiff<'r, ParametersPlayerMoveDesc>,
    passive_craft_state: __sdk::TableAppliedDiff<'r, PassiveCraftState>,
    pathfinding_desc: __sdk::TableAppliedDiff<'r, PathfindingDesc>,
    paved_tile_state: __sdk::TableAppliedDiff<'r, PavedTileState>,
    paving_tile_desc: __sdk::TableAppliedDiff<'r, PavingTileDesc>,
    permission_state: __sdk::TableAppliedDiff<'r, PermissionState>,
    pillar_shaping_desc: __sdk::TableAppliedDiff<'r, PillarShapingDesc>,
    pillar_shaping_state: __sdk::TableAppliedDiff<'r, PillarShapingState>,
    player_action_desc: __sdk::TableAppliedDiff<'r, PlayerActionDesc>,
    player_action_state: __sdk::TableAppliedDiff<'r, PlayerActionState>,
    player_developer_notification_state:
        __sdk::TableAppliedDiff<'r, PlayerDeveloperNotificationState>,
    player_housing_desc: __sdk::TableAppliedDiff<'r, PlayerHousingDesc>,
    player_housing_state: __sdk::TableAppliedDiff<'r, PlayerHousingState>,
    player_lowercase_username_state: __sdk::TableAppliedDiff<'r, PlayerLowercaseUsernameState>,
    player_note_state: __sdk::TableAppliedDiff<'r, PlayerNoteState>,
    player_notification_event: __sdk::TableAppliedDiff<'r, PlayerNotificationEvent>,
    player_prefs_state: __sdk::TableAppliedDiff<'r, PlayerPrefsState>,
    player_queue_state: __sdk::TableAppliedDiff<'r, PlayerQueueState>,
    player_report_state: __sdk::TableAppliedDiff<'r, PlayerReportState>,
    player_report_state_timestamp: __sdk::TableAppliedDiff<'r, PlayerReportStateTimestamp>,
    player_shard_state: __sdk::TableAppliedDiff<'r, PlayerShardState>,
    player_state: __sdk::TableAppliedDiff<'r, PlayerState>,
    player_timestamp_state: __sdk::TableAppliedDiff<'r, PlayerTimestampState>,
    player_username_state: __sdk::TableAppliedDiff<'r, PlayerUsernameState>,
    player_vote_conclude_timer: __sdk::TableAppliedDiff<'r, PlayerVoteConcludeTimer>,
    player_vote_state: __sdk::TableAppliedDiff<'r, PlayerVoteState>,
    portal_state: __sdk::TableAppliedDiff<'r, PortalState>,
    private_parameters_desc: __sdk::TableAppliedDiff<'r, PrivateParametersDesc>,
    progressive_action_state: __sdk::TableAppliedDiff<'r, ProgressiveActionState>,
    project_site_state: __sdk::TableAppliedDiff<'r, ProjectSiteState>,
    region_connection_info: __sdk::TableAppliedDiff<'r, RegionConnectionInfo>,
    region_population_info: __sdk::TableAppliedDiff<'r, RegionPopulationInfo>,
    region_sign_in_parameters: __sdk::TableAppliedDiff<'r, RegionSignInParameters>,
    rent_state: __sdk::TableAppliedDiff<'r, RentState>,
    reserved_name_desc: __sdk::TableAppliedDiff<'r, ReservedNameDesc>,
    resource_clump_desc: __sdk::TableAppliedDiff<'r, ResourceClumpDesc>,
    resource_count: __sdk::TableAppliedDiff<'r, ResourceCount>,
    resource_desc: __sdk::TableAppliedDiff<'r, ResourceDesc>,
    resource_growth_recipe_desc: __sdk::TableAppliedDiff<'r, ResourceGrowthRecipeDesc>,
    resource_health_state: __sdk::TableAppliedDiff<'r, ResourceHealthState>,
    resource_placement_recipe_desc: __sdk::TableAppliedDiff<'r, ResourcePlacementRecipeDesc>,
    resource_state: __sdk::TableAppliedDiff<'r, ResourceState>,
    rez_sick_long_term_state: __sdk::TableAppliedDiff<'r, RezSickLongTermState>,
    satiation_state: __sdk::TableAppliedDiff<'r, SatiationState>,
    secondary_knowledge_desc: __sdk::TableAppliedDiff<'r, SecondaryKnowledgeDesc>,
    sell_order_state: __sdk::TableAppliedDiff<'r, AuctionListingState>,
    server_identity: __sdk::TableAppliedDiff<'r, ServerIdentity>,
    signed_in_player_state: __sdk::TableAppliedDiff<'r, SignedInPlayerState>,
    single_resource_to_clump_desc: __sdk::TableAppliedDiff<'r, SingleResourceToClumpDesc>,
    skill_desc: __sdk::TableAppliedDiff<'r, SkillDesc>,
    staged_static_data: __sdk::TableAppliedDiff<'r, StagedStaticData>,
    stamina_state: __sdk::TableAppliedDiff<'r, StaminaState>,
    starving_player_state: __sdk::TableAppliedDiff<'r, StarvingPlayerState>,
    target_state: __sdk::TableAppliedDiff<'r, TargetState>,
    targetable_state: __sdk::TableAppliedDiff<'r, TargetableState>,
    targeting_matrix_desc: __sdk::TableAppliedDiff<'r, TargetingMatrixDesc>,
    teleport_item_desc: __sdk::TableAppliedDiff<'r, TeleportItemDesc>,
    teleportation_energy_state: __sdk::TableAppliedDiff<'r, TeleportationEnergyState>,
    terraform_progress_state: __sdk::TableAppliedDiff<'r, TerraformProgressState>,
    terraform_recipe_desc: __sdk::TableAppliedDiff<'r, TerraformRecipeDesc>,
    terrain_chunk_state: __sdk::TableAppliedDiff<'r, TerrainChunkState>,
    the_great_placeholder_table: __sdk::TableAppliedDiff<'r, TheGreatPlaceHolderTable>,
    threat_state: __sdk::TableAppliedDiff<'r, ThreatState>,
    tool_desc: __sdk::TableAppliedDiff<'r, ToolDesc>,
    tool_type_desc: __sdk::TableAppliedDiff<'r, ToolTypeDesc>,
    toolbar_state: __sdk::TableAppliedDiff<'r, ToolbarState>,
    trade_order_state: __sdk::TableAppliedDiff<'r, TradeOrderState>,
    trade_session_state: __sdk::TableAppliedDiff<'r, TradeSessionState>,
    traveler_task_desc: __sdk::TableAppliedDiff<'r, TravelerTaskDesc>,
    traveler_task_state: __sdk::TableAppliedDiff<'r, TravelerTaskState>,
    traveler_trade_order_desc: __sdk::TableAppliedDiff<'r, TravelerTradeOrderDesc>,
    unclaimed_collectibles_state: __sdk::TableAppliedDiff<'r, UnclaimedCollectiblesState>,
    unclaimed_shards_state: __sdk::TableAppliedDiff<'r, UnclaimedShardsState>,
    user_authentication_state: __sdk::TableAppliedDiff<'r, UserAuthenticationState>,
    user_moderation_state: __sdk::TableAppliedDiff<'r, UserModerationState>,
    user_previous_region_state: __sdk::TableAppliedDiff<'r, UserPreviousRegionState>,
    user_region_state: __sdk::TableAppliedDiff<'r, UserRegionState>,
    user_state: __sdk::TableAppliedDiff<'r, UserState>,
    vault_state: __sdk::TableAppliedDiff<'r, VaultState>,
    wall_desc: __sdk::TableAppliedDiff<'r, WallDesc>,
    weapon_desc: __sdk::TableAppliedDiff<'r, WeaponDesc>,
    weapon_type_desc: __sdk::TableAppliedDiff<'r, WeaponTypeDesc>,
    world_region_name_state: __sdk::TableAppliedDiff<'r, WorldRegionNameState>,
    world_region_state: __sdk::TableAppliedDiff<'r, WorldRegionState>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<AiDebugState>(
            "a_i_debug_state",
            &self.a_i_debug_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AchievementDesc>(
            "achievement_desc",
            &self.achievement_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ActionState>(
            "action_state",
            &self.action_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ActiveBuffState>(
            "active_buff_state",
            &self.active_buff_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AdminBroadcast>(
            "admin_broadcast",
            &self.admin_broadcast,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AlertDesc>("alert_desc", &self.alert_desc, event);
        callbacks.invoke_table_row_callbacks::<AlertState>("alert_state", &self.alert_state, event);
        callbacks.invoke_table_row_callbacks::<AttachedHerdsState>(
            "attached_herds_state",
            &self.attached_herds_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AttackOutcomeState>(
            "attack_outcome_state",
            &self.attack_outcome_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AutoClaimState>(
            "auto_claim_state",
            &self.auto_claim_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BarterStallState>(
            "barter_stall_state",
            &self.barter_stall_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BiomeDesc>("biome_desc", &self.biome_desc, event);
        callbacks.invoke_table_row_callbacks::<BlockedIdentity>(
            "blocked_identity",
            &self.blocked_identity,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuffDesc>("buff_desc", &self.buff_desc, event);
        callbacks.invoke_table_row_callbacks::<BuffTypeDesc>(
            "buff_type_desc",
            &self.buff_type_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingClaimDesc>(
            "building_claim_desc",
            &self.building_claim_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingDesc>(
            "building_desc",
            &self.building_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingFunctionTypeMappingDesc>(
            "building_function_type_mapping_desc",
            &self.building_function_type_mapping_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingNicknameState>(
            "building_nickname_state",
            &self.building_nickname_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingPortalDesc>(
            "building_portal_desc",
            &self.building_portal_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingRepairsDesc>(
            "building_repairs_desc",
            &self.building_repairs_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingSpawnDesc>(
            "building_spawn_desc",
            &self.building_spawn_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingState>(
            "building_state",
            &self.building_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<BuildingTypeDesc>(
            "building_type_desc",
            &self.building_type_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AuctionListingState>(
            "buy_order_state",
            &self.buy_order_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CargoDesc>("cargo_desc", &self.cargo_desc, event);
        callbacks.invoke_table_row_callbacks::<CharacterStatDesc>(
            "character_stat_desc",
            &self.character_stat_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CharacterStatsState>(
            "character_stats_state",
            &self.character_stats_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ChatMessageState>(
            "chat_message_state",
            &self.chat_message_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ChestRarityDesc>(
            "chest_rarity_desc",
            &self.chest_rarity_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimLocalState>(
            "claim_local_state",
            &self.claim_local_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimMemberState>(
            "claim_member_state",
            &self.claim_member_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimRecruitmentState>(
            "claim_recruitment_state",
            &self.claim_recruitment_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimState>("claim_state", &self.claim_state, event);
        callbacks.invoke_table_row_callbacks::<ClaimTechDesc>(
            "claim_tech_desc",
            &self.claim_tech_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimTechState>(
            "claim_tech_state",
            &self.claim_tech_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimTileCost>(
            "claim_tile_cost",
            &self.claim_tile_cost,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClaimTileState>(
            "claim_tile_state",
            &self.claim_tile_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClimbRequirementDesc>(
            "climb_requirement_desc",
            &self.climb_requirement_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClosedListingState>(
            "closed_listing_state",
            &self.closed_listing_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ClothingDesc>(
            "clothing_desc",
            &self.clothing_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CollectibleDesc>(
            "collectible_desc",
            &self.collectible_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CombatActionDesc>(
            "combat_action_desc",
            &self.combat_action_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CombatState>(
            "combat_state",
            &self.combat_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Config>("config", &self.config, event);
        callbacks.invoke_table_row_callbacks::<ConstructionRecipeDesc>(
            "construction_recipe_desc",
            &self.construction_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CraftingRecipeDesc>(
            "crafting_recipe_desc",
            &self.crafting_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DeconstructionRecipeDesc>(
            "deconstruction_recipe_desc",
            &self.deconstruction_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DeployableCollectibleState>(
            "deployable_collectible_state",
            &self.deployable_collectible_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DeployableDesc>(
            "deployable_desc",
            &self.deployable_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DeployableState>(
            "deployable_state",
            &self.deployable_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DimensionDescriptionState>(
            "dimension_description_state",
            &self.dimension_description_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DimensionNetworkState>(
            "dimension_network_state",
            &self.dimension_network_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DistantVisibleEntity>(
            "distant_visible_entity",
            &self.distant_visible_entity,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DistantVisibleEntityDesc>(
            "distant_visible_entity_desc",
            &self.distant_visible_entity_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DroppedInventoryState>(
            "dropped_inventory_state",
            &self.dropped_inventory_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DuelState>("duel_state", &self.duel_state, event);
        callbacks.invoke_table_row_callbacks::<ElevatorDesc>(
            "elevator_desc",
            &self.elevator_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmoteDesc>("emote_desc", &self.emote_desc, event);
        callbacks.invoke_table_row_callbacks::<EmpireChunkState>(
            "empire_chunk_state",
            &self.empire_chunk_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireColorDesc>(
            "empire_color_desc",
            &self.empire_color_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireCraftSuppliesTimer>(
            "empire_craft_supplies_timer",
            &self.empire_craft_supplies_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireDecayLoopTimer>(
            "empire_decay_loop_timer",
            &self.empire_decay_loop_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireDirectiveState>(
            "empire_directive_state",
            &self.empire_directive_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireEmblemState>(
            "empire_emblem_state",
            &self.empire_emblem_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireExpansionState>(
            "empire_expansion_state",
            &self.empire_expansion_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireFoundryState>(
            "empire_foundry_state",
            &self.empire_foundry_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireIconDesc>(
            "empire_icon_desc",
            &self.empire_icon_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireLogState>(
            "empire_log_state",
            &self.empire_log_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireNodeSiegeState>(
            "empire_node_siege_state",
            &self.empire_node_siege_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireNodeState>(
            "empire_node_state",
            &self.empire_node_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireNotificationDesc>(
            "empire_notification_desc",
            &self.empire_notification_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireNotificationState>(
            "empire_notification_state",
            &self.empire_notification_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpirePlayerDataState>(
            "empire_player_data_state",
            &self.empire_player_data_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpirePlayerLogState>(
            "empire_player_log_state",
            &self.empire_player_log_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireRankDesc>(
            "empire_rank_desc",
            &self.empire_rank_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireRankState>(
            "empire_rank_state",
            &self.empire_rank_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireSettlementState>(
            "empire_settlement_state",
            &self.empire_settlement_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireSiegeEngineState>(
            "empire_siege_engine_state",
            &self.empire_siege_engine_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireSiegeLoopTimer>(
            "empire_siege_loop_timer",
            &self.empire_siege_loop_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireState>(
            "empire_state",
            &self.empire_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireSuppliesDesc>(
            "empire_supplies_desc",
            &self.empire_supplies_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EmpireTerritoryDesc>(
            "empire_territory_desc",
            &self.empire_territory_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EnemyAiParamsDesc>(
            "enemy_ai_params_desc",
            &self.enemy_ai_params_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EnemyDesc>("enemy_desc", &self.enemy_desc, event);
        callbacks.invoke_table_row_callbacks::<EnemyMobMonitorState>(
            "enemy_mob_monitor_state",
            &self.enemy_mob_monitor_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EnemyState>("enemy_state", &self.enemy_state, event);
        callbacks.invoke_table_row_callbacks::<EnvironmentDebuffDesc>(
            "environment_debuff_desc",
            &self.environment_debuff_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EquipmentDesc>(
            "equipment_desc",
            &self.equipment_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<EquipmentState>(
            "equipment_state",
            &self.equipment_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ExperienceState>(
            "experience_state",
            &self.experience_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ExplorationChunksState>(
            "exploration_chunks_state",
            &self.exploration_chunks_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ExtractOutcomeState>(
            "extract_outcome_state",
            &self.extract_outcome_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ExtractionRecipeDesc>(
            "extraction_recipe_desc",
            &self.extraction_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<FoodDesc>("food_desc", &self.food_desc, event);
        callbacks.invoke_table_row_callbacks::<FootprintTileState>(
            "footprint_tile_state",
            &self.footprint_tile_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ForceGenerateTypes>(
            "force_generate_types",
            &self.force_generate_types,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GateDesc>("gate_desc", &self.gate_desc, event);
        callbacks.invoke_table_row_callbacks::<GlobalSearchState>(
            "global_search_state",
            &self.global_search_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Globals>("globals", &self.globals, event);
        callbacks.invoke_table_row_callbacks::<GrantedHubItemState>(
            "granted_hub_item_state",
            &self.granted_hub_item_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GrowthState>(
            "growth_state",
            &self.growth_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<HealthState>(
            "health_state",
            &self.health_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<HerdState>("herd_state", &self.herd_state, event);
        callbacks.invoke_table_row_callbacks::<HexiteExchangeEntryDesc>(
            "hexite_exchange_entry_desc",
            &self.hexite_exchange_entry_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<IdentityRole>(
            "identity_role",
            &self.identity_role,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InterModuleMessage>(
            "inter_module_message",
            &self.inter_module_message,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InterModuleMessageCounter>(
            "inter_module_message_counter",
            &self.inter_module_message_counter,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InterModuleResponseMessageCounter>(
            "inter_module_response_message_counter",
            &self.inter_module_response_message_counter,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorCollapseTriggerState>(
            "interior_collapse_trigger_state",
            &self.interior_collapse_trigger_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorEnvironmentDesc>(
            "interior_environment_desc",
            &self.interior_environment_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorInstanceDesc>(
            "interior_instance_desc",
            &self.interior_instance_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorNetworkDesc>(
            "interior_network_desc",
            &self.interior_network_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorPortalConnectionsDesc>(
            "interior_portal_connections_desc",
            &self.interior_portal_connections_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorShapeDesc>(
            "interior_shape_desc",
            &self.interior_shape_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InteriorSpawnDesc>(
            "interior_spawn_desc",
            &self.interior_spawn_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<InventoryState>(
            "inventory_state",
            &self.inventory_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ItemConversionRecipeDesc>(
            "item_conversion_recipe_desc",
            &self.item_conversion_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ItemDesc>("item_desc", &self.item_desc, event);
        callbacks.invoke_table_row_callbacks::<ItemListDesc>(
            "item_list_desc",
            &self.item_list_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeAchievementState>(
            "knowledge_achievement_state",
            &self.knowledge_achievement_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeBattleActionState>(
            "knowledge_battle_action_state",
            &self.knowledge_battle_action_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeBuildingState>(
            "knowledge_building_state",
            &self.knowledge_building_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeCargoState>(
            "knowledge_cargo_state",
            &self.knowledge_cargo_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeClaimState>(
            "knowledge_claim_state",
            &self.knowledge_claim_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeConstructionState>(
            "knowledge_construction_state",
            &self.knowledge_construction_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeCraftState>(
            "knowledge_craft_state",
            &self.knowledge_craft_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeDeployableState>(
            "knowledge_deployable_state",
            &self.knowledge_deployable_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeEnemyState>(
            "knowledge_enemy_state",
            &self.knowledge_enemy_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeExtractState>(
            "knowledge_extract_state",
            &self.knowledge_extract_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeItemState>(
            "knowledge_item_state",
            &self.knowledge_item_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeLoreState>(
            "knowledge_lore_state",
            &self.knowledge_lore_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeNpcState>(
            "knowledge_npc_state",
            &self.knowledge_npc_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgePavingState>(
            "knowledge_paving_state",
            &self.knowledge_paving_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgePillarShapingState>(
            "knowledge_pillar_shaping_state",
            &self.knowledge_pillar_shaping_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeResourcePlacementState>(
            "knowledge_resource_placement_state",
            &self.knowledge_resource_placement_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeResourceState>(
            "knowledge_resource_state",
            &self.knowledge_resource_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeRuinsState>(
            "knowledge_ruins_state",
            &self.knowledge_ruins_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeScrollDesc>(
            "knowledge_scroll_desc",
            &self.knowledge_scroll_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeScrollTypeDesc>(
            "knowledge_scroll_type_desc",
            &self.knowledge_scroll_type_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeSecondaryState>(
            "knowledge_secondary_state",
            &self.knowledge_secondary_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeStatModifierDesc>(
            "knowledge_stat_modifier_desc",
            &self.knowledge_stat_modifier_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<KnowledgeVaultState>(
            "knowledge_vault_state",
            &self.knowledge_vault_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LightSourceState>(
            "light_source_state",
            &self.light_source_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LocationState>(
            "location_state",
            &self.location_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LootChestDesc>(
            "loot_chest_desc",
            &self.loot_chest_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LootChestState>(
            "loot_chest_state",
            &self.loot_chest_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LootRarityDesc>(
            "loot_rarity_desc",
            &self.loot_rarity_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LootTableDesc>(
            "loot_table_desc",
            &self.loot_table_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<LostItemsState>(
            "lost_items_state",
            &self.lost_items_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<MobileEntityState>(
            "mobile_entity_state",
            &self.mobile_entity_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<MountingState>(
            "mounting_state",
            &self.mounting_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<MoveValidationStrikeCounterState>(
            "move_validation_strike_counter_state",
            &self.move_validation_strike_counter_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<NpcDesc>("npc_desc", &self.npc_desc, event);
        callbacks.invoke_table_row_callbacks::<NpcState>("npc_state", &self.npc_state, event);
        callbacks.invoke_table_row_callbacks::<OnboardingRewardDesc>(
            "onboarding_reward_desc",
            &self.onboarding_reward_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<OnboardingState>(
            "onboarding_state",
            &self.onboarding_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ParametersDesc>(
            "parameters_desc",
            &self.parameters_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ParametersPlayerMoveDesc>(
            "parameters_player_move_desc",
            &self.parameters_player_move_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PassiveCraftState>(
            "passive_craft_state",
            &self.passive_craft_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PathfindingDesc>(
            "pathfinding_desc",
            &self.pathfinding_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PavedTileState>(
            "paved_tile_state",
            &self.paved_tile_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PavingTileDesc>(
            "paving_tile_desc",
            &self.paving_tile_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PermissionState>(
            "permission_state",
            &self.permission_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PillarShapingDesc>(
            "pillar_shaping_desc",
            &self.pillar_shaping_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PillarShapingState>(
            "pillar_shaping_state",
            &self.pillar_shaping_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerActionDesc>(
            "player_action_desc",
            &self.player_action_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerActionState>(
            "player_action_state",
            &self.player_action_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerDeveloperNotificationState>(
            "player_developer_notification_state",
            &self.player_developer_notification_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerHousingDesc>(
            "player_housing_desc",
            &self.player_housing_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerHousingState>(
            "player_housing_state",
            &self.player_housing_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerLowercaseUsernameState>(
            "player_lowercase_username_state",
            &self.player_lowercase_username_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerNoteState>(
            "player_note_state",
            &self.player_note_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerNotificationEvent>(
            "player_notification_event",
            &self.player_notification_event,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerPrefsState>(
            "player_prefs_state",
            &self.player_prefs_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerQueueState>(
            "player_queue_state",
            &self.player_queue_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerReportState>(
            "player_report_state",
            &self.player_report_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerReportStateTimestamp>(
            "player_report_state_timestamp",
            &self.player_report_state_timestamp,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerShardState>(
            "player_shard_state",
            &self.player_shard_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerState>(
            "player_state",
            &self.player_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerTimestampState>(
            "player_timestamp_state",
            &self.player_timestamp_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerUsernameState>(
            "player_username_state",
            &self.player_username_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerVoteConcludeTimer>(
            "player_vote_conclude_timer",
            &self.player_vote_conclude_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerVoteState>(
            "player_vote_state",
            &self.player_vote_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PortalState>(
            "portal_state",
            &self.portal_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PrivateParametersDesc>(
            "private_parameters_desc",
            &self.private_parameters_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ProgressiveActionState>(
            "progressive_action_state",
            &self.progressive_action_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ProjectSiteState>(
            "project_site_state",
            &self.project_site_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<RegionConnectionInfo>(
            "region_connection_info",
            &self.region_connection_info,
            event,
        );
        callbacks.invoke_table_row_callbacks::<RegionPopulationInfo>(
            "region_population_info",
            &self.region_population_info,
            event,
        );
        callbacks.invoke_table_row_callbacks::<RegionSignInParameters>(
            "region_sign_in_parameters",
            &self.region_sign_in_parameters,
            event,
        );
        callbacks.invoke_table_row_callbacks::<RentState>("rent_state", &self.rent_state, event);
        callbacks.invoke_table_row_callbacks::<ReservedNameDesc>(
            "reserved_name_desc",
            &self.reserved_name_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourceClumpDesc>(
            "resource_clump_desc",
            &self.resource_clump_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourceCount>(
            "resource_count",
            &self.resource_count,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourceDesc>(
            "resource_desc",
            &self.resource_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourceGrowthRecipeDesc>(
            "resource_growth_recipe_desc",
            &self.resource_growth_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourceHealthState>(
            "resource_health_state",
            &self.resource_health_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourcePlacementRecipeDesc>(
            "resource_placement_recipe_desc",
            &self.resource_placement_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ResourceState>(
            "resource_state",
            &self.resource_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<RezSickLongTermState>(
            "rez_sick_long_term_state",
            &self.rez_sick_long_term_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SatiationState>(
            "satiation_state",
            &self.satiation_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SecondaryKnowledgeDesc>(
            "secondary_knowledge_desc",
            &self.secondary_knowledge_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AuctionListingState>(
            "sell_order_state",
            &self.sell_order_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ServerIdentity>(
            "server_identity",
            &self.server_identity,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SignedInPlayerState>(
            "signed_in_player_state",
            &self.signed_in_player_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SingleResourceToClumpDesc>(
            "single_resource_to_clump_desc",
            &self.single_resource_to_clump_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SkillDesc>("skill_desc", &self.skill_desc, event);
        callbacks.invoke_table_row_callbacks::<StagedStaticData>(
            "staged_static_data",
            &self.staged_static_data,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StaminaState>(
            "stamina_state",
            &self.stamina_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StarvingPlayerState>(
            "starving_player_state",
            &self.starving_player_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TargetState>(
            "target_state",
            &self.target_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TargetableState>(
            "targetable_state",
            &self.targetable_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TargetingMatrixDesc>(
            "targeting_matrix_desc",
            &self.targeting_matrix_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TeleportItemDesc>(
            "teleport_item_desc",
            &self.teleport_item_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TeleportationEnergyState>(
            "teleportation_energy_state",
            &self.teleportation_energy_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TerraformProgressState>(
            "terraform_progress_state",
            &self.terraform_progress_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TerraformRecipeDesc>(
            "terraform_recipe_desc",
            &self.terraform_recipe_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TerrainChunkState>(
            "terrain_chunk_state",
            &self.terrain_chunk_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TheGreatPlaceHolderTable>(
            "the_great_placeholder_table",
            &self.the_great_placeholder_table,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ThreatState>(
            "threat_state",
            &self.threat_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ToolDesc>("tool_desc", &self.tool_desc, event);
        callbacks.invoke_table_row_callbacks::<ToolTypeDesc>(
            "tool_type_desc",
            &self.tool_type_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ToolbarState>(
            "toolbar_state",
            &self.toolbar_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TradeOrderState>(
            "trade_order_state",
            &self.trade_order_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TradeSessionState>(
            "trade_session_state",
            &self.trade_session_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TravelerTaskDesc>(
            "traveler_task_desc",
            &self.traveler_task_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TravelerTaskState>(
            "traveler_task_state",
            &self.traveler_task_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TravelerTradeOrderDesc>(
            "traveler_trade_order_desc",
            &self.traveler_trade_order_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UnclaimedCollectiblesState>(
            "unclaimed_collectibles_state",
            &self.unclaimed_collectibles_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UnclaimedShardsState>(
            "unclaimed_shards_state",
            &self.unclaimed_shards_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UserAuthenticationState>(
            "user_authentication_state",
            &self.user_authentication_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UserModerationState>(
            "user_moderation_state",
            &self.user_moderation_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UserPreviousRegionState>(
            "user_previous_region_state",
            &self.user_previous_region_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UserRegionState>(
            "user_region_state",
            &self.user_region_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UserState>("user_state", &self.user_state, event);
        callbacks.invoke_table_row_callbacks::<VaultState>("vault_state", &self.vault_state, event);
        callbacks.invoke_table_row_callbacks::<WallDesc>("wall_desc", &self.wall_desc, event);
        callbacks.invoke_table_row_callbacks::<WeaponDesc>("weapon_desc", &self.weapon_desc, event);
        callbacks.invoke_table_row_callbacks::<WeaponTypeDesc>(
            "weapon_type_desc",
            &self.weapon_type_desc,
            event,
        );
        callbacks.invoke_table_row_callbacks::<WorldRegionNameState>(
            "world_region_name_state",
            &self.world_region_name_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<WorldRegionState>(
            "world_region_state",
            &self.world_region_state,
            event,
        );
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        a_i_debug_state_table::register_table(client_cache);
        achievement_desc_table::register_table(client_cache);
        action_state_table::register_table(client_cache);
        active_buff_state_table::register_table(client_cache);
        admin_broadcast_table::register_table(client_cache);
        alert_desc_table::register_table(client_cache);
        alert_state_table::register_table(client_cache);
        attached_herds_state_table::register_table(client_cache);
        attack_outcome_state_table::register_table(client_cache);
        auto_claim_state_table::register_table(client_cache);
        barter_stall_state_table::register_table(client_cache);
        biome_desc_table::register_table(client_cache);
        blocked_identity_table::register_table(client_cache);
        buff_desc_table::register_table(client_cache);
        buff_type_desc_table::register_table(client_cache);
        building_claim_desc_table::register_table(client_cache);
        building_desc_table::register_table(client_cache);
        building_function_type_mapping_desc_table::register_table(client_cache);
        building_nickname_state_table::register_table(client_cache);
        building_portal_desc_table::register_table(client_cache);
        building_repairs_desc_table::register_table(client_cache);
        building_spawn_desc_table::register_table(client_cache);
        building_state_table::register_table(client_cache);
        building_type_desc_table::register_table(client_cache);
        buy_order_state_table::register_table(client_cache);
        cargo_desc_table::register_table(client_cache);
        character_stat_desc_table::register_table(client_cache);
        character_stats_state_table::register_table(client_cache);
        chat_message_state_table::register_table(client_cache);
        chest_rarity_desc_table::register_table(client_cache);
        claim_local_state_table::register_table(client_cache);
        claim_member_state_table::register_table(client_cache);
        claim_recruitment_state_table::register_table(client_cache);
        claim_state_table::register_table(client_cache);
        claim_tech_desc_table::register_table(client_cache);
        claim_tech_state_table::register_table(client_cache);
        claim_tile_cost_table::register_table(client_cache);
        claim_tile_state_table::register_table(client_cache);
        climb_requirement_desc_table::register_table(client_cache);
        closed_listing_state_table::register_table(client_cache);
        clothing_desc_table::register_table(client_cache);
        collectible_desc_table::register_table(client_cache);
        combat_action_desc_table::register_table(client_cache);
        combat_state_table::register_table(client_cache);
        config_table::register_table(client_cache);
        construction_recipe_desc_table::register_table(client_cache);
        crafting_recipe_desc_table::register_table(client_cache);
        deconstruction_recipe_desc_table::register_table(client_cache);
        deployable_collectible_state_table::register_table(client_cache);
        deployable_desc_table::register_table(client_cache);
        deployable_state_table::register_table(client_cache);
        dimension_description_state_table::register_table(client_cache);
        dimension_network_state_table::register_table(client_cache);
        distant_visible_entity_table::register_table(client_cache);
        distant_visible_entity_desc_table::register_table(client_cache);
        dropped_inventory_state_table::register_table(client_cache);
        duel_state_table::register_table(client_cache);
        elevator_desc_table::register_table(client_cache);
        emote_desc_table::register_table(client_cache);
        empire_chunk_state_table::register_table(client_cache);
        empire_color_desc_table::register_table(client_cache);
        empire_craft_supplies_timer_table::register_table(client_cache);
        empire_decay_loop_timer_table::register_table(client_cache);
        empire_directive_state_table::register_table(client_cache);
        empire_emblem_state_table::register_table(client_cache);
        empire_expansion_state_table::register_table(client_cache);
        empire_foundry_state_table::register_table(client_cache);
        empire_icon_desc_table::register_table(client_cache);
        empire_log_state_table::register_table(client_cache);
        empire_node_siege_state_table::register_table(client_cache);
        empire_node_state_table::register_table(client_cache);
        empire_notification_desc_table::register_table(client_cache);
        empire_notification_state_table::register_table(client_cache);
        empire_player_data_state_table::register_table(client_cache);
        empire_player_log_state_table::register_table(client_cache);
        empire_rank_desc_table::register_table(client_cache);
        empire_rank_state_table::register_table(client_cache);
        empire_settlement_state_table::register_table(client_cache);
        empire_siege_engine_state_table::register_table(client_cache);
        empire_siege_loop_timer_table::register_table(client_cache);
        empire_state_table::register_table(client_cache);
        empire_supplies_desc_table::register_table(client_cache);
        empire_territory_desc_table::register_table(client_cache);
        enemy_ai_params_desc_table::register_table(client_cache);
        enemy_desc_table::register_table(client_cache);
        enemy_mob_monitor_state_table::register_table(client_cache);
        enemy_state_table::register_table(client_cache);
        environment_debuff_desc_table::register_table(client_cache);
        equipment_desc_table::register_table(client_cache);
        equipment_state_table::register_table(client_cache);
        experience_state_table::register_table(client_cache);
        exploration_chunks_state_table::register_table(client_cache);
        extract_outcome_state_table::register_table(client_cache);
        extraction_recipe_desc_table::register_table(client_cache);
        food_desc_table::register_table(client_cache);
        footprint_tile_state_table::register_table(client_cache);
        force_generate_types_table::register_table(client_cache);
        gate_desc_table::register_table(client_cache);
        global_search_state_table::register_table(client_cache);
        globals_table::register_table(client_cache);
        granted_hub_item_state_table::register_table(client_cache);
        growth_state_table::register_table(client_cache);
        health_state_table::register_table(client_cache);
        herd_state_table::register_table(client_cache);
        hexite_exchange_entry_desc_table::register_table(client_cache);
        identity_role_table::register_table(client_cache);
        inter_module_message_table::register_table(client_cache);
        inter_module_message_counter_table::register_table(client_cache);
        inter_module_response_message_counter_table::register_table(client_cache);
        interior_collapse_trigger_state_table::register_table(client_cache);
        interior_environment_desc_table::register_table(client_cache);
        interior_instance_desc_table::register_table(client_cache);
        interior_network_desc_table::register_table(client_cache);
        interior_portal_connections_desc_table::register_table(client_cache);
        interior_shape_desc_table::register_table(client_cache);
        interior_spawn_desc_table::register_table(client_cache);
        inventory_state_table::register_table(client_cache);
        item_conversion_recipe_desc_table::register_table(client_cache);
        item_desc_table::register_table(client_cache);
        item_list_desc_table::register_table(client_cache);
        knowledge_achievement_state_table::register_table(client_cache);
        knowledge_battle_action_state_table::register_table(client_cache);
        knowledge_building_state_table::register_table(client_cache);
        knowledge_cargo_state_table::register_table(client_cache);
        knowledge_claim_state_table::register_table(client_cache);
        knowledge_construction_state_table::register_table(client_cache);
        knowledge_craft_state_table::register_table(client_cache);
        knowledge_deployable_state_table::register_table(client_cache);
        knowledge_enemy_state_table::register_table(client_cache);
        knowledge_extract_state_table::register_table(client_cache);
        knowledge_item_state_table::register_table(client_cache);
        knowledge_lore_state_table::register_table(client_cache);
        knowledge_npc_state_table::register_table(client_cache);
        knowledge_paving_state_table::register_table(client_cache);
        knowledge_pillar_shaping_state_table::register_table(client_cache);
        knowledge_resource_placement_state_table::register_table(client_cache);
        knowledge_resource_state_table::register_table(client_cache);
        knowledge_ruins_state_table::register_table(client_cache);
        knowledge_scroll_desc_table::register_table(client_cache);
        knowledge_scroll_type_desc_table::register_table(client_cache);
        knowledge_secondary_state_table::register_table(client_cache);
        knowledge_stat_modifier_desc_table::register_table(client_cache);
        knowledge_vault_state_table::register_table(client_cache);
        light_source_state_table::register_table(client_cache);
        location_state_table::register_table(client_cache);
        loot_chest_desc_table::register_table(client_cache);
        loot_chest_state_table::register_table(client_cache);
        loot_rarity_desc_table::register_table(client_cache);
        loot_table_desc_table::register_table(client_cache);
        lost_items_state_table::register_table(client_cache);
        mobile_entity_state_table::register_table(client_cache);
        mounting_state_table::register_table(client_cache);
        move_validation_strike_counter_state_table::register_table(client_cache);
        npc_desc_table::register_table(client_cache);
        npc_state_table::register_table(client_cache);
        onboarding_reward_desc_table::register_table(client_cache);
        onboarding_state_table::register_table(client_cache);
        parameters_desc_table::register_table(client_cache);
        parameters_player_move_desc_table::register_table(client_cache);
        passive_craft_state_table::register_table(client_cache);
        pathfinding_desc_table::register_table(client_cache);
        paved_tile_state_table::register_table(client_cache);
        paving_tile_desc_table::register_table(client_cache);
        permission_state_table::register_table(client_cache);
        pillar_shaping_desc_table::register_table(client_cache);
        pillar_shaping_state_table::register_table(client_cache);
        player_action_desc_table::register_table(client_cache);
        player_action_state_table::register_table(client_cache);
        player_developer_notification_state_table::register_table(client_cache);
        player_housing_desc_table::register_table(client_cache);
        player_housing_state_table::register_table(client_cache);
        player_lowercase_username_state_table::register_table(client_cache);
        player_note_state_table::register_table(client_cache);
        player_notification_event_table::register_table(client_cache);
        player_prefs_state_table::register_table(client_cache);
        player_queue_state_table::register_table(client_cache);
        player_report_state_table::register_table(client_cache);
        player_report_state_timestamp_table::register_table(client_cache);
        player_shard_state_table::register_table(client_cache);
        player_state_table::register_table(client_cache);
        player_timestamp_state_table::register_table(client_cache);
        player_username_state_table::register_table(client_cache);
        player_vote_conclude_timer_table::register_table(client_cache);
        player_vote_state_table::register_table(client_cache);
        portal_state_table::register_table(client_cache);
        private_parameters_desc_table::register_table(client_cache);
        progressive_action_state_table::register_table(client_cache);
        project_site_state_table::register_table(client_cache);
        region_connection_info_table::register_table(client_cache);
        region_population_info_table::register_table(client_cache);
        region_sign_in_parameters_table::register_table(client_cache);
        rent_state_table::register_table(client_cache);
        reserved_name_desc_table::register_table(client_cache);
        resource_clump_desc_table::register_table(client_cache);
        resource_count_table::register_table(client_cache);
        resource_desc_table::register_table(client_cache);
        resource_growth_recipe_desc_table::register_table(client_cache);
        resource_health_state_table::register_table(client_cache);
        resource_placement_recipe_desc_table::register_table(client_cache);
        resource_state_table::register_table(client_cache);
        rez_sick_long_term_state_table::register_table(client_cache);
        satiation_state_table::register_table(client_cache);
        secondary_knowledge_desc_table::register_table(client_cache);
        sell_order_state_table::register_table(client_cache);
        server_identity_table::register_table(client_cache);
        signed_in_player_state_table::register_table(client_cache);
        single_resource_to_clump_desc_table::register_table(client_cache);
        skill_desc_table::register_table(client_cache);
        staged_static_data_table::register_table(client_cache);
        stamina_state_table::register_table(client_cache);
        starving_player_state_table::register_table(client_cache);
        target_state_table::register_table(client_cache);
        targetable_state_table::register_table(client_cache);
        targeting_matrix_desc_table::register_table(client_cache);
        teleport_item_desc_table::register_table(client_cache);
        teleportation_energy_state_table::register_table(client_cache);
        terraform_progress_state_table::register_table(client_cache);
        terraform_recipe_desc_table::register_table(client_cache);
        terrain_chunk_state_table::register_table(client_cache);
        the_great_placeholder_table_table::register_table(client_cache);
        threat_state_table::register_table(client_cache);
        tool_desc_table::register_table(client_cache);
        tool_type_desc_table::register_table(client_cache);
        toolbar_state_table::register_table(client_cache);
        trade_order_state_table::register_table(client_cache);
        trade_session_state_table::register_table(client_cache);
        traveler_task_desc_table::register_table(client_cache);
        traveler_task_state_table::register_table(client_cache);
        traveler_trade_order_desc_table::register_table(client_cache);
        unclaimed_collectibles_state_table::register_table(client_cache);
        unclaimed_shards_state_table::register_table(client_cache);
        user_authentication_state_table::register_table(client_cache);
        user_moderation_state_table::register_table(client_cache);
        user_previous_region_state_table::register_table(client_cache);
        user_region_state_table::register_table(client_cache);
        user_state_table::register_table(client_cache);
        vault_state_table::register_table(client_cache);
        wall_desc_table::register_table(client_cache);
        weapon_desc_table::register_table(client_cache);
        weapon_type_desc_table::register_table(client_cache);
        world_region_name_state_table::register_table(client_cache);
        world_region_state_table::register_table(client_cache);
    }
}
