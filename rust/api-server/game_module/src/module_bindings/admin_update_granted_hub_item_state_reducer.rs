// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::hub_item_type_type::HubItemType;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct AdminUpdateGrantedHubItemStateArgs {
    pub identity: __sdk::Identity,
    pub item_type: HubItemType,
    pub item_id: i32,
    pub balance: u32,
}

impl From<AdminUpdateGrantedHubItemStateArgs> for super::Reducer {
    fn from(args: AdminUpdateGrantedHubItemStateArgs) -> Self {
        Self::AdminUpdateGrantedHubItemState {
            identity: args.identity,
            item_type: args.item_type,
            item_id: args.item_id,
            balance: args.balance,
        }
    }
}

impl __sdk::InModule for AdminUpdateGrantedHubItemStateArgs {
    type Module = super::RemoteModule;
}

pub struct AdminUpdateGrantedHubItemStateCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `admin_update_granted_hub_item_state`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait admin_update_granted_hub_item_state {
    /// Request that the remote module invoke the reducer `admin_update_granted_hub_item_state` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_admin_update_granted_hub_item_state`] callbacks.
    fn admin_update_granted_hub_item_state(
        &self,
        identity: __sdk::Identity,
        item_type: HubItemType,
        item_id: i32,
        balance: u32,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `admin_update_granted_hub_item_state`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`AdminUpdateGrantedHubItemStateCallbackId`] can be passed to [`Self::remove_on_admin_update_granted_hub_item_state`]
    /// to cancel the callback.
    fn on_admin_update_granted_hub_item_state(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &HubItemType, &i32, &u32)
            + Send
            + 'static,
    ) -> AdminUpdateGrantedHubItemStateCallbackId;
    /// Cancel a callback previously registered by [`Self::on_admin_update_granted_hub_item_state`],
    /// causing it not to run in the future.
    fn remove_on_admin_update_granted_hub_item_state(
        &self,
        callback: AdminUpdateGrantedHubItemStateCallbackId,
    );
}

impl admin_update_granted_hub_item_state for super::RemoteReducers {
    fn admin_update_granted_hub_item_state(
        &self,
        identity: __sdk::Identity,
        item_type: HubItemType,
        item_id: i32,
        balance: u32,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "admin_update_granted_hub_item_state",
            AdminUpdateGrantedHubItemStateArgs {
                identity,
                item_type,
                item_id,
                balance,
            },
        )
    }
    fn on_admin_update_granted_hub_item_state(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &HubItemType, &i32, &u32)
            + Send
            + 'static,
    ) -> AdminUpdateGrantedHubItemStateCallbackId {
        AdminUpdateGrantedHubItemStateCallbackId(self.imp.on_reducer(
            "admin_update_granted_hub_item_state",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::AdminUpdateGrantedHubItemState {
                                    identity,
                                    item_type,
                                    item_id,
                                    balance,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, identity, item_type, item_id, balance)
            }),
        ))
    }
    fn remove_on_admin_update_granted_hub_item_state(
        &self,
        callback: AdminUpdateGrantedHubItemStateCallbackId,
    ) {
        self.imp
            .remove_on_reducer("admin_update_granted_hub_item_state", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `admin_update_granted_hub_item_state`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_admin_update_granted_hub_item_state {
    /// Set the call-reducer flags for the reducer `admin_update_granted_hub_item_state` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn admin_update_granted_hub_item_state(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_admin_update_granted_hub_item_state for super::SetReducerFlags {
    fn admin_update_granted_hub_item_state(&self, flags: __ws::CallReducerFlags) {
        self.imp
            .set_call_reducer_flags("admin_update_granted_hub_item_state", flags);
    }
}
