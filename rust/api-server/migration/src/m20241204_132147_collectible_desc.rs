use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .create_table(
                Table::create()
                    .table(CollectibleDesc::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(CollectibleDesc::Id)
                            .integer()
                            .not_null()
                            .auto_increment()
                            .primary_key(),
                    )
                    .col(ColumnDef::new(CollectibleDesc::Name).string().not_null())
                    .col(
                        ColumnDef::new(CollectibleDesc::Description)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::CollectibleType)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::InvalidatesType)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::AutoCollect)
                            .boolean()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::CollectibleRarity)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::StartingLoadout)
                            .boolean()
                            .not_null(),
                    )
                    .col(ColumnDef::new(CollectibleDesc::Locked).boolean().not_null())
                    .col(
                        ColumnDef::new(CollectibleDesc::Variant)
                            .integer()
                            .not_null(),
                    )
                    .col(ColumnDef::new(CollectibleDesc::Color).string().not_null())
                    .col(
                        ColumnDef::new(CollectibleDesc::Emission)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::MaxEquipCount)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::ModelAssetName)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::VariantMaterial)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::IconAssetName)
                            .string()
                            .not_null(),
                    )
                    .col(ColumnDef::new(CollectibleDesc::Tag).string().not_null())
                    .col(
                        ColumnDef::new(CollectibleDesc::DisplayString)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(CollectibleDesc::ItemDeedId)
                            .integer()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await
    }
    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_table(Table::drop().table(CollectibleDesc::Table).to_owned())
            .await
    }
}

#[derive(DeriveIden)]
enum CollectibleDesc {
    Table,
    Id,
    Name,
    Description,
    CollectibleType,
    InvalidatesType,
    AutoCollect,
    CollectibleRarity,
    StartingLoadout,
    Locked,
    Variant,
    Color,
    Emission,
    MaxEquipCount,
    ModelAssetName,
    VariantMaterial,
    IconAssetName,
    Tag,
    DisplayString,
    ItemDeedId,
}
